{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\nvar _os = _interopRequireDefault(require(\"os\"));\nvar _dns = _interopRequireDefault(require(\"dns\"));\nvar _constants = _interopRequireDefault(require(\"constants\"));\nvar _stream = require(\"stream\");\nvar _identity = require(\"@azure/identity\");\nvar _bulkLoad = _interopRequireDefault(require(\"./bulk-load\"));\nvar _debug = _interopRequireDefault(require(\"./debug\"));\nvar _events = require(\"events\");\nvar _instanceLookup = require(\"./instance-lookup\");\nvar _transientErrorLookup = require(\"./transient-error-lookup\");\nvar _packet = require(\"./packet\");\nvar _preloginPayload = _interopRequireDefault(require(\"./prelogin-payload\"));\nvar _login7Payload = _interopRequireDefault(require(\"./login7-payload\"));\nvar _ntlmPayload = _interopRequireDefault(require(\"./ntlm-payload\"));\nvar _request = _interopRequireDefault(require(\"./request\"));\nvar _rpcrequestPayload = _interopRequireDefault(require(\"./rpcrequest-payload\"));\nvar _sqlbatchPayload = _interopRequireDefault(require(\"./sqlbatch-payload\"));\nvar _messageIo = _interopRequireDefault(require(\"./message-io\"));\nvar _tokenStreamParser = require(\"./token/token-stream-parser\");\nvar _transaction = require(\"./transaction\");\nvar _errors = require(\"./errors\");\nvar _connector = require(\"./connector\");\nvar _library = require(\"./library\");\nvar _tdsVersions = require(\"./tds-versions\");\nvar _message = _interopRequireDefault(require(\"./message\"));\nvar _ntlm = require(\"./ntlm\");\nvar _nodeAbortController = require(\"node-abort-controller\");\nvar _dataType = require(\"./data-type\");\nvar _bulkLoadPayload = require(\"./bulk-load-payload\");\nvar _esAggregateError = _interopRequireDefault(require(\"es-aggregate-error\"));\nvar _package = require(\"../package.json\");\nvar _url = require(\"url\");\nvar _handler = require(\"./token/handler\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * @private\n */\nconst KEEP_ALIVE_INITIAL_DELAY = 30 * 1000;\n/**\n * @private\n */\n\nconst DEFAULT_CONNECT_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\n\nconst DEFAULT_CLIENT_REQUEST_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\n\nconst DEFAULT_CANCEL_TIMEOUT = 5 * 1000;\n/**\n * @private\n */\n\nconst DEFAULT_CONNECT_RETRY_INTERVAL = 500;\n/**\n * @private\n */\n\nconst DEFAULT_PACKET_SIZE = 4 * 1024;\n/**\n * @private\n */\n\nconst DEFAULT_TEXTSIZE = 2147483647;\n/**\n * @private\n */\n\nconst DEFAULT_DATEFIRST = 7;\n/**\n * @private\n */\n\nconst DEFAULT_PORT = 1433;\n/**\n * @private\n */\n\nconst DEFAULT_TDS_VERSION = '7_4';\n/**\n * @private\n */\n\nconst DEFAULT_LANGUAGE = 'us_english';\n/**\n * @private\n */\n\nconst DEFAULT_DATEFORMAT = 'mdy';\n\n/**\n * @private\n */\nconst CLEANUP_TYPE = {\n  NORMAL: 0,\n  REDIRECT: 1,\n  RETRY: 2\n};\n\n/**\n * A [[Connection]] instance represents a single connection to a database server.\n *\n * ```js\n * var Connection = require('tedious').Connection;\n * var config = {\n *  \"authentication\": {\n *    ...,\n *    \"options\": {...}\n *  },\n *  \"options\": {...}\n * };\n * var connection = new Connection(config);\n * ```\n *\n * Only one request at a time may be executed on a connection. Once a [[Request]]\n * has been initiated (with [[Connection.callProcedure]], [[Connection.execSql]],\n * or [[Connection.execSqlBatch]]), another should not be initiated until the\n * [[Request]]'s completion callback is called.\n */\nclass Connection extends _events.EventEmitter {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * Note: be aware of the different options field:\n   * 1. config.authentication.options\n   * 2. config.options\n   *\n   * ```js\n   * const { Connection } = require('tedious');\n   *\n   * const config = {\n   *  \"authentication\": {\n   *    ...,\n   *    \"options\": {...}\n   *  },\n   *  \"options\": {...}\n   * };\n   *\n   * const connection = new Connection(config);\n   * ```\n   *\n   * @param config\n   */\n  constructor(config) {\n    super();\n    this.fedAuthRequired = void 0;\n    this.config = void 0;\n    this.secureContextOptions = void 0;\n    this.inTransaction = void 0;\n    this.transactionDescriptors = void 0;\n    this.transactionDepth = void 0;\n    this.isSqlBatch = void 0;\n    this.curTransientRetryCount = void 0;\n    this.transientErrorLookup = void 0;\n    this.closed = void 0;\n    this.loginError = void 0;\n    this.debug = void 0;\n    this.ntlmpacket = void 0;\n    this.ntlmpacketBuffer = void 0;\n    this.routingData = void 0;\n    this.messageIo = void 0;\n    this.state = void 0;\n    this.resetConnectionOnNextRequest = void 0;\n    this.request = void 0;\n    this.procReturnStatusValue = void 0;\n    this.socket = void 0;\n    this.messageBuffer = void 0;\n    this.connectTimer = void 0;\n    this.cancelTimer = void 0;\n    this.requestTimer = void 0;\n    this.retryTimer = void 0;\n    this._cancelAfterRequestSent = void 0;\n    this.databaseCollation = void 0;\n    if (typeof config !== 'object' || config === null) {\n      throw new TypeError('The \"config\" argument is required and must be of type Object.');\n    }\n    if (typeof config.server !== 'string') {\n      throw new TypeError('The \"config.server\" property is required and must be of type string.');\n    }\n    this.fedAuthRequired = false;\n    let authentication;\n    if (config.authentication !== undefined) {\n      if (typeof config.authentication !== 'object' || config.authentication === null) {\n        throw new TypeError('The \"config.authentication\" property must be of type Object.');\n      }\n      const type = config.authentication.type;\n      const options = config.authentication.options === undefined ? {} : config.authentication.options;\n      if (typeof type !== 'string') {\n        throw new TypeError('The \"config.authentication.type\" property must be of type string.');\n      }\n      if (type !== 'default' && type !== 'ntlm' && type !== 'azure-active-directory-password' && type !== 'azure-active-directory-access-token' && type !== 'azure-active-directory-msi-vm' && type !== 'azure-active-directory-msi-app-service' && type !== 'azure-active-directory-service-principal-secret' && type !== 'azure-active-directory-default') {\n        throw new TypeError('The \"type\" property must one of \"default\", \"ntlm\", \"azure-active-directory-password\", \"azure-active-directory-access-token\", \"azure-active-directory-default\", \"azure-active-directory-msi-vm\" or \"azure-active-directory-msi-app-service\" or \"azure-active-directory-service-principal-secret\".');\n      }\n      if (typeof options !== 'object' || options === null) {\n        throw new TypeError('The \"config.authentication.options\" property must be of type object.');\n      }\n      if (type === 'ntlm') {\n        if (typeof options.domain !== 'string') {\n          throw new TypeError('The \"config.authentication.options.domain\" property must be of type string.');\n        }\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n        authentication = {\n          type: 'ntlm',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain && options.domain.toUpperCase()\n          }\n        };\n      } else if (type === 'azure-active-directory-password') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n        if (options.tenantId !== undefined && typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-password',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            tenantId: options.tenantId,\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-access-token') {\n        if (typeof options.token !== 'string') {\n          throw new TypeError('The \"config.authentication.options.token\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-access-token',\n          options: {\n            token: options.token\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-vm') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-msi-vm',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-default') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-default',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-app-service') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-msi-app-service',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-service-principal-secret') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        if (typeof options.clientSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientSecret\" property must be of type string.');\n        }\n        if (typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-service-principal-secret',\n          options: {\n            clientId: options.clientId,\n            clientSecret: options.clientSecret,\n            tenantId: options.tenantId\n          }\n        };\n      } else {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n        authentication = {\n          type: 'default',\n          options: {\n            userName: options.userName,\n            password: options.password\n          }\n        };\n      }\n    } else {\n      authentication = {\n        type: 'default',\n        options: {\n          userName: undefined,\n          password: undefined\n        }\n      };\n    }\n    this.config = {\n      server: config.server,\n      authentication: authentication,\n      options: {\n        abortTransactionOnError: false,\n        appName: undefined,\n        camelCaseColumns: false,\n        cancelTimeout: DEFAULT_CANCEL_TIMEOUT,\n        columnEncryptionKeyCacheTTL: 2 * 60 * 60 * 1000,\n        // Units: miliseconds\n        columnEncryptionSetting: false,\n        columnNameReplacer: undefined,\n        connectionRetryInterval: DEFAULT_CONNECT_RETRY_INTERVAL,\n        connectTimeout: DEFAULT_CONNECT_TIMEOUT,\n        connectionIsolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        cryptoCredentialsDetails: {},\n        database: undefined,\n        datefirst: DEFAULT_DATEFIRST,\n        dateFormat: DEFAULT_DATEFORMAT,\n        debug: {\n          data: false,\n          packet: false,\n          payload: false,\n          token: false\n        },\n        enableAnsiNull: true,\n        enableAnsiNullDefault: true,\n        enableAnsiPadding: true,\n        enableAnsiWarnings: true,\n        enableArithAbort: true,\n        enableConcatNullYieldsNull: true,\n        enableCursorCloseOnCommit: null,\n        enableImplicitTransactions: false,\n        enableNumericRoundabort: false,\n        enableQuotedIdentifier: true,\n        encrypt: true,\n        fallbackToDefaultDb: false,\n        encryptionKeyStoreProviders: undefined,\n        instanceName: undefined,\n        isolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        language: DEFAULT_LANGUAGE,\n        localAddress: undefined,\n        maxRetriesOnTransientErrors: 3,\n        multiSubnetFailover: false,\n        packetSize: DEFAULT_PACKET_SIZE,\n        port: DEFAULT_PORT,\n        readOnlyIntent: false,\n        requestTimeout: DEFAULT_CLIENT_REQUEST_TIMEOUT,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        serverName: undefined,\n        serverSupportsColumnEncryption: false,\n        tdsVersion: DEFAULT_TDS_VERSION,\n        textsize: DEFAULT_TEXTSIZE,\n        trustedServerNameAE: undefined,\n        trustServerCertificate: false,\n        useColumnNames: false,\n        useUTC: true,\n        workstationId: undefined,\n        lowerCaseGuids: false\n      }\n    };\n    if (config.options) {\n      if (config.options.port && config.options.instanceName) {\n        throw new Error('Port and instanceName are mutually exclusive, but ' + config.options.port + ' and ' + config.options.instanceName + ' provided');\n      }\n      if (config.options.abortTransactionOnError !== undefined) {\n        if (typeof config.options.abortTransactionOnError !== 'boolean' && config.options.abortTransactionOnError !== null) {\n          throw new TypeError('The \"config.options.abortTransactionOnError\" property must be of type string or null.');\n        }\n        this.config.options.abortTransactionOnError = config.options.abortTransactionOnError;\n      }\n      if (config.options.appName !== undefined) {\n        if (typeof config.options.appName !== 'string') {\n          throw new TypeError('The \"config.options.appName\" property must be of type string.');\n        }\n        this.config.options.appName = config.options.appName;\n      }\n      if (config.options.camelCaseColumns !== undefined) {\n        if (typeof config.options.camelCaseColumns !== 'boolean') {\n          throw new TypeError('The \"config.options.camelCaseColumns\" property must be of type boolean.');\n        }\n        this.config.options.camelCaseColumns = config.options.camelCaseColumns;\n      }\n      if (config.options.cancelTimeout !== undefined) {\n        if (typeof config.options.cancelTimeout !== 'number') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type number.');\n        }\n        this.config.options.cancelTimeout = config.options.cancelTimeout;\n      }\n      if (config.options.columnNameReplacer) {\n        if (typeof config.options.columnNameReplacer !== 'function') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type function.');\n        }\n        this.config.options.columnNameReplacer = config.options.columnNameReplacer;\n      }\n      if (config.options.connectionIsolationLevel !== undefined) {\n        (0, _transaction.assertValidIsolationLevel)(config.options.connectionIsolationLevel, 'config.options.connectionIsolationLevel');\n        this.config.options.connectionIsolationLevel = config.options.connectionIsolationLevel;\n      }\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n        this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n      if (config.options.cryptoCredentialsDetails !== undefined) {\n        if (typeof config.options.cryptoCredentialsDetails !== 'object' || config.options.cryptoCredentialsDetails === null) {\n          throw new TypeError('The \"config.options.cryptoCredentialsDetails\" property must be of type Object.');\n        }\n        this.config.options.cryptoCredentialsDetails = config.options.cryptoCredentialsDetails;\n      }\n      if (config.options.database !== undefined) {\n        if (typeof config.options.database !== 'string') {\n          throw new TypeError('The \"config.options.database\" property must be of type string.');\n        }\n        this.config.options.database = config.options.database;\n      }\n      if (config.options.datefirst !== undefined) {\n        if (typeof config.options.datefirst !== 'number' && config.options.datefirst !== null) {\n          throw new TypeError('The \"config.options.datefirst\" property must be of type number.');\n        }\n        if (config.options.datefirst !== null && (config.options.datefirst < 1 || config.options.datefirst > 7)) {\n          throw new RangeError('The \"config.options.datefirst\" property must be >= 1 and <= 7');\n        }\n        this.config.options.datefirst = config.options.datefirst;\n      }\n      if (config.options.dateFormat !== undefined) {\n        if (typeof config.options.dateFormat !== 'string' && config.options.dateFormat !== null) {\n          throw new TypeError('The \"config.options.dateFormat\" property must be of type string or null.');\n        }\n        this.config.options.dateFormat = config.options.dateFormat;\n      }\n      if (config.options.debug) {\n        if (config.options.debug.data !== undefined) {\n          if (typeof config.options.debug.data !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.data\" property must be of type boolean.');\n          }\n          this.config.options.debug.data = config.options.debug.data;\n        }\n        if (config.options.debug.packet !== undefined) {\n          if (typeof config.options.debug.packet !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.packet\" property must be of type boolean.');\n          }\n          this.config.options.debug.packet = config.options.debug.packet;\n        }\n        if (config.options.debug.payload !== undefined) {\n          if (typeof config.options.debug.payload !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.payload\" property must be of type boolean.');\n          }\n          this.config.options.debug.payload = config.options.debug.payload;\n        }\n        if (config.options.debug.token !== undefined) {\n          if (typeof config.options.debug.token !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.token\" property must be of type boolean.');\n          }\n          this.config.options.debug.token = config.options.debug.token;\n        }\n      }\n      if (config.options.enableAnsiNull !== undefined) {\n        if (typeof config.options.enableAnsiNull !== 'boolean' && config.options.enableAnsiNull !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNull\" property must be of type boolean or null.');\n        }\n        this.config.options.enableAnsiNull = config.options.enableAnsiNull;\n      }\n      if (config.options.enableAnsiNullDefault !== undefined) {\n        if (typeof config.options.enableAnsiNullDefault !== 'boolean' && config.options.enableAnsiNullDefault !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNullDefault\" property must be of type boolean or null.');\n        }\n        this.config.options.enableAnsiNullDefault = config.options.enableAnsiNullDefault;\n      }\n      if (config.options.enableAnsiPadding !== undefined) {\n        if (typeof config.options.enableAnsiPadding !== 'boolean' && config.options.enableAnsiPadding !== null) {\n          throw new TypeError('The \"config.options.enableAnsiPadding\" property must be of type boolean or null.');\n        }\n        this.config.options.enableAnsiPadding = config.options.enableAnsiPadding;\n      }\n      if (config.options.enableAnsiWarnings !== undefined) {\n        if (typeof config.options.enableAnsiWarnings !== 'boolean' && config.options.enableAnsiWarnings !== null) {\n          throw new TypeError('The \"config.options.enableAnsiWarnings\" property must be of type boolean or null.');\n        }\n        this.config.options.enableAnsiWarnings = config.options.enableAnsiWarnings;\n      }\n      if (config.options.enableArithAbort !== undefined) {\n        if (typeof config.options.enableArithAbort !== 'boolean' && config.options.enableArithAbort !== null) {\n          throw new TypeError('The \"config.options.enableArithAbort\" property must be of type boolean or null.');\n        }\n        this.config.options.enableArithAbort = config.options.enableArithAbort;\n      }\n      if (config.options.enableConcatNullYieldsNull !== undefined) {\n        if (typeof config.options.enableConcatNullYieldsNull !== 'boolean' && config.options.enableConcatNullYieldsNull !== null) {\n          throw new TypeError('The \"config.options.enableConcatNullYieldsNull\" property must be of type boolean or null.');\n        }\n        this.config.options.enableConcatNullYieldsNull = config.options.enableConcatNullYieldsNull;\n      }\n      if (config.options.enableCursorCloseOnCommit !== undefined) {\n        if (typeof config.options.enableCursorCloseOnCommit !== 'boolean' && config.options.enableCursorCloseOnCommit !== null) {\n          throw new TypeError('The \"config.options.enableCursorCloseOnCommit\" property must be of type boolean or null.');\n        }\n        this.config.options.enableCursorCloseOnCommit = config.options.enableCursorCloseOnCommit;\n      }\n      if (config.options.enableImplicitTransactions !== undefined) {\n        if (typeof config.options.enableImplicitTransactions !== 'boolean' && config.options.enableImplicitTransactions !== null) {\n          throw new TypeError('The \"config.options.enableImplicitTransactions\" property must be of type boolean or null.');\n        }\n        this.config.options.enableImplicitTransactions = config.options.enableImplicitTransactions;\n      }\n      if (config.options.enableNumericRoundabort !== undefined) {\n        if (typeof config.options.enableNumericRoundabort !== 'boolean' && config.options.enableNumericRoundabort !== null) {\n          throw new TypeError('The \"config.options.enableNumericRoundabort\" property must be of type boolean or null.');\n        }\n        this.config.options.enableNumericRoundabort = config.options.enableNumericRoundabort;\n      }\n      if (config.options.enableQuotedIdentifier !== undefined) {\n        if (typeof config.options.enableQuotedIdentifier !== 'boolean' && config.options.enableQuotedIdentifier !== null) {\n          throw new TypeError('The \"config.options.enableQuotedIdentifier\" property must be of type boolean or null.');\n        }\n        this.config.options.enableQuotedIdentifier = config.options.enableQuotedIdentifier;\n      }\n      if (config.options.encrypt !== undefined) {\n        if (typeof config.options.encrypt !== 'boolean') {\n          throw new TypeError('The \"config.options.encrypt\" property must be of type boolean.');\n        }\n        this.config.options.encrypt = config.options.encrypt;\n      }\n      if (config.options.fallbackToDefaultDb !== undefined) {\n        if (typeof config.options.fallbackToDefaultDb !== 'boolean') {\n          throw new TypeError('The \"config.options.fallbackToDefaultDb\" property must be of type boolean.');\n        }\n        this.config.options.fallbackToDefaultDb = config.options.fallbackToDefaultDb;\n      }\n      if (config.options.instanceName !== undefined) {\n        if (typeof config.options.instanceName !== 'string') {\n          throw new TypeError('The \"config.options.instanceName\" property must be of type string.');\n        }\n        this.config.options.instanceName = config.options.instanceName;\n        this.config.options.port = undefined;\n      }\n      if (config.options.isolationLevel !== undefined) {\n        (0, _transaction.assertValidIsolationLevel)(config.options.isolationLevel, 'config.options.isolationLevel');\n        this.config.options.isolationLevel = config.options.isolationLevel;\n      }\n      if (config.options.language !== undefined) {\n        if (typeof config.options.language !== 'string' && config.options.language !== null) {\n          throw new TypeError('The \"config.options.language\" property must be of type string or null.');\n        }\n        this.config.options.language = config.options.language;\n      }\n      if (config.options.localAddress !== undefined) {\n        if (typeof config.options.localAddress !== 'string') {\n          throw new TypeError('The \"config.options.localAddress\" property must be of type string.');\n        }\n        this.config.options.localAddress = config.options.localAddress;\n      }\n      if (config.options.multiSubnetFailover !== undefined) {\n        if (typeof config.options.multiSubnetFailover !== 'boolean') {\n          throw new TypeError('The \"config.options.multiSubnetFailover\" property must be of type boolean.');\n        }\n        this.config.options.multiSubnetFailover = config.options.multiSubnetFailover;\n      }\n      if (config.options.packetSize !== undefined) {\n        if (typeof config.options.packetSize !== 'number') {\n          throw new TypeError('The \"config.options.packetSize\" property must be of type number.');\n        }\n        this.config.options.packetSize = config.options.packetSize;\n      }\n      if (config.options.port !== undefined) {\n        if (typeof config.options.port !== 'number') {\n          throw new TypeError('The \"config.options.port\" property must be of type number.');\n        }\n        if (config.options.port <= 0 || config.options.port >= 65536) {\n          throw new RangeError('The \"config.options.port\" property must be > 0 and < 65536');\n        }\n        this.config.options.port = config.options.port;\n        this.config.options.instanceName = undefined;\n      }\n      if (config.options.readOnlyIntent !== undefined) {\n        if (typeof config.options.readOnlyIntent !== 'boolean') {\n          throw new TypeError('The \"config.options.readOnlyIntent\" property must be of type boolean.');\n        }\n        this.config.options.readOnlyIntent = config.options.readOnlyIntent;\n      }\n      if (config.options.requestTimeout !== undefined) {\n        if (typeof config.options.requestTimeout !== 'number') {\n          throw new TypeError('The \"config.options.requestTimeout\" property must be of type number.');\n        }\n        this.config.options.requestTimeout = config.options.requestTimeout;\n      }\n      if (config.options.maxRetriesOnTransientErrors !== undefined) {\n        if (typeof config.options.maxRetriesOnTransientErrors !== 'number') {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be of type number.');\n        }\n        if (config.options.maxRetriesOnTransientErrors < 0) {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be equal or greater than 0.');\n        }\n        this.config.options.maxRetriesOnTransientErrors = config.options.maxRetriesOnTransientErrors;\n      }\n      if (config.options.connectionRetryInterval !== undefined) {\n        if (typeof config.options.connectionRetryInterval !== 'number') {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be of type number.');\n        }\n        if (config.options.connectionRetryInterval <= 0) {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be greater than 0.');\n        }\n        this.config.options.connectionRetryInterval = config.options.connectionRetryInterval;\n      }\n      if (config.options.rowCollectionOnDone !== undefined) {\n        if (typeof config.options.rowCollectionOnDone !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnDone\" property must be of type boolean.');\n        }\n        this.config.options.rowCollectionOnDone = config.options.rowCollectionOnDone;\n      }\n      if (config.options.rowCollectionOnRequestCompletion !== undefined) {\n        if (typeof config.options.rowCollectionOnRequestCompletion !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnRequestCompletion\" property must be of type boolean.');\n        }\n        this.config.options.rowCollectionOnRequestCompletion = config.options.rowCollectionOnRequestCompletion;\n      }\n      if (config.options.tdsVersion !== undefined) {\n        if (typeof config.options.tdsVersion !== 'string') {\n          throw new TypeError('The \"config.options.tdsVersion\" property must be of type string.');\n        }\n        this.config.options.tdsVersion = config.options.tdsVersion;\n      }\n      if (config.options.textsize !== undefined) {\n        if (typeof config.options.textsize !== 'number' && config.options.textsize !== null) {\n          throw new TypeError('The \"config.options.textsize\" property must be of type number or null.');\n        }\n        if (config.options.textsize > 2147483647) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be greater than 2147483647.');\n        } else if (config.options.textsize < -1) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be smaller than -1.');\n        }\n        this.config.options.textsize = config.options.textsize | 0;\n      }\n      if (config.options.trustServerCertificate !== undefined) {\n        if (typeof config.options.trustServerCertificate !== 'boolean') {\n          throw new TypeError('The \"config.options.trustServerCertificate\" property must be of type boolean.');\n        }\n        this.config.options.trustServerCertificate = config.options.trustServerCertificate;\n      }\n      if (config.options.useColumnNames !== undefined) {\n        if (typeof config.options.useColumnNames !== 'boolean') {\n          throw new TypeError('The \"config.options.useColumnNames\" property must be of type boolean.');\n        }\n        this.config.options.useColumnNames = config.options.useColumnNames;\n      }\n      if (config.options.useUTC !== undefined) {\n        if (typeof config.options.useUTC !== 'boolean') {\n          throw new TypeError('The \"config.options.useUTC\" property must be of type boolean.');\n        }\n        this.config.options.useUTC = config.options.useUTC;\n      }\n      if (config.options.workstationId !== undefined) {\n        if (typeof config.options.workstationId !== 'string') {\n          throw new TypeError('The \"config.options.workstationId\" property must be of type string.');\n        }\n        this.config.options.workstationId = config.options.workstationId;\n      }\n      if (config.options.lowerCaseGuids !== undefined) {\n        if (typeof config.options.lowerCaseGuids !== 'boolean') {\n          throw new TypeError('The \"config.options.lowerCaseGuids\" property must be of type boolean.');\n        }\n        this.config.options.lowerCaseGuids = config.options.lowerCaseGuids;\n      }\n    }\n    this.secureContextOptions = this.config.options.cryptoCredentialsDetails;\n    if (this.secureContextOptions.secureOptions === undefined) {\n      // If the caller has not specified their own `secureOptions`,\n      // we set `SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS` here.\n      // Older SQL Server instances running on older Windows versions have\n      // trouble with the BEAST workaround in OpenSSL.\n      // As BEAST is a browser specific exploit, we can just disable this option here.\n      this.secureContextOptions = Object.create(this.secureContextOptions, {\n        secureOptions: {\n          value: _constants.default.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\n        }\n      });\n    }\n    this.debug = this.createDebug();\n    this.inTransaction = false;\n    this.transactionDescriptors = [Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])]; // 'beginTransaction', 'commitTransaction' and 'rollbackTransaction'\n    // events are utilized to maintain inTransaction property state which in\n    // turn is used in managing transactions. These events are only fired for\n    // TDS version 7.2 and beyond. The properties below are used to emulate\n    // equivalent behavior for TDS versions before 7.2.\n\n    this.transactionDepth = 0;\n    this.isSqlBatch = false;\n    this.closed = false;\n    this.messageBuffer = Buffer.alloc(0);\n    this.curTransientRetryCount = 0;\n    this.transientErrorLookup = new _transientErrorLookup.TransientErrorLookup();\n    this.state = this.STATE.INITIALIZED;\n    this._cancelAfterRequestSent = () => {\n      this.messageIo.sendMessage(_packet.TYPE.ATTENTION);\n      this.createCancelTimer();\n    };\n  }\n  connect(connectListener) {\n    if (this.state !== this.STATE.INITIALIZED) {\n      throw new _errors.ConnectionError('`.connect` can not be called on a Connection in `' + this.state.name + '` state.');\n    }\n    if (connectListener) {\n      const onConnect = err => {\n        this.removeListener('error', onError);\n        connectListener(err);\n      };\n      const onError = err => {\n        this.removeListener('connect', onConnect);\n        connectListener(err);\n      };\n      this.once('connect', onConnect);\n      this.once('error', onError);\n    }\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n  /**\n   * The server has reported that the charset has changed.\n   */\n\n  on(event, listener) {\n    return super.on(event, listener);\n  }\n  /**\n   * @private\n   */\n\n  emit(event, ...args) {\n    return super.emit(event, ...args);\n  }\n  /**\n   * Closes the connection to the database.\n   *\n   * The [[Event_end]] will be emitted once the connection has been closed.\n   */\n\n  close() {\n    this.transitionTo(this.STATE.FINAL);\n  }\n  /**\n   * @private\n   */\n\n  initialiseConnection() {\n    const signal = this.createConnectTimer();\n    if (this.config.options.port) {\n      return this.connectOnPort(this.config.options.port, this.config.options.multiSubnetFailover, signal);\n    } else {\n      return (0, _instanceLookup.instanceLookup)({\n        server: this.config.server,\n        instanceName: this.config.options.instanceName,\n        timeout: this.config.options.connectTimeout,\n        signal: signal\n      }).then(port => {\n        process.nextTick(() => {\n          this.connectOnPort(port, this.config.options.multiSubnetFailover, signal);\n        });\n      }, err => {\n        this.clearConnectTimer();\n        if (err.name === 'AbortError') {\n          // Ignore the AbortError for now, this is still handled by the connectTimer firing\n          return;\n        }\n        process.nextTick(() => {\n          this.emit('connect', new _errors.ConnectionError(err.message, 'EINSTLOOKUP'));\n        });\n      });\n    }\n  }\n  /**\n   * @private\n   */\n\n  cleanupConnection(cleanupType) {\n    if (!this.closed) {\n      this.clearConnectTimer();\n      this.clearRequestTimer();\n      this.clearRetryTimer();\n      this.closeConnection();\n      if (cleanupType === CLEANUP_TYPE.REDIRECT) {\n        this.emit('rerouting');\n      } else if (cleanupType !== CLEANUP_TYPE.RETRY) {\n        process.nextTick(() => {\n          this.emit('end');\n        });\n      }\n      const request = this.request;\n      if (request) {\n        const err = new _errors.RequestError('Connection closed before request completed.', 'ECLOSE');\n        request.callback(err);\n        this.request = undefined;\n      }\n      this.closed = true;\n      this.loginError = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n  createDebug() {\n    const debug = new _debug.default(this.config.options.debug);\n    debug.on('debug', message => {\n      this.emit('debug', message);\n    });\n    return debug;\n  }\n  /**\n   * @private\n   */\n\n  createTokenStreamParser(message, handler) {\n    return new _tokenStreamParser.Parser(message, this.debug, handler, this.config.options);\n  }\n  connectOnPort(port, multiSubnetFailover, signal) {\n    const connectOpts = {\n      host: this.routingData ? this.routingData.server : this.config.server,\n      port: this.routingData ? this.routingData.port : port,\n      localAddress: this.config.options.localAddress\n    };\n    const connect = multiSubnetFailover ? _connector.connectInParallel : _connector.connectInSequence;\n    connect(connectOpts, _dns.default.lookup, signal).then(socket => {\n      process.nextTick(() => {\n        socket.on('error', error => {\n          this.socketError(error);\n        });\n        socket.on('close', () => {\n          this.socketClose();\n        });\n        socket.on('end', () => {\n          this.socketEnd();\n        });\n        socket.setKeepAlive(true, KEEP_ALIVE_INITIAL_DELAY);\n        this.messageIo = new _messageIo.default(socket, this.config.options.packetSize, this.debug);\n        this.messageIo.on('secure', cleartext => {\n          this.emit('secure', cleartext);\n        });\n        this.socket = socket;\n        this.closed = false;\n        this.debug.log('connected to ' + this.config.server + ':' + this.config.options.port);\n        this.sendPreLogin();\n        this.transitionTo(this.STATE.SENT_PRELOGIN);\n      });\n    }, err => {\n      this.clearConnectTimer();\n      if (err.name === 'AbortError') {\n        return;\n      }\n      process.nextTick(() => {\n        this.socketError(err);\n      });\n    });\n  }\n  /**\n   * @private\n   */\n\n  closeConnection() {\n    if (this.socket) {\n      this.socket.destroy();\n    }\n  }\n  /**\n   * @private\n   */\n\n  createConnectTimer() {\n    const controller = new _nodeAbortController.AbortController();\n    this.connectTimer = setTimeout(() => {\n      controller.abort();\n      this.connectTimeout();\n    }, this.config.options.connectTimeout);\n    return controller.signal;\n  }\n  /**\n   * @private\n   */\n\n  createCancelTimer() {\n    this.clearCancelTimer();\n    const timeout = this.config.options.cancelTimeout;\n    if (timeout > 0) {\n      this.cancelTimer = setTimeout(() => {\n        this.cancelTimeout();\n      }, timeout);\n    }\n  }\n  /**\n   * @private\n   */\n\n  createRequestTimer() {\n    this.clearRequestTimer(); // release old timer, just to be safe\n\n    const request = this.request;\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n    if (timeout) {\n      this.requestTimer = setTimeout(() => {\n        this.requestTimeout();\n      }, timeout);\n    }\n  }\n  /**\n   * @private\n   */\n\n  createRetryTimer() {\n    this.clearRetryTimer();\n    this.retryTimer = setTimeout(() => {\n      this.retryTimeout();\n    }, this.config.options.connectionRetryInterval);\n  }\n  /**\n   * @private\n   */\n\n  connectTimeout() {\n    const message = `Failed to connect to ${this.config.server}${this.config.options.port ? `:${this.config.options.port}` : `\\\\${this.config.options.instanceName}`} in ${this.config.options.connectTimeout}ms`;\n    this.debug.log(message);\n    this.emit('connect', new _errors.ConnectionError(message, 'ETIMEOUT'));\n    this.connectTimer = undefined;\n    this.dispatchEvent('connectTimeout');\n  }\n  /**\n   * @private\n   */\n\n  cancelTimeout() {\n    const message = `Failed to cancel request in ${this.config.options.cancelTimeout}ms`;\n    this.debug.log(message);\n    this.dispatchEvent('socketError', new _errors.ConnectionError(message, 'ETIMEOUT'));\n  }\n  /**\n   * @private\n   */\n\n  requestTimeout() {\n    this.requestTimer = undefined;\n    const request = this.request;\n    request.cancel();\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n    const message = 'Timeout: Request failed to complete in ' + timeout + 'ms';\n    request.error = new _errors.RequestError(message, 'ETIMEOUT');\n  }\n  /**\n   * @private\n   */\n\n  retryTimeout() {\n    this.retryTimer = undefined;\n    this.emit('retry');\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n  /**\n   * @private\n   */\n\n  clearConnectTimer() {\n    if (this.connectTimer) {\n      clearTimeout(this.connectTimer);\n      this.connectTimer = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n  clearCancelTimer() {\n    if (this.cancelTimer) {\n      clearTimeout(this.cancelTimer);\n      this.cancelTimer = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n  clearRequestTimer() {\n    if (this.requestTimer) {\n      clearTimeout(this.requestTimer);\n      this.requestTimer = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n  clearRetryTimer() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n      this.retryTimer = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n  transitionTo(newState) {\n    if (this.state === newState) {\n      this.debug.log('State is already ' + newState.name);\n      return;\n    }\n    if (this.state && this.state.exit) {\n      this.state.exit.call(this, newState);\n    }\n    this.debug.log('State change: ' + (this.state ? this.state.name : 'undefined') + ' -> ' + newState.name);\n    this.state = newState;\n    if (this.state.enter) {\n      this.state.enter.apply(this);\n    }\n  }\n  /**\n   * @private\n   */\n\n  getEventHandler(eventName) {\n    const handler = this.state.events[eventName];\n    if (!handler) {\n      throw new Error(`No event '${eventName}' in state '${this.state.name}'`);\n    }\n    return handler;\n  }\n  /**\n   * @private\n   */\n\n  dispatchEvent(eventName, ...args) {\n    const handler = this.state.events[eventName];\n    if (handler) {\n      handler.apply(this, args);\n    } else {\n      this.emit('error', new Error(`No event '${eventName}' in state '${this.state.name}'`));\n      this.close();\n    }\n  }\n  /**\n   * @private\n   */\n\n  socketError(error) {\n    if (this.state === this.STATE.CONNECTING || this.state === this.STATE.SENT_TLSSSLNEGOTIATION) {\n      const message = `Failed to connect to ${this.config.server}:${this.config.options.port} - ${error.message}`;\n      this.debug.log(message);\n      this.emit('connect', new _errors.ConnectionError(message, 'ESOCKET'));\n    } else {\n      const message = `Connection lost - ${error.message}`;\n      this.debug.log(message);\n      this.emit('error', new _errors.ConnectionError(message, 'ESOCKET'));\n    }\n    this.dispatchEvent('socketError', error);\n  }\n  /**\n   * @private\n   */\n\n  socketEnd() {\n    this.debug.log('socket ended');\n    if (this.state !== this.STATE.FINAL) {\n      const error = new Error('socket hang up');\n      error.code = 'ECONNRESET';\n      this.socketError(error);\n    }\n  }\n  /**\n   * @private\n   */\n\n  socketClose() {\n    this.debug.log('connection to ' + this.config.server + ':' + this.config.options.port + ' closed');\n    if (this.state === this.STATE.REROUTING) {\n      this.debug.log('Rerouting to ' + this.routingData.server + ':' + this.routingData.port);\n      this.dispatchEvent('reconnect');\n    } else if (this.state === this.STATE.TRANSIENT_FAILURE_RETRY) {\n      const server = this.routingData ? this.routingData.server : this.config.server;\n      const port = this.routingData ? this.routingData.port : this.config.options.port;\n      this.debug.log('Retry after transient failure connecting to ' + server + ':' + port);\n      this.dispatchEvent('retry');\n    } else {\n      this.transitionTo(this.STATE.FINAL);\n    }\n  }\n  /**\n   * @private\n   */\n\n  sendPreLogin() {\n    const [, major, minor, build] = /^(\\d+)\\.(\\d+)\\.(\\d+)/.exec(_package.version) ?? ['0.0.0', '0', '0', '0'];\n    const payload = new _preloginPayload.default({\n      encrypt: this.config.options.encrypt,\n      version: {\n        major: Number(major),\n        minor: Number(minor),\n        build: Number(build),\n        subbuild: 0\n      }\n    });\n    this.messageIo.sendMessage(_packet.TYPE.PRELOGIN, payload.data);\n    this.debug.payload(function () {\n      return payload.toString('  ');\n    });\n  }\n  /**\n   * @private\n   */\n\n  sendLogin7Packet() {\n    const payload = new _login7Payload.default({\n      tdsVersion: _tdsVersions.versions[this.config.options.tdsVersion],\n      packetSize: this.config.options.packetSize,\n      clientProgVer: 0,\n      clientPid: process.pid,\n      connectionId: 0,\n      clientTimeZone: new Date().getTimezoneOffset(),\n      clientLcid: 0x00000409\n    });\n    const {\n      authentication\n    } = this.config;\n    switch (authentication.type) {\n      case 'azure-active-directory-password':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'default'\n        };\n        break;\n      case 'azure-active-directory-access-token':\n        payload.fedAuth = {\n          type: 'SECURITYTOKEN',\n          echo: this.fedAuthRequired,\n          fedAuthToken: authentication.options.token\n        };\n        break;\n      case 'azure-active-directory-msi-vm':\n      case 'azure-active-directory-default':\n      case 'azure-active-directory-msi-app-service':\n      case 'azure-active-directory-service-principal-secret':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'integrated'\n        };\n        break;\n      case 'ntlm':\n        payload.sspi = (0, _ntlm.createNTLMRequest)({\n          domain: authentication.options.domain\n        });\n        break;\n      default:\n        payload.userName = authentication.options.userName;\n        payload.password = authentication.options.password;\n    }\n    payload.hostname = this.config.options.workstationId || _os.default.hostname();\n    payload.serverName = this.routingData ? this.routingData.server : this.config.server;\n    payload.appName = this.config.options.appName || 'Tedious';\n    payload.libraryName = _library.name;\n    payload.language = this.config.options.language;\n    payload.database = this.config.options.database;\n    payload.clientId = Buffer.from([1, 2, 3, 4, 5, 6]);\n    payload.readOnlyIntent = this.config.options.readOnlyIntent;\n    payload.initDbFatal = !this.config.options.fallbackToDefaultDb;\n    this.routingData = undefined;\n    this.messageIo.sendMessage(_packet.TYPE.LOGIN7, payload.toBuffer());\n    this.debug.payload(function () {\n      return payload.toString('  ');\n    });\n  }\n  /**\n   * @private\n   */\n\n  sendFedAuthTokenMessage(token) {\n    const accessTokenLen = Buffer.byteLength(token, 'ucs2');\n    const data = Buffer.alloc(8 + accessTokenLen);\n    let offset = 0;\n    offset = data.writeUInt32LE(accessTokenLen + 4, offset);\n    offset = data.writeUInt32LE(accessTokenLen, offset);\n    data.write(token, offset, 'ucs2');\n    this.messageIo.sendMessage(_packet.TYPE.FEDAUTH_TOKEN, data); // sent the fedAuth token message, the rest is similar to standard login 7\n\n    this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n  }\n  /**\n   * @private\n   */\n\n  sendInitialSql() {\n    const payload = new _sqlbatchPayload.default(this.getInitialSql(), this.currentTransactionDescriptor(), this.config.options);\n    const message = new _message.default({\n      type: _packet.TYPE.SQL_BATCH\n    });\n    this.messageIo.outgoingMessageStream.write(message);\n    _stream.Readable.from(payload).pipe(message);\n  }\n  /**\n   * @private\n   */\n\n  getInitialSql() {\n    const options = [];\n    if (this.config.options.enableAnsiNull === true) {\n      options.push('set ansi_nulls on');\n    } else if (this.config.options.enableAnsiNull === false) {\n      options.push('set ansi_nulls off');\n    }\n    if (this.config.options.enableAnsiNullDefault === true) {\n      options.push('set ansi_null_dflt_on on');\n    } else if (this.config.options.enableAnsiNullDefault === false) {\n      options.push('set ansi_null_dflt_on off');\n    }\n    if (this.config.options.enableAnsiPadding === true) {\n      options.push('set ansi_padding on');\n    } else if (this.config.options.enableAnsiPadding === false) {\n      options.push('set ansi_padding off');\n    }\n    if (this.config.options.enableAnsiWarnings === true) {\n      options.push('set ansi_warnings on');\n    } else if (this.config.options.enableAnsiWarnings === false) {\n      options.push('set ansi_warnings off');\n    }\n    if (this.config.options.enableArithAbort === true) {\n      options.push('set arithabort on');\n    } else if (this.config.options.enableArithAbort === false) {\n      options.push('set arithabort off');\n    }\n    if (this.config.options.enableConcatNullYieldsNull === true) {\n      options.push('set concat_null_yields_null on');\n    } else if (this.config.options.enableConcatNullYieldsNull === false) {\n      options.push('set concat_null_yields_null off');\n    }\n    if (this.config.options.enableCursorCloseOnCommit === true) {\n      options.push('set cursor_close_on_commit on');\n    } else if (this.config.options.enableCursorCloseOnCommit === false) {\n      options.push('set cursor_close_on_commit off');\n    }\n    if (this.config.options.datefirst !== null) {\n      options.push(`set datefirst ${this.config.options.datefirst}`);\n    }\n    if (this.config.options.dateFormat !== null) {\n      options.push(`set dateformat ${this.config.options.dateFormat}`);\n    }\n    if (this.config.options.enableImplicitTransactions === true) {\n      options.push('set implicit_transactions on');\n    } else if (this.config.options.enableImplicitTransactions === false) {\n      options.push('set implicit_transactions off');\n    }\n    if (this.config.options.language !== null) {\n      options.push(`set language ${this.config.options.language}`);\n    }\n    if (this.config.options.enableNumericRoundabort === true) {\n      options.push('set numeric_roundabort on');\n    } else if (this.config.options.enableNumericRoundabort === false) {\n      options.push('set numeric_roundabort off');\n    }\n    if (this.config.options.enableQuotedIdentifier === true) {\n      options.push('set quoted_identifier on');\n    } else if (this.config.options.enableQuotedIdentifier === false) {\n      options.push('set quoted_identifier off');\n    }\n    if (this.config.options.textsize !== null) {\n      options.push(`set textsize ${this.config.options.textsize}`);\n    }\n    if (this.config.options.connectionIsolationLevel !== null) {\n      options.push(`set transaction isolation level ${this.getIsolationLevelText(this.config.options.connectionIsolationLevel)}`);\n    }\n    if (this.config.options.abortTransactionOnError === true) {\n      options.push('set xact_abort on');\n    } else if (this.config.options.abortTransactionOnError === false) {\n      options.push('set xact_abort off');\n    }\n    return options.join('\\n');\n  }\n  /**\n   * @private\n   */\n\n  processedInitialSql() {\n    this.clearConnectTimer();\n    this.emit('connect');\n  }\n  /**\n   * Execute the SQL batch represented by [[Request]].\n   * There is no param support, and unlike [[Request.execSql]],\n   * it is not likely that SQL Server will reuse the execution plan it generates for the SQL.\n   *\n   * In almost all cases, [[Request.execSql]] will be a better choice.\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n\n  execSqlBatch(request) {\n    this.makeRequest(request, _packet.TYPE.SQL_BATCH, new _sqlbatchPayload.default(request.sqlTextOrProcedure, this.currentTransactionDescriptor(), this.config.options));\n  }\n  /**\n   *  Execute the SQL represented by [[Request]].\n   *\n   * As `sp_executesql` is used to execute the SQL, if the same SQL is executed multiples times\n   * using this function, the SQL Server query optimizer is likely to reuse the execution plan it generates\n   * for the first execution. This may also result in SQL server treating the request like a stored procedure\n   * which can result in the [[Event_doneInProc]] or [[Event_doneProc]] events being emitted instead of the\n   * [[Event_done]] event you might expect. Using [[execSqlBatch]] will prevent this from occurring but may have a negative performance impact.\n   *\n   * Beware of the way that scoping rules apply, and how they may [affect local temp tables](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)\n   * If you're running in to scoping issues, then [[execSqlBatch]] may be a better choice.\n   * See also [issue #24](https://github.com/pekim/tedious/issues/24)\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n\n  execSql(request) {\n    try {\n      request.validateParameters(this.databaseCollation);\n    } catch (error) {\n      request.error = error;\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n    const parameters = [];\n    parameters.push({\n      type: _dataType.TYPES.NVarChar,\n      name: 'statement',\n      value: request.sqlTextOrProcedure,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    if (request.parameters.length) {\n      parameters.push({\n        type: _dataType.TYPES.NVarChar,\n        name: 'params',\n        value: request.makeParamsParameter(request.parameters),\n        output: false,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n      parameters.push(...request.parameters);\n    }\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_executesql', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n  /**\n   * Creates a new BulkLoad instance.\n   *\n   * @param table The name of the table to bulk-insert into.\n   * @param options A set of bulk load options.\n   */\n\n  newBulkLoad(table, callbackOrOptions, callback) {\n    let options;\n    if (callback === undefined) {\n      callback = callbackOrOptions;\n      options = {};\n    } else {\n      options = callbackOrOptions;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('\"options\" argument must be an object');\n    }\n    return new _bulkLoad.default(table, this.databaseCollation, this.config.options, options, callback);\n  }\n  /**\n   * Execute a [[BulkLoad]].\n   *\n   * ```js\n   * // We want to perform a bulk load into a table with the following format:\n   * // CREATE TABLE employees (first_name nvarchar(255), last_name nvarchar(255), day_of_birth date);\n   *\n   * const bulkLoad = connection.newBulkLoad('employees', (err, rowCount) => {\n   *   // ...\n   * });\n   *\n   * // First, we need to specify the columns that we want to write to,\n   * // and their definitions. These definitions must match the actual table,\n   * // otherwise the bulk load will fail.\n   * bulkLoad.addColumn('first_name', TYPES.NVarchar, { nullable: false });\n   * bulkLoad.addColumn('last_name', TYPES.NVarchar, { nullable: false });\n   * bulkLoad.addColumn('date_of_birth', TYPES.Date, { nullable: false });\n   *\n   * // Execute a bulk load with a predefined list of rows.\n   * //\n   * // Note that these rows are held in memory until the\n   * // bulk load was performed, so if you need to write a large\n   * // number of rows (e.g. by reading from a CSV file),\n   * // passing an `AsyncIterable` is advisable to keep memory usage low.\n   * connection.execBulkLoad(bulkLoad, [\n   *   { 'first_name': 'Steve', 'last_name': 'Jobs', 'day_of_birth': new Date('02-24-1955') },\n   *   { 'first_name': 'Bill', 'last_name': 'Gates', 'day_of_birth': new Date('10-28-1955') }\n   * ]);\n   * ```\n   *\n   * @param bulkLoad A previously created [[BulkLoad]].\n   * @param rows A [[Iterable]] or [[AsyncIterable]] that contains the rows that should be bulk loaded.\n   */\n\n  execBulkLoad(bulkLoad, rows) {\n    bulkLoad.executionStarted = true;\n    if (rows) {\n      if (bulkLoad.streamingMode) {\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that was put in streaming mode.\");\n      }\n      if (bulkLoad.firstRowWritten) {\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that already has rows written to it.\");\n      }\n      const rowStream = _stream.Readable.from(rows); // Destroy the packet transform if an error happens in the row stream,\n      // e.g. if an error is thrown from within a generator or stream.\n\n      rowStream.on('error', err => {\n        bulkLoad.rowToPacketTransform.destroy(err);\n      }); // Destroy the row stream if an error happens in the packet transform,\n      // e.g. if the bulk load is cancelled.\n\n      bulkLoad.rowToPacketTransform.on('error', err => {\n        rowStream.destroy(err);\n      });\n      rowStream.pipe(bulkLoad.rowToPacketTransform);\n    } else if (!bulkLoad.streamingMode) {\n      // If the bulkload was not put into streaming mode by the user,\n      // we end the rowToPacketTransform here for them.\n      //\n      // If it was put into streaming mode, it's the user's responsibility\n      // to end the stream.\n      bulkLoad.rowToPacketTransform.end();\n    }\n    const onCancel = () => {\n      request.cancel();\n    };\n    const payload = new _bulkLoadPayload.BulkLoadPayload(bulkLoad);\n    const request = new _request.default(bulkLoad.getBulkInsertSql(), error => {\n      bulkLoad.removeListener('cancel', onCancel);\n      if (error) {\n        if (error.code === 'UNKNOWN') {\n          error.message += ' This is likely because the schema of the BulkLoad does not match the schema of the table you are attempting to insert into.';\n        }\n        bulkLoad.error = error;\n        bulkLoad.callback(error);\n        return;\n      }\n      this.makeRequest(bulkLoad, _packet.TYPE.BULK_LOAD, payload);\n    });\n    bulkLoad.once('cancel', onCancel);\n    this.execSqlBatch(request);\n  }\n  /**\n   * Prepare the SQL represented by the request.\n   *\n   * The request can then be used in subsequent calls to\n   * [[execute]] and [[unprepare]]\n   *\n   * @param request A [[Request]] object representing the request.\n   *   Parameters only require a name and type. Parameter values are ignored.\n   */\n\n  prepare(request) {\n    const parameters = [];\n    parameters.push({\n      type: _dataType.TYPES.Int,\n      name: 'handle',\n      value: undefined,\n      output: true,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    parameters.push({\n      type: _dataType.TYPES.NVarChar,\n      name: 'params',\n      value: request.parameters.length ? request.makeParamsParameter(request.parameters) : null,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    parameters.push({\n      type: _dataType.TYPES.NVarChar,\n      name: 'stmt',\n      value: request.sqlTextOrProcedure,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    request.preparing = true; // TODO: We need to clean up this event handler, otherwise this leaks memory\n\n    request.on('returnValue', (name, value) => {\n      if (name === 'handle') {\n        request.handle = value;\n      } else {\n        request.error = new _errors.RequestError(`Tedious > Unexpected output parameter ${name} from sp_prepare`);\n      }\n    });\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_prepare', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n  /**\n   * Release the SQL Server resources associated with a previously prepared request.\n   *\n   * @param request A [[Request]] object representing the request.\n   *   Parameters only require a name and type.\n   *   Parameter values are ignored.\n   */\n\n  unprepare(request) {\n    const parameters = [];\n    parameters.push({\n      type: _dataType.TYPES.Int,\n      name: 'handle',\n      // TODO: Abort if `request.handle` is not set\n      value: request.handle,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_unprepare', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n  /**\n   * Execute previously prepared SQL, using the supplied parameters.\n   *\n   * @param request A previously prepared [[Request]].\n   * @param parameters  An object whose names correspond to the names of\n   *   parameters that were added to the [[Request]] before it was prepared.\n   *   The object's values are passed as the parameters' values when the\n   *   request is executed.\n   */\n\n  execute(request, parameters) {\n    const executeParameters = [];\n    executeParameters.push({\n      type: _dataType.TYPES.Int,\n      name: 'handle',\n      // TODO: Abort if `request.handle` is not set\n      value: request.handle,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    try {\n      for (let i = 0, len = request.parameters.length; i < len; i++) {\n        const parameter = request.parameters[i];\n        executeParameters.push({\n          ...parameter,\n          value: parameter.type.validate(parameters ? parameters[parameter.name] : null, this.databaseCollation)\n        });\n      }\n    } catch (error) {\n      request.error = error;\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_execute', executeParameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n  /**\n   * Call a stored procedure represented by [[Request]].\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n\n  callProcedure(request) {\n    try {\n      request.validateParameters(this.databaseCollation);\n    } catch (error) {\n      request.error = error;\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request.sqlTextOrProcedure, request.parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n  /**\n   * Start a transaction.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`\n   *   is present.\n   * @param isolationLevel The isolation level that the transaction is to be run with.\n   *\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   *   * `READ_UNCOMMITTED`\n   *   * `READ_COMMITTED`\n   *   * `REPEATABLE_READ`\n   *   * `SERIALIZABLE`\n   *   * `SNAPSHOT`\n   *\n   *   Optional, and defaults to the Connection's isolation level.\n   */\n\n  beginTransaction(callback, name = '', isolationLevel = this.config.options.isolationLevel) {\n    (0, _transaction.assertValidIsolationLevel)(isolationLevel, 'isolationLevel');\n    const transaction = new _transaction.Transaction(name, isolationLevel);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('SET TRANSACTION ISOLATION LEVEL ' + transaction.isolationLevelToTSQL() + ';BEGIN TRAN ' + transaction.name, err => {\n        this.transactionDepth++;\n        if (this.transactionDepth === 1) {\n          this.inTransaction = true;\n        }\n        callback(err);\n      }));\n    }\n    const request = new _request.default(undefined, err => {\n      return callback(err, this.currentTransactionDescriptor());\n    });\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.beginPayload(this.currentTransactionDescriptor()));\n  }\n  /**\n   * Commit a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`is present.\n   */\n\n  commitTransaction(callback, name = '') {\n    const transaction = new _transaction.Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('COMMIT TRAN ' + transaction.name, err => {\n        this.transactionDepth--;\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n        callback(err);\n      }));\n    }\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.commitPayload(this.currentTransactionDescriptor()));\n  }\n  /**\n   * Rollback a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string.\n   *   Required when `isolationLevel` is present.\n   */\n\n  rollbackTransaction(callback, name = '') {\n    const transaction = new _transaction.Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('ROLLBACK TRAN ' + transaction.name, err => {\n        this.transactionDepth--;\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n        callback(err);\n      }));\n    }\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.rollbackPayload(this.currentTransactionDescriptor()));\n  }\n  /**\n   * Set a savepoint within a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\\\n   *   Optional, and defaults to an empty string.\n   *   Required when `isolationLevel` is present.\n   */\n\n  saveTransaction(callback, name) {\n    const transaction = new _transaction.Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('SAVE TRAN ' + transaction.name, err => {\n        this.transactionDepth++;\n        callback(err);\n      }));\n    }\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.savePayload(this.currentTransactionDescriptor()));\n  }\n  /**\n   * Run the given callback after starting a transaction, and commit or\n   * rollback the transaction afterwards.\n   *\n   * This is a helper that employs [[beginTransaction]], [[commitTransaction]],\n   * [[rollbackTransaction]], and [[saveTransaction]] to greatly simplify the\n   * use of database transactions and automatically handle transaction nesting.\n   *\n   * @param cb\n   * @param isolationLevel\n   *   The isolation level that the transaction is to be run with.\n   *\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   *   * `READ_UNCOMMITTED`\n   *   * `READ_COMMITTED`\n   *   * `REPEATABLE_READ`\n   *   * `SERIALIZABLE`\n   *   * `SNAPSHOT`\n   *\n   *   Optional, and defaults to the Connection's isolation level.\n   */\n\n  transaction(cb, isolationLevel) {\n    if (typeof cb !== 'function') {\n      throw new TypeError('`cb` must be a function');\n    }\n    const useSavepoint = this.inTransaction;\n    const name = '_tedious_' + _crypto.default.randomBytes(10).toString('hex');\n    const txDone = (err, done, ...args) => {\n      if (err) {\n        if (this.inTransaction && this.state === this.STATE.LOGGED_IN) {\n          this.rollbackTransaction(txErr => {\n            done(txErr || err, ...args);\n          }, name);\n        } else {\n          done(err, ...args);\n        }\n      } else if (useSavepoint) {\n        if (this.config.options.tdsVersion < '7_2') {\n          this.transactionDepth--;\n        }\n        done(null, ...args);\n      } else {\n        this.commitTransaction(txErr => {\n          done(txErr, ...args);\n        }, name);\n      }\n    };\n    if (useSavepoint) {\n      return this.saveTransaction(err => {\n        if (err) {\n          return cb(err);\n        }\n        if (isolationLevel) {\n          return this.execSqlBatch(new _request.default('SET transaction isolation level ' + this.getIsolationLevelText(isolationLevel), err => {\n            return cb(err, txDone);\n          }));\n        } else {\n          return cb(null, txDone);\n        }\n      }, name);\n    } else {\n      return this.beginTransaction(err => {\n        if (err) {\n          return cb(err);\n        }\n        return cb(null, txDone);\n      }, name, isolationLevel);\n    }\n  }\n  /**\n   * @private\n   */\n\n  makeRequest(request, packetType, payload) {\n    if (this.state !== this.STATE.LOGGED_IN) {\n      const message = 'Requests can only be made in the ' + this.STATE.LOGGED_IN.name + ' state, not the ' + this.state.name + ' state';\n      this.debug.log(message);\n      request.callback(new _errors.RequestError(message, 'EINVALIDSTATE'));\n    } else if (request.canceled) {\n      process.nextTick(() => {\n        request.callback(new _errors.RequestError('Canceled.', 'ECANCEL'));\n      });\n    } else {\n      if (packetType === _packet.TYPE.SQL_BATCH) {\n        this.isSqlBatch = true;\n      } else {\n        this.isSqlBatch = false;\n      }\n      this.request = request;\n      request.connection = this;\n      request.rowCount = 0;\n      request.rows = [];\n      request.rst = [];\n      const onCancel = () => {\n        payloadStream.unpipe(message);\n        payloadStream.destroy(new _errors.RequestError('Canceled.', 'ECANCEL')); // set the ignore bit and end the message.\n\n        message.ignore = true;\n        message.end();\n        if (request instanceof _request.default && request.paused) {\n          // resume the request if it was paused so we can read the remaining tokens\n          request.resume();\n        }\n      };\n      request.once('cancel', onCancel);\n      this.createRequestTimer();\n      const message = new _message.default({\n        type: packetType,\n        resetConnection: this.resetConnectionOnNextRequest\n      });\n      this.messageIo.outgoingMessageStream.write(message);\n      this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n      message.once('finish', () => {\n        request.removeListener('cancel', onCancel);\n        request.once('cancel', this._cancelAfterRequestSent);\n        this.resetConnectionOnNextRequest = false;\n        this.debug.payload(function () {\n          return payload.toString('  ');\n        });\n      });\n      const payloadStream = _stream.Readable.from(payload);\n      payloadStream.once('error', error => {\n        payloadStream.unpipe(message); // Only set a request error if no error was set yet.\n\n        request.error ?? (request.error = error);\n        message.ignore = true;\n        message.end();\n      });\n      payloadStream.pipe(message);\n    }\n  }\n  /**\n   * Cancel currently executed request.\n   */\n\n  cancel() {\n    if (!this.request) {\n      return false;\n    }\n    if (this.request.canceled) {\n      return false;\n    }\n    this.request.cancel();\n    return true;\n  }\n  /**\n   * Reset the connection to its initial state.\n   * Can be useful for connection pool implementations.\n   *\n   * @param callback\n   */\n\n  reset(callback) {\n    const request = new _request.default(this.getInitialSql(), err => {\n      if (this.config.options.tdsVersion < '7_2') {\n        this.inTransaction = false;\n      }\n      callback(err);\n    });\n    this.resetConnectionOnNextRequest = true;\n    this.execSqlBatch(request);\n  }\n  /**\n   * @private\n   */\n\n  currentTransactionDescriptor() {\n    return this.transactionDescriptors[this.transactionDescriptors.length - 1];\n  }\n  /**\n   * @private\n   */\n\n  getIsolationLevelText(isolationLevel) {\n    switch (isolationLevel) {\n      case _transaction.ISOLATION_LEVEL.READ_UNCOMMITTED:\n        return 'read uncommitted';\n      case _transaction.ISOLATION_LEVEL.REPEATABLE_READ:\n        return 'repeatable read';\n      case _transaction.ISOLATION_LEVEL.SERIALIZABLE:\n        return 'serializable';\n      case _transaction.ISOLATION_LEVEL.SNAPSHOT:\n        return 'snapshot';\n      default:\n        return 'read committed';\n    }\n  }\n}\nfunction isTransientError(error) {\n  if (error instanceof _esAggregateError.default) {\n    error = error.errors[0];\n  }\n  return error instanceof _errors.ConnectionError && !!error.isTransient;\n}\nvar _default = Connection;\nexports.default = _default;\nmodule.exports = Connection;\nConnection.prototype.STATE = {\n  INITIALIZED: {\n    name: 'Initialized',\n    events: {}\n  },\n  CONNECTING: {\n    name: 'Connecting',\n    enter: function () {\n      this.initialiseConnection();\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_PRELOGIN: {\n    name: 'SentPrelogin',\n    enter: function () {\n      (async () => {\n        let messageBuffer = Buffer.alloc(0);\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err) {\n          return this.socketError(err);\n        }\n        for await (const data of message) {\n          messageBuffer = Buffer.concat([messageBuffer, data]);\n        }\n        const preloginPayload = new _preloginPayload.default(messageBuffer);\n        this.debug.payload(function () {\n          return preloginPayload.toString('  ');\n        });\n        if (preloginPayload.fedAuthRequired === 1) {\n          this.fedAuthRequired = true;\n        }\n        if (preloginPayload.encryptionString === 'ON' || preloginPayload.encryptionString === 'REQ') {\n          if (!this.config.options.encrypt) {\n            this.emit('connect', new _errors.ConnectionError(\"Server requires encryption, set 'encrypt' config option to true.\", 'EENCRYPT'));\n            return this.close();\n          }\n          try {\n            var _this$routingData;\n            this.transitionTo(this.STATE.SENT_TLSSSLNEGOTIATION);\n            await this.messageIo.startTls(this.secureContextOptions, ((_this$routingData = this.routingData) === null || _this$routingData === void 0 ? void 0 : _this$routingData.server) ?? this.config.server, this.config.options.trustServerCertificate);\n          } catch (err) {\n            return this.socketError(err);\n          }\n        }\n        this.sendLogin7Packet();\n        const {\n          authentication\n        } = this.config;\n        switch (authentication.type) {\n          case 'azure-active-directory-password':\n          case 'azure-active-directory-msi-vm':\n          case 'azure-active-directory-msi-app-service':\n          case 'azure-active-directory-service-principal-secret':\n          case 'azure-active-directory-default':\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_FEDAUTH);\n            break;\n          case 'ntlm':\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\n            break;\n          default:\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n            break;\n        }\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  REROUTING: {\n    name: 'ReRouting',\n    enter: function () {\n      this.cleanupConnection(CLEANUP_TYPE.REDIRECT);\n    },\n    events: {\n      message: function () {},\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      reconnect: function () {\n        this.transitionTo(this.STATE.CONNECTING);\n      }\n    }\n  },\n  TRANSIENT_FAILURE_RETRY: {\n    name: 'TRANSIENT_FAILURE_RETRY',\n    enter: function () {\n      this.curTransientRetryCount++;\n      this.cleanupConnection(CLEANUP_TYPE.RETRY);\n    },\n    events: {\n      message: function () {},\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      retry: function () {\n        this.createRetryTimer();\n      }\n    }\n  },\n  SENT_TLSSSLNEGOTIATION: {\n    name: 'SentTLSSSLNegotiation',\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_STANDARD_LOGIN: {\n    name: 'SentLogin7WithStandardLogin',\n    enter: function () {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err) {\n          return this.socketError(err);\n        }\n        const handler = new _handler.Login7TokenHandler(this);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n        await (0, _events.once)(tokenStreamParser, 'end');\n        if (handler.loginAckReceived) {\n          if (handler.routingData) {\n            this.routingData = handler.routingData;\n            this.transitionTo(this.STATE.REROUTING);\n          } else {\n            this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n          }\n        } else if (this.loginError) {\n          if (isTransientError(this.loginError)) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', new _errors.ConnectionError('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_NTLM: {\n    name: 'SentLogin7WithNTLMLogin',\n    enter: function () {\n      (async () => {\n        while (true) {\n          let message;\n          try {\n            message = await this.messageIo.readMessage();\n          } catch (err) {\n            return this.socketError(err);\n          }\n          const handler = new _handler.Login7TokenHandler(this);\n          const tokenStreamParser = this.createTokenStreamParser(message, handler);\n          await (0, _events.once)(tokenStreamParser, 'end');\n          if (handler.loginAckReceived) {\n            if (handler.routingData) {\n              this.routingData = handler.routingData;\n              return this.transitionTo(this.STATE.REROUTING);\n            } else {\n              return this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n            }\n          } else if (this.ntlmpacket) {\n            const authentication = this.config.authentication;\n            const payload = new _ntlmPayload.default({\n              domain: authentication.options.domain,\n              userName: authentication.options.userName,\n              password: authentication.options.password,\n              ntlmpacket: this.ntlmpacket\n            });\n            this.messageIo.sendMessage(_packet.TYPE.NTLMAUTH_PKT, payload.data);\n            this.debug.payload(function () {\n              return payload.toString('  ');\n            });\n            this.ntlmpacket = undefined;\n          } else if (this.loginError) {\n            if (isTransientError(this.loginError)) {\n              this.debug.log('Initiating retry on transient error');\n              return this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n            } else {\n              this.emit('connect', this.loginError);\n              return this.transitionTo(this.STATE.FINAL);\n            }\n          } else {\n            this.emit('connect', new _errors.ConnectionError('Login failed.', 'ELOGIN'));\n            return this.transitionTo(this.STATE.FINAL);\n          }\n        }\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_FEDAUTH: {\n    name: 'SentLogin7Withfedauth',\n    enter: function () {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err) {\n          return this.socketError(err);\n        }\n        const handler = new _handler.Login7TokenHandler(this);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n        await (0, _events.once)(tokenStreamParser, 'end');\n        if (handler.loginAckReceived) {\n          if (handler.routingData) {\n            this.routingData = handler.routingData;\n            this.transitionTo(this.STATE.REROUTING);\n          } else {\n            this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n          }\n          return;\n        }\n        const fedAuthInfoToken = handler.fedAuthInfoToken;\n        if (fedAuthInfoToken && fedAuthInfoToken.stsurl && fedAuthInfoToken.spn) {\n          const authentication = this.config.authentication;\n          const tokenScope = new _url.URL('/.default', fedAuthInfoToken.spn).toString();\n          let credentials;\n          switch (authentication.type) {\n            case 'azure-active-directory-password':\n              credentials = new _identity.UsernamePasswordCredential(authentication.options.tenantId ?? 'common', authentication.options.clientId, authentication.options.userName, authentication.options.password);\n              break;\n            case 'azure-active-directory-msi-vm':\n            case 'azure-active-directory-msi-app-service':\n              const msiArgs = authentication.options.clientId ? [authentication.options.clientId, {}] : [{}];\n              credentials = new _identity.ManagedIdentityCredential(...msiArgs);\n              break;\n            case 'azure-active-directory-default':\n              const args = authentication.options.clientId ? {\n                managedIdentityClientId: authentication.options.clientId\n              } : {};\n              credentials = new _identity.DefaultAzureCredential(args);\n              break;\n            case 'azure-active-directory-service-principal-secret':\n              credentials = new _identity.ClientSecretCredential(authentication.options.tenantId, authentication.options.clientId, authentication.options.clientSecret);\n              break;\n          }\n          let tokenResponse;\n          try {\n            tokenResponse = await credentials.getToken(tokenScope);\n          } catch (err) {\n            this.loginError = new _esAggregateError.default([new _errors.ConnectionError('Security token could not be authenticated or authorized.', 'EFEDAUTH'), err]);\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n            return;\n          }\n          const token = tokenResponse.token;\n          this.sendFedAuthTokenMessage(token);\n        } else if (this.loginError) {\n          if (isTransientError(this.loginError)) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', new _errors.ConnectionError('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  LOGGED_IN_SENDING_INITIAL_SQL: {\n    name: 'LoggedInSendingInitialSql',\n    enter: function () {\n      (async () => {\n        this.sendInitialSql();\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err) {\n          return this.socketError(err);\n        }\n        const tokenStreamParser = this.createTokenStreamParser(message, new _handler.InitialSqlTokenHandler(this));\n        await (0, _events.once)(tokenStreamParser, 'end');\n        this.transitionTo(this.STATE.LOGGED_IN);\n        this.processedInitialSql();\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  LOGGED_IN: {\n    name: 'LoggedIn',\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_CLIENT_REQUEST: {\n    name: 'SentClientRequest',\n    enter: function () {\n      (async () => {\n        var _this$request, _this$request3, _this$request10;\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err) {\n          return this.socketError(err);\n        } // request timer is stopped on first data package\n\n        this.clearRequestTimer();\n        const tokenStreamParser = this.createTokenStreamParser(message, new _handler.RequestTokenHandler(this, this.request)); // If the request was canceled and we have a `cancelTimer`\n        // defined, we send a attention message after the\n        // request message was fully sent off.\n        //\n        // We already started consuming the current message\n        // (but all the token handlers should be no-ops), and\n        // need to ensure the next message is handled by the\n        // `SENT_ATTENTION` state.\n\n        if ((_this$request = this.request) !== null && _this$request !== void 0 && _this$request.canceled && this.cancelTimer) {\n          return this.transitionTo(this.STATE.SENT_ATTENTION);\n        }\n        const onResume = () => {\n          tokenStreamParser.resume();\n        };\n        const onPause = () => {\n          var _this$request2;\n          tokenStreamParser.pause();\n          (_this$request2 = this.request) === null || _this$request2 === void 0 ? void 0 : _this$request2.once('resume', onResume);\n        };\n        (_this$request3 = this.request) === null || _this$request3 === void 0 ? void 0 : _this$request3.on('pause', onPause);\n        if (this.request instanceof _request.default && this.request.paused) {\n          onPause();\n        }\n        const onCancel = () => {\n          var _this$request4, _this$request5;\n          tokenStreamParser.removeListener('end', onEndOfMessage);\n          if (this.request instanceof _request.default && this.request.paused) {\n            // resume the request if it was paused so we can read the remaining tokens\n            this.request.resume();\n          }\n          (_this$request4 = this.request) === null || _this$request4 === void 0 ? void 0 : _this$request4.removeListener('pause', onPause);\n          (_this$request5 = this.request) === null || _this$request5 === void 0 ? void 0 : _this$request5.removeListener('resume', onResume); // The `_cancelAfterRequestSent` callback will have sent a\n          // attention message, so now we need to also switch to\n          // the `SENT_ATTENTION` state to make sure the attention ack\n          // message is processed correctly.\n\n          this.transitionTo(this.STATE.SENT_ATTENTION);\n        };\n        const onEndOfMessage = () => {\n          var _this$request6, _this$request7, _this$request8, _this$request9;\n          (_this$request6 = this.request) === null || _this$request6 === void 0 ? void 0 : _this$request6.removeListener('cancel', this._cancelAfterRequestSent);\n          (_this$request7 = this.request) === null || _this$request7 === void 0 ? void 0 : _this$request7.removeListener('cancel', onCancel);\n          (_this$request8 = this.request) === null || _this$request8 === void 0 ? void 0 : _this$request8.removeListener('pause', onPause);\n          (_this$request9 = this.request) === null || _this$request9 === void 0 ? void 0 : _this$request9.removeListener('resume', onResume);\n          this.transitionTo(this.STATE.LOGGED_IN);\n          const sqlRequest = this.request;\n          this.request = undefined;\n          if (this.config.options.tdsVersion < '7_2' && sqlRequest.error && this.isSqlBatch) {\n            this.inTransaction = false;\n          }\n          sqlRequest.callback(sqlRequest.error, sqlRequest.rowCount, sqlRequest.rows);\n        };\n        tokenStreamParser.once('end', onEndOfMessage);\n        (_this$request10 = this.request) === null || _this$request10 === void 0 ? void 0 : _this$request10.once('cancel', onCancel);\n      })();\n    },\n    exit: function (nextState) {\n      this.clearRequestTimer();\n    },\n    events: {\n      socketError: function (err) {\n        const sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  SENT_ATTENTION: {\n    name: 'SentAttention',\n    enter: function () {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err) {\n          return this.socketError(err);\n        }\n        const handler = new _handler.AttentionTokenHandler(this, this.request);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n        await (0, _events.once)(tokenStreamParser, 'end'); // 3.2.5.7 Sent Attention State\n        // Discard any data contained in the response, until we receive the attention response\n\n        if (handler.attentionReceived) {\n          this.clearCancelTimer();\n          const sqlRequest = this.request;\n          this.request = undefined;\n          this.transitionTo(this.STATE.LOGGED_IN);\n          if (sqlRequest.error && sqlRequest.error instanceof _errors.RequestError && sqlRequest.error.code === 'ETIMEOUT') {\n            sqlRequest.callback(sqlRequest.error);\n          } else {\n            sqlRequest.callback(new _errors.RequestError('Canceled.', 'ECANCEL'));\n          }\n        }\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function (err) {\n        const sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  FINAL: {\n    name: 'Final',\n    enter: function () {\n      this.cleanupConnection(CLEANUP_TYPE.NORMAL);\n    },\n    events: {\n      connectTimeout: function () {// Do nothing, as the timer should be cleaned up.\n      },\n      message: function () {// Do nothing\n      },\n      socketError: function () {// Do nothing\n      }\n    }\n  }\n};","map":{"version":3,"names":["_crypto","_interopRequireDefault","require","_os","_dns","_constants","_stream","_identity","_bulkLoad","_debug","_events","_instanceLookup","_transientErrorLookup","_packet","_preloginPayload","_login7Payload","_ntlmPayload","_request","_rpcrequestPayload","_sqlbatchPayload","_messageIo","_tokenStreamParser","_transaction","_errors","_connector","_library","_tdsVersions","_message","_ntlm","_nodeAbortController","_dataType","_bulkLoadPayload","_esAggregateError","_package","_url","_handler","KEEP_ALIVE_INITIAL_DELAY","DEFAULT_CONNECT_TIMEOUT","DEFAULT_CLIENT_REQUEST_TIMEOUT","DEFAULT_CANCEL_TIMEOUT","DEFAULT_CONNECT_RETRY_INTERVAL","DEFAULT_PACKET_SIZE","DEFAULT_TEXTSIZE","DEFAULT_DATEFIRST","DEFAULT_PORT","DEFAULT_TDS_VERSION","DEFAULT_LANGUAGE","DEFAULT_DATEFORMAT","CLEANUP_TYPE","NORMAL","REDIRECT","RETRY","Connection","EventEmitter","constructor","config","fedAuthRequired","secureContextOptions","inTransaction","transactionDescriptors","transactionDepth","isSqlBatch","curTransientRetryCount","transientErrorLookup","closed","loginError","debug","ntlmpacket","ntlmpacketBuffer","routingData","messageIo","state","resetConnectionOnNextRequest","request","procReturnStatusValue","socket","messageBuffer","connectTimer","cancelTimer","requestTimer","retryTimer","_cancelAfterRequestSent","databaseCollation","TypeError","server","authentication","undefined","type","options","domain","userName","password","toUpperCase","clientId","tenantId","token","clientSecret","abortTransactionOnError","appName","camelCaseColumns","cancelTimeout","columnEncryptionKeyCacheTTL","columnEncryptionSetting","columnNameReplacer","connectionRetryInterval","connectTimeout","connectionIsolationLevel","ISOLATION_LEVEL","READ_COMMITTED","cryptoCredentialsDetails","database","datefirst","dateFormat","data","packet","payload","enableAnsiNull","enableAnsiNullDefault","enableAnsiPadding","enableAnsiWarnings","enableArithAbort","enableConcatNullYieldsNull","enableCursorCloseOnCommit","enableImplicitTransactions","enableNumericRoundabort","enableQuotedIdentifier","encrypt","fallbackToDefaultDb","encryptionKeyStoreProviders","instanceName","isolationLevel","language","localAddress","maxRetriesOnTransientErrors","multiSubnetFailover","packetSize","port","readOnlyIntent","requestTimeout","rowCollectionOnDone","rowCollectionOnRequestCompletion","serverName","serverSupportsColumnEncryption","tdsVersion","textsize","trustedServerNameAE","trustServerCertificate","useColumnNames","useUTC","workstationId","lowerCaseGuids","Error","assertValidIsolationLevel","RangeError","secureOptions","Object","create","value","default","SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","createDebug","Buffer","from","alloc","TransientErrorLookup","STATE","INITIALIZED","sendMessage","TYPE","ATTENTION","createCancelTimer","connect","connectListener","ConnectionError","name","onConnect","err","removeListener","onError","once","transitionTo","CONNECTING","on","event","listener","emit","args","close","FINAL","initialiseConnection","signal","createConnectTimer","connectOnPort","instanceLookup","timeout","then","process","nextTick","clearConnectTimer","message","cleanupConnection","cleanupType","clearRequestTimer","clearRetryTimer","closeConnection","RequestError","callback","createTokenStreamParser","handler","Parser","connectOpts","host","connectInParallel","connectInSequence","lookup","error","socketError","socketClose","socketEnd","setKeepAlive","cleartext","log","sendPreLogin","SENT_PRELOGIN","destroy","controller","AbortController","setTimeout","abort","clearCancelTimer","createRequestTimer","createRetryTimer","retryTimeout","dispatchEvent","cancel","clearTimeout","newState","exit","call","enter","apply","getEventHandler","eventName","events","SENT_TLSSSLNEGOTIATION","code","REROUTING","TRANSIENT_FAILURE_RETRY","major","minor","build","exec","version","Number","subbuild","PRELOGIN","toString","sendLogin7Packet","versions","clientProgVer","clientPid","pid","connectionId","clientTimeZone","Date","getTimezoneOffset","clientLcid","fedAuth","echo","workflow","fedAuthToken","sspi","createNTLMRequest","hostname","libraryName","initDbFatal","LOGIN7","toBuffer","sendFedAuthTokenMessage","accessTokenLen","byteLength","offset","writeUInt32LE","write","FEDAUTH_TOKEN","SENT_LOGIN7_WITH_STANDARD_LOGIN","sendInitialSql","getInitialSql","currentTransactionDescriptor","SQL_BATCH","outgoingMessageStream","Readable","pipe","push","getIsolationLevelText","join","processedInitialSql","execSqlBatch","makeRequest","sqlTextOrProcedure","execSql","validateParameters","parameters","TYPES","NVarChar","output","length","precision","scale","makeParamsParameter","RPC_REQUEST","newBulkLoad","table","callbackOrOptions","execBulkLoad","bulkLoad","rows","executionStarted","streamingMode","firstRowWritten","rowStream","rowToPacketTransform","end","onCancel","BulkLoadPayload","getBulkInsertSql","BULK_LOAD","prepare","Int","preparing","handle","unprepare","execute","executeParameters","i","len","parameter","validate","callProcedure","beginTransaction","transaction","Transaction","isolationLevelToTSQL","TRANSACTION_MANAGER","beginPayload","commitTransaction","commitPayload","rollbackTransaction","rollbackPayload","saveTransaction","savePayload","cb","useSavepoint","randomBytes","txDone","done","LOGGED_IN","txErr","packetType","canceled","connection","rowCount","rst","payloadStream","unpipe","ignore","paused","resume","resetConnection","SENT_CLIENT_REQUEST","reset","READ_UNCOMMITTED","REPEATABLE_READ","SERIALIZABLE","SNAPSHOT","isTransientError","errors","isTransient","module","exports","prototype","readMessage","concat","preloginPayload","encryptionString","_this$routingData","startTls","SENT_LOGIN7_WITH_FEDAUTH","SENT_LOGIN7_WITH_NTLM","catch","reconnect","retry","Login7TokenHandler","tokenStreamParser","loginAckReceived","LOGGED_IN_SENDING_INITIAL_SQL","NTLMAUTH_PKT","fedAuthInfoToken","stsurl","spn","tokenScope","URL","credentials","UsernamePasswordCredential","msiArgs","ManagedIdentityCredential","managedIdentityClientId","DefaultAzureCredential","ClientSecretCredential","tokenResponse","getToken","InitialSqlTokenHandler","_this$request","_this$request3","_this$request10","RequestTokenHandler","SENT_ATTENTION","onResume","onPause","_this$request2","pause","_this$request4","_this$request5","onEndOfMessage","_this$request6","_this$request7","_this$request8","_this$request9","sqlRequest","nextState","AttentionTokenHandler","attentionReceived"],"sources":["C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\node_modules\\tedious\\src\\connection.ts"],"sourcesContent":["import crypto from 'crypto';\nimport os from 'os';\nimport { Socket } from 'net';\nimport dns from 'dns';\n\nimport constants from 'constants';\nimport { SecureContextOptions } from 'tls';\n\nimport { Readable } from 'stream';\n\nimport {\n  DefaultAzureCredential,\n  ClientSecretCredential,\n  ManagedIdentityCredential,\n  UsernamePasswordCredential,\n} from '@azure/identity';\n\nimport BulkLoad, { Options as BulkLoadOptions, Callback as BulkLoadCallback } from './bulk-load';\nimport Debug from './debug';\nimport { EventEmitter, once } from 'events';\nimport { instanceLookup } from './instance-lookup';\nimport { TransientErrorLookup } from './transient-error-lookup';\nimport { TYPE } from './packet';\nimport PreloginPayload from './prelogin-payload';\nimport Login7Payload from './login7-payload';\nimport NTLMResponsePayload from './ntlm-payload';\nimport Request from './request';\nimport RpcRequestPayload from './rpcrequest-payload';\nimport SqlBatchPayload from './sqlbatch-payload';\nimport MessageIO from './message-io';\nimport { Parser as TokenStreamParser } from './token/token-stream-parser';\nimport { Transaction, ISOLATION_LEVEL, assertValidIsolationLevel } from './transaction';\nimport { ConnectionError, RequestError } from './errors';\nimport { connectInParallel, connectInSequence } from './connector';\nimport { name as libraryName } from './library';\nimport { versions } from './tds-versions';\nimport Message from './message';\nimport { Metadata } from './metadata-parser';\nimport { createNTLMRequest } from './ntlm';\nimport { ColumnEncryptionAzureKeyVaultProvider } from './always-encrypted/keystore-provider-azure-key-vault';\n\nimport { AbortController, AbortSignal } from 'node-abort-controller';\nimport { Parameter, TYPES } from './data-type';\nimport { BulkLoadPayload } from './bulk-load-payload';\nimport { Collation } from './collation';\n\nimport AggregateError from 'es-aggregate-error';\nimport { version } from '../package.json';\nimport { URL } from 'url';\nimport { AttentionTokenHandler, InitialSqlTokenHandler, Login7TokenHandler, RequestTokenHandler, TokenHandler } from './token/handler';\n\ntype BeginTransactionCallback =\n  /**\n   * The callback is called when the request to start the transaction has completed,\n   * either successfully or with an error.\n   * If an error occurred then `err` will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until this callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   * @param transactionDescriptor A Buffer that describe the transaction\n   */\n  (err: Error | null | undefined, transactionDescriptor?: Buffer) => void\n\ntype SaveTransactionCallback =\n  /**\n   * The callback is called when the request to set a savepoint within the\n   * transaction has completed, either successfully or with an error.\n   * If an error occurred then `err` will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until this callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   */\n  (err: Error | null | undefined) => void;\n\ntype CommitTransactionCallback =\n  /**\n   * The callback is called when the request to commit the transaction has completed,\n   * either successfully or with an error.\n   * If an error occurred then `err` will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until this callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   */\n  (err: Error | null | undefined) => void;\n\ntype RollbackTransactionCallback =\n  /**\n   * The callback is called when the request to rollback the transaction has\n   * completed, either successfully or with an error.\n   * If an error occurred then err will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until this callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   */\n  (err: Error | null | undefined) => void;\n\ntype ResetCallback =\n  /**\n   * The callback is called when the connection reset has completed,\n   * either successfully or with an error.\n   *\n   * If an error occurred then `err` will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another\n   * request should not be initiated until this callback is called\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   */\n  (err: Error | null | undefined) => void;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype TransactionCallback<T extends (err: Error | null | undefined, ...args: any[]) => void> =\n  /**\n   * The callback is called when the request to start a transaction (or create a savepoint, in\n   * the case of a nested transaction) has completed, either successfully or with an error.\n   * If an error occurred, then `err` will describe the error.\n   * If no error occurred, the callback should perform its work and eventually call\n   * `done` with an error or null (to trigger a transaction rollback or a\n   * transaction commit) and an additional completion callback that will be called when the request\n   * to rollback or commit the current transaction has completed, either successfully or with an error.\n   * Additional arguments given to `done` will be passed through to this callback.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until the completion callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   * @param txDone If no error occurred, a function to be called to commit or rollback the transaction.\n   */\n  (err: Error | null | undefined, txDone?: TransactionDone<T>) => void;\n\ntype TransactionDoneCallback = (err: Error | null | undefined, ...args: any[]) => void;\ntype CallbackParameters<T extends (err: Error | null | undefined, ...args: any[]) => any> = T extends (err: Error | null | undefined, ...args: infer P) => any ? P : never;\n\ntype TransactionDone<T extends (err: Error | null | undefined, ...args: any[]) => void> =\n  /**\n   * If no error occurred, a function to be called to commit or rollback the transaction.\n   *\n   * @param err If an err occurred, a string with details of the error.\n   */\n  (err: Error | null | undefined, done: T, ...args: CallbackParameters<T>) => void;\n\n/**\n * @private\n */\nconst KEEP_ALIVE_INITIAL_DELAY = 30 * 1000;\n/**\n * @private\n */\nconst DEFAULT_CONNECT_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\nconst DEFAULT_CLIENT_REQUEST_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\nconst DEFAULT_CANCEL_TIMEOUT = 5 * 1000;\n/**\n * @private\n */\nconst DEFAULT_CONNECT_RETRY_INTERVAL = 500;\n/**\n * @private\n */\nconst DEFAULT_PACKET_SIZE = 4 * 1024;\n/**\n * @private\n */\nconst DEFAULT_TEXTSIZE = 2147483647;\n/**\n * @private\n */\nconst DEFAULT_DATEFIRST = 7;\n/**\n * @private\n */\nconst DEFAULT_PORT = 1433;\n/**\n * @private\n */\nconst DEFAULT_TDS_VERSION = '7_4';\n/**\n * @private\n */\nconst DEFAULT_LANGUAGE = 'us_english';\n/**\n * @private\n */\nconst DEFAULT_DATEFORMAT = 'mdy';\n\ninterface AzureActiveDirectoryMsiAppServiceAuthentication {\n  type: 'azure-active-directory-msi-app-service';\n  options: {\n    /**\n     * If you user want to connect to an Azure app service using a specific client account\n     * they need to provide `clientId` asscoiate to their created idnetity.\n     *\n     * This is optional for retrieve token from azure web app service\n     */\n    clientId?: string;\n  };\n}\n\ninterface AzureActiveDirectoryMsiVmAuthentication {\n  type: 'azure-active-directory-msi-vm';\n  options: {\n    /**\n     * If you want to connect using a specific client account\n     * they need to provide `clientId` associated to their created identity.\n     *\n     * This is optional for retrieve a token\n     */\n    clientId?: string;\n  };\n}\n\ninterface AzureActiveDirectoryDefaultAuthentication {\n  type: 'azure-active-directory-default';\n  options: {\n    /**\n     * If you want to connect using a specific client account\n     * they need to provide `clientId` associated to their created identity.\n     *\n     * This is optional for retrieving a token\n     */\n    clientId?: string;\n  };\n}\n\n\ninterface AzureActiveDirectoryAccessTokenAuthentication {\n  type: 'azure-active-directory-access-token';\n  options: {\n    /**\n     * A user need to provide `token` which they retrived else where\n     * to forming the connection.\n     */\n    token: string;\n  };\n}\n\ninterface AzureActiveDirectoryPasswordAuthentication {\n  type: 'azure-active-directory-password';\n  options: {\n    /**\n     * A user need to provide `userName` asscoiate to their account.\n     */\n    userName: string;\n\n    /**\n     * A user need to provide `password` asscoiate to their account.\n     */\n    password: string;\n\n    /**\n     * A client id to use.\n     */\n    clientId: string;\n\n    /**\n     * Optional parameter for specific Azure tenant ID\n     */\n    tenantId: string;\n  };\n}\n\ninterface AzureActiveDirectoryServicePrincipalSecret {\n  type: 'azure-active-directory-service-principal-secret';\n  options: {\n    /**\n     * Application (`client`) ID from your registered Azure application\n     */\n    clientId: string;\n    /**\n     * The created `client secret` for this registered Azure application\n     */\n    clientSecret: string;\n    /**\n     * Directory (`tenant`) ID from your registered Azure application\n     */\n    tenantId: string;\n  };\n}\n\ninterface NtlmAuthentication {\n  type: 'ntlm';\n  options: {\n    /**\n     * User name from your windows account.\n     */\n    userName: string;\n    /**\n     * Password from your windows account.\n     */\n    password: string;\n    /**\n     * Once you set domain for ntlm authentication type, driver will connect to SQL Server using domain login.\n     *\n     * This is necessary for forming a connection using ntlm type\n     */\n    domain: string;\n  };\n}\n\ninterface DefaultAuthentication {\n  type: 'default';\n  options: {\n    /**\n     * User name to use for sql server login.\n     */\n    userName?: string | undefined;\n    /**\n     * Password to use for sql server login.\n     */\n    password?: string | undefined;\n  };\n}\n\ninterface ErrorWithCode extends Error {\n  code?: string;\n}\n\ninterface InternalConnectionConfig {\n  server: string;\n  authentication: DefaultAuthentication | NtlmAuthentication | AzureActiveDirectoryPasswordAuthentication | AzureActiveDirectoryMsiAppServiceAuthentication | AzureActiveDirectoryMsiVmAuthentication | AzureActiveDirectoryAccessTokenAuthentication | AzureActiveDirectoryServicePrincipalSecret | AzureActiveDirectoryDefaultAuthentication;\n  options: InternalConnectionOptions;\n}\n\nexport interface InternalConnectionOptions {\n  abortTransactionOnError: boolean;\n  appName: undefined | string;\n  camelCaseColumns: boolean;\n  cancelTimeout: number;\n  columnEncryptionKeyCacheTTL: number;\n  columnEncryptionSetting: boolean;\n  columnNameReplacer: undefined | ((colName: string, index: number, metadata: Metadata) => string);\n  connectionRetryInterval: number;\n  connectTimeout: number;\n  connectionIsolationLevel: typeof ISOLATION_LEVEL[keyof typeof ISOLATION_LEVEL];\n  cryptoCredentialsDetails: SecureContextOptions;\n  database: undefined | string;\n  datefirst: number;\n  dateFormat: string;\n  debug: {\n    data: boolean;\n    packet: boolean;\n    payload: boolean;\n    token: boolean;\n  };\n  enableAnsiNull: null | boolean;\n  enableAnsiNullDefault: null | boolean;\n  enableAnsiPadding: null | boolean;\n  enableAnsiWarnings: null | boolean;\n  enableArithAbort: null | boolean;\n  enableConcatNullYieldsNull: null | boolean;\n  enableCursorCloseOnCommit: null | boolean;\n  enableImplicitTransactions: null | boolean;\n  enableNumericRoundabort: null | boolean;\n  enableQuotedIdentifier: null | boolean;\n  encrypt: boolean;\n  encryptionKeyStoreProviders: KeyStoreProviderMap | undefined;\n  fallbackToDefaultDb: boolean;\n  instanceName: undefined | string;\n  isolationLevel: typeof ISOLATION_LEVEL[keyof typeof ISOLATION_LEVEL];\n  language: string;\n  localAddress: undefined | string;\n  maxRetriesOnTransientErrors: number;\n  multiSubnetFailover: boolean;\n  packetSize: number;\n  port: undefined | number;\n  readOnlyIntent: boolean;\n  requestTimeout: number;\n  rowCollectionOnDone: boolean;\n  rowCollectionOnRequestCompletion: boolean;\n  serverName: undefined | string;\n  serverSupportsColumnEncryption: boolean;\n  tdsVersion: string;\n  textsize: number;\n  trustedServerNameAE: string | undefined;\n  trustServerCertificate: boolean;\n  useColumnNames: boolean;\n  useUTC: boolean;\n  workstationId: undefined | string;\n  lowerCaseGuids: boolean;\n}\n\ninterface KeyStoreProviderMap {\n  [key: string]: ColumnEncryptionAzureKeyVaultProvider;\n}\n\n/**\n * @private\n */\ninterface State {\n  name: string;\n  enter?(this: Connection): void;\n  exit?(this: Connection, newState: State): void;\n  events: {\n    socketError?(this: Connection, err: Error): void;\n    connectTimeout?(this: Connection): void;\n    message?(this: Connection, message: Message): void;\n    retry?(this: Connection): void;\n    reconnect?(this: Connection): void;\n  };\n}\n\ntype Authentication = DefaultAuthentication |\n  NtlmAuthentication |\n  AzureActiveDirectoryPasswordAuthentication |\n  AzureActiveDirectoryMsiAppServiceAuthentication |\n  AzureActiveDirectoryMsiVmAuthentication |\n  AzureActiveDirectoryAccessTokenAuthentication |\n  AzureActiveDirectoryServicePrincipalSecret |\n  AzureActiveDirectoryDefaultAuthentication;\n\ntype AuthenticationType = Authentication['type'];\n\nexport interface ConnectionConfiguration {\n  /**\n   * Hostname to connect to.\n   */\n  server: string;\n  /**\n   * Configuration options for forming the connection.\n   */\n  options?: ConnectionOptions;\n  /**\n   * Authentication realted options for connection.\n   */\n  authentication?: AuthenticationOptions;\n}\n\ninterface DebugOptions {\n  /**\n   * A boolean, controlling whether [[debug]] events will be emitted with text describing packet data details\n   *\n   * (default: `false`)\n   */\n  data: boolean;\n  /**\n   * A boolean, controlling whether [[debug]] events will be emitted with text describing packet details\n   *\n   * (default: `false`)\n   */\n  packet: boolean;\n  /**\n   * A boolean, controlling whether [[debug]] events will be emitted with text describing packet payload details\n   *\n   * (default: `false`)\n   */\n  payload: boolean;\n  /**\n   * A boolean, controlling whether [[debug]] events will be emitted with text describing token stream tokens\n   *\n   * (default: `false`)\n   */\n  token: boolean;\n}\n\ninterface AuthenticationOptions {\n  /**\n   * Type of the authentication method, valid types are `default`, `ntlm`,\n   * `azure-active-directory-password`, `azure-active-directory-access-token`,\n   * `azure-active-directory-msi-vm`, `azure-active-directory-msi-app-service`,\n   * `azure-active-directory-default`\n   * or `azure-active-directory-service-principal-secret`\n   */\n  type?: AuthenticationType;\n  /**\n   * Different options for authentication types:\n   *\n   * * `default`: [[DefaultAuthentication.options]]\n   * * `ntlm` :[[NtlmAuthentication]]\n   * * `azure-active-directory-password` : [[AzureActiveDirectoryPasswordAuthentication.options]]\n   * * `azure-active-directory-access-token` : [[AzureActiveDirectoryAccessTokenAuthentication.options]]\n   * * `azure-active-directory-msi-vm` : [[AzureActiveDirectoryMsiVmAuthentication.options]]\n   * * `azure-active-directory-msi-app-service` : [[AzureActiveDirectoryMsiAppServiceAuthentication.options]]\n   * * `azure-active-directory-service-principal-secret` : [[AzureActiveDirectoryServicePrincipalSecret.options]]\n   * * `azure-active-directory-default` : [[AzureActiveDirectoryDefaultAuthentication.options]]\n   */\n  options?: any;\n}\n\nexport interface ConnectionOptions {\n  /**\n   * A boolean determining whether to rollback a transaction automatically if any error is encountered\n   * during the given transaction's execution. This sets the value for `SET XACT_ABORT` during the\n   * initial SQL phase of a connection [documentation](https://docs.microsoft.com/en-us/sql/t-sql/statements/set-xact-abort-transact-sql).\n   */\n  abortTransactionOnError?: boolean;\n\n  /**\n   * Application name used for identifying a specific application in profiling, logging or tracing tools of SQLServer.\n   *\n   * (default: `Tedious`)\n   */\n  appName?: string | undefined;\n\n  /**\n   * A boolean, controlling whether the column names returned will have the first letter converted to lower case\n   * (`true`) or not. This value is ignored if you provide a [[columnNameReplacer]].\n   *\n   * (default: `false`).\n   */\n  camelCaseColumns?: boolean;\n\n  /**\n   * The number of milliseconds before the [[Request.cancel]] (abort) of a request is considered failed\n   *\n   * (default: `5000`).\n   */\n  cancelTimeout?: number;\n\n  /**\n   * A function with parameters `(columnName, index, columnMetaData)` and returning a string. If provided,\n   * this will be called once per column per result-set. The returned value will be used instead of the SQL-provided\n   * column name on row and meta data objects. This allows you to dynamically convert between naming conventions.\n   *\n   * (default: `null`)\n   */\n  columnNameReplacer?: (colName: string, index: number, metadata: Metadata) => string;\n\n  /**\n   * Number of milliseconds before retrying to establish connection, in case of transient failure.\n   *\n   * (default:`500`)\n   */\n  connectionRetryInterval?: number;\n\n  /**\n   * The number of milliseconds before the attempt to connect is considered failed\n   *\n   * (default: `15000`).\n   */\n  connectTimeout?: number;\n\n  /**\n   * The default isolation level for new connections. All out-of-transaction queries are executed with this setting.\n   *\n   * The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   * * `READ_UNCOMMITTED`\n   * * `READ_COMMITTED`\n   * * `REPEATABLE_READ`\n   * * `SERIALIZABLE`\n   * * `SNAPSHOT`\n   *\n   * (default: `READ_COMMITED`).\n   */\n  connectionIsolationLevel?: number;\n\n  /**\n   * When encryption is used, an object may be supplied that will be used\n   * for the first argument when calling [`tls.createSecurePair`](http://nodejs.org/docs/latest/api/tls.html#tls_tls_createsecurepair_credentials_isserver_requestcert_rejectunauthorized)\n   *\n   * (default: `{}`)\n   */\n  cryptoCredentialsDetails?: SecureContextOptions;\n\n  /**\n   * Database to connect to (default: dependent on server configuration).\n   */\n  database?: string | undefined;\n\n  /**\n   * Sets the first day of the week to a number from 1 through 7.\n   */\n  datefirst?: number;\n\n  /**\n   * A string representing position of month, day and year in temporal datatypes.\n   *\n   * (default: `mdy`)\n   */\n  dateFormat?: string;\n\n  debug?: DebugOptions;\n\n  /**\n   * A boolean, controls the way null values should be used during comparison operation.\n   *\n   * (default: `true`)\n   */\n  enableAnsiNull?: boolean;\n\n  /**\n   * If true, `SET ANSI_NULL_DFLT_ON ON` will be set in the initial sql. This means new columns will be\n   * nullable by default. See the [T-SQL documentation](https://msdn.microsoft.com/en-us/library/ms187375.aspx)\n   *\n   * (default: `true`).\n   */\n  enableAnsiNullDefault?: boolean;\n\n  /**\n   * A boolean, controls if padding should be applied for values shorter than the size of defined column.\n   *\n   * (default: `true`)\n   */\n  enableAnsiPadding?: boolean;\n\n  /**\n   * If true, SQL Server will follow ISO standard behavior during various error conditions. For details,\n   * see [documentation](https://docs.microsoft.com/en-us/sql/t-sql/statements/set-ansi-warnings-transact-sql)\n   *\n   * (default: `true`)\n   */\n  enableAnsiWarnings?: boolean;\n\n  /**\n   * Ends a query when an overflow or divide-by-zero error occurs during query execution.\n   * See [documentation](https://docs.microsoft.com/en-us/sql/t-sql/statements/set-arithabort-transact-sql?view=sql-server-2017)\n   * for more details.\n   *\n   * (default: `true`)\n   */\n  enableArithAbort?: boolean;\n\n  /**\n   * A boolean, determines if concatenation with NULL should result in NULL or empty string value, more details in\n   * [documentation](https://docs.microsoft.com/en-us/sql/t-sql/statements/set-concat-null-yields-null-transact-sql)\n   *\n   * (default: `true`)\n   */\n  enableConcatNullYieldsNull?: boolean;\n\n  /**\n   * A boolean, controls whether cursor should be closed, if the transaction opening it gets committed or rolled\n   * back.\n   *\n   * (default: `null`)\n   */\n  enableCursorCloseOnCommit?: boolean | null;\n\n  /**\n   * A boolean, sets the connection to either implicit or autocommit transaction mode.\n   *\n   * (default: `false`)\n   */\n  enableImplicitTransactions?: boolean;\n\n  /**\n   * If false, error is not generated during loss of precession.\n   *\n   * (default: `false`)\n   */\n  enableNumericRoundabort?: boolean;\n\n  /**\n   * If true, characters enclosed in single quotes are treated as literals and those enclosed double quotes are treated as identifiers.\n   *\n   * (default: `true`)\n   */\n  enableQuotedIdentifier?: boolean;\n\n  /**\n   * A boolean determining whether or not the connection will be encrypted. Set to `true` if you're on Windows Azure.\n   *\n   * (default: `false`)\n   */\n  encrypt?: boolean;\n\n  /**\n   * By default, if the database requested by [[database]] cannot be accessed,\n   * the connection will fail with an error. However, if [[fallbackToDefaultDb]] is\n   * set to `true`, then the user's default database will be used instead\n   *\n   * (default: `false`)\n   */\n  fallbackToDefaultDb?: boolean;\n\n  /**\n   * The instance name to connect to.\n   * The SQL Server Browser service must be running on the database server,\n   * and UDP port 1434 on the database server must be reachable.\n   *\n   * (no default)\n   *\n   * Mutually exclusive with [[port]].\n   */\n  instanceName?: string | undefined;\n\n  /**\n   * The default isolation level that transactions will be run with.\n   *\n   * The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   * * `READ_UNCOMMITTED`\n   * * `READ_COMMITTED`\n   * * `REPEATABLE_READ`\n   * * `SERIALIZABLE`\n   * * `SNAPSHOT`\n   *\n   * (default: `READ_COMMITED`).\n   */\n  isolationLevel?: number;\n\n  /**\n   * Specifies the language environment for the session. The session language determines the datetime formats and system messages.\n   *\n   * (default: `us_english`).\n   */\n  language?: string;\n\n  /**\n   * A string indicating which network interface (ip address) to use when connecting to SQL Server.\n   */\n  localAddress?: string | undefined;\n\n  /**\n   * A boolean determining whether to parse unique identifier type with lowercase case characters.\n   *\n   * (default: `false`).\n   */\n  lowerCaseGuids?: boolean;\n\n  /**\n   * The maximum number of connection retries for transient errors.、\n   *\n   * (default: `3`).\n   */\n  maxRetriesOnTransientErrors?: number;\n\n  /**\n   * Sets the MultiSubnetFailover = True parameter, which can help minimize the client recovery latency when failovers occur.\n   *\n   * (default: `false`).\n   */\n  multiSubnetFailover?: boolean;\n\n  /**\n   * The size of TDS packets (subject to negotiation with the server).\n   * Should be a power of 2.\n   *\n   * (default: `4096`).\n   */\n  packetSize?: number;\n\n  /**\n   * Port to connect to (default: `1433`).\n   *\n   * Mutually exclusive with [[instanceName]]\n   */\n  port?: number;\n\n  /**\n   * A boolean, determining whether the connection will request read only access from a SQL Server Availability\n   * Group. For more information, see [here](http://msdn.microsoft.com/en-us/library/hh710054.aspx \"Microsoft: Configure Read-Only Routing for an Availability Group (SQL Server)\")\n   *\n   * (default: `false`).\n   */\n  readOnlyIntent?: boolean;\n\n  /**\n   * The number of milliseconds before a request is considered failed, or `0` for no timeout\n   *\n   * (default: `15000`).\n   */\n  requestTimeout?: number;\n\n  /**\n   * A boolean, that when true will expose received rows in Requests done related events:\n   * * [[Request.Event_doneInProc]]\n   * * [[Request.Event_doneProc]]\n   * * [[Request.Event_done]]\n   *\n   * (default: `false`)\n   *\n   * Caution: If many row are received, enabling this option could result in\n   * excessive memory usage.\n   */\n  rowCollectionOnDone?: boolean;\n\n  /**\n   * A boolean, that when true will expose received rows in Requests' completion callback.See [[Request.constructor]].\n   *\n   * (default: `false`)\n   *\n   * Caution: If many row are received, enabling this option could result in\n   * excessive memory usage.\n   */\n  rowCollectionOnRequestCompletion?: boolean;\n\n  /**\n   * The version of TDS to use. If server doesn't support specified version, negotiated version is used instead.\n   *\n   * The versions are available from `require('tedious').TDS_VERSION`.\n   * * `7_1`\n   * * `7_2`\n   * * `7_3_A`\n   * * `7_3_B`\n   * * `7_4`\n   *\n   * (default: `7_4`)\n   */\n  tdsVersion?: string;\n\n  /**\n   * Specifies the size of varchar(max), nvarchar(max), varbinary(max), text, ntext, and image data returned by a SELECT statement.\n   *\n   * (default: `2147483647`)\n   */\n  textsize?: string;\n\n  /**\n   * If \"true\", the SQL Server SSL certificate is automatically trusted when the communication layer is encrypted using SSL.\n   *\n   * If \"false\", the SQL Server validates the server SSL certificate. If the server certificate validation fails,\n   * the driver raises an error and terminates the connection. Make sure the value passed to serverName exactly\n   * matches the Common Name (CN) or DNS name in the Subject Alternate Name in the server certificate for an SSL connection to succeed.\n   *\n   * (default: `true`)\n   */\n  trustServerCertificate?: boolean;\n\n  /**\n   * A boolean determining whether to return rows as arrays or key-value collections.\n   *\n   * (default: `false`).\n   */\n  useColumnNames?: boolean;\n\n  /**\n   * A boolean determining whether to pass time values in UTC or local time.\n   *\n   * (default: `true`).\n   */\n  useUTC?: boolean;\n\n  /**\n   * The workstation ID (WSID) of the client, default os.hostname().\n   * Used for identifying a specific client in profiling, logging or\n   * tracing client activity in SQLServer.\n   *\n   * The value is reported by the TSQL function HOST_NAME().\n   */\n  workstationId?: string | undefined;\n}\n\n/**\n * @private\n */\nconst CLEANUP_TYPE = {\n  NORMAL: 0,\n  REDIRECT: 1,\n  RETRY: 2\n};\n\ninterface RoutingData {\n  server: string;\n  port: number;\n}\n\n/**\n * A [[Connection]] instance represents a single connection to a database server.\n *\n * ```js\n * var Connection = require('tedious').Connection;\n * var config = {\n *  \"authentication\": {\n *    ...,\n *    \"options\": {...}\n *  },\n *  \"options\": {...}\n * };\n * var connection = new Connection(config);\n * ```\n *\n * Only one request at a time may be executed on a connection. Once a [[Request]]\n * has been initiated (with [[Connection.callProcedure]], [[Connection.execSql]],\n * or [[Connection.execSqlBatch]]), another should not be initiated until the\n * [[Request]]'s completion callback is called.\n */\nclass Connection extends EventEmitter {\n  /**\n   * @private\n   */\n  fedAuthRequired: boolean;\n  /**\n   * @private\n   */\n  config: InternalConnectionConfig;\n  /**\n   * @private\n   */\n  secureContextOptions: SecureContextOptions;\n  /**\n   * @private\n   */\n  inTransaction: boolean;\n  /**\n   * @private\n   */\n  transactionDescriptors: Buffer[];\n  /**\n   * @private\n   */\n  transactionDepth: number;\n  /**\n   * @private\n   */\n  isSqlBatch: boolean;\n  /**\n   * @private\n   */\n  curTransientRetryCount: number;\n  /**\n   * @private\n   */\n  transientErrorLookup: TransientErrorLookup;\n  /**\n   * @private\n   */\n  closed: boolean;\n  /**\n   * @private\n   */\n  loginError: undefined | AggregateError | ConnectionError;\n  /**\n   * @private\n   */\n  debug: Debug;\n  /**\n   * @private\n   */\n  ntlmpacket: undefined | any;\n  /**\n   * @private\n   */\n  ntlmpacketBuffer: undefined | Buffer;\n\n  /**\n   * @private\n   */\n  declare STATE: {\n    INITIALIZED: State;\n    CONNECTING: State;\n    SENT_PRELOGIN: State;\n    REROUTING: State;\n    TRANSIENT_FAILURE_RETRY: State;\n    SENT_TLSSSLNEGOTIATION: State;\n    SENT_LOGIN7_WITH_STANDARD_LOGIN: State;\n    SENT_LOGIN7_WITH_NTLM: State;\n    SENT_LOGIN7_WITH_FEDAUTH: State;\n    LOGGED_IN_SENDING_INITIAL_SQL: State;\n    LOGGED_IN: State;\n    SENT_CLIENT_REQUEST: State;\n    SENT_ATTENTION: State;\n    FINAL: State;\n  }\n\n  /**\n   * @private\n   */\n  routingData: undefined | RoutingData;\n\n  /**\n   * @private\n   */\n  messageIo!: MessageIO;\n  /**\n   * @private\n   */\n  state: State;\n  /**\n   * @private\n   */\n  resetConnectionOnNextRequest: undefined | boolean;\n\n  /**\n   * @private\n   */\n  request: undefined | Request | BulkLoad;\n  /**\n   * @private\n   */\n  procReturnStatusValue: undefined | any;\n  /**\n   * @private\n   */\n  socket: undefined | Socket;\n  /**\n   * @private\n   */\n  messageBuffer: Buffer;\n\n  /**\n   * @private\n   */\n  connectTimer: undefined | NodeJS.Timeout;\n  /**\n   * @private\n   */\n  cancelTimer: undefined | NodeJS.Timeout;\n  /**\n   * @private\n   */\n  requestTimer: undefined | NodeJS.Timeout;\n  /**\n   * @private\n   */\n  retryTimer: undefined | NodeJS.Timeout;\n\n  /**\n   * @private\n   */\n  _cancelAfterRequestSent: () => void;\n\n  /**\n   * @private\n   */\n  databaseCollation: Collation | undefined;\n\n  /**\n   * Note: be aware of the different options field:\n   * 1. config.authentication.options\n   * 2. config.options\n   *\n   * ```js\n   * const { Connection } = require('tedious');\n   *\n   * const config = {\n   *  \"authentication\": {\n   *    ...,\n   *    \"options\": {...}\n   *  },\n   *  \"options\": {...}\n   * };\n   *\n   * const connection = new Connection(config);\n   * ```\n   *\n   * @param config\n   */\n  constructor(config: ConnectionConfiguration) {\n    super();\n\n    if (typeof config !== 'object' || config === null) {\n      throw new TypeError('The \"config\" argument is required and must be of type Object.');\n    }\n\n    if (typeof config.server !== 'string') {\n      throw new TypeError('The \"config.server\" property is required and must be of type string.');\n    }\n\n    this.fedAuthRequired = false;\n\n    let authentication: InternalConnectionConfig['authentication'];\n    if (config.authentication !== undefined) {\n      if (typeof config.authentication !== 'object' || config.authentication === null) {\n        throw new TypeError('The \"config.authentication\" property must be of type Object.');\n      }\n\n      const type = config.authentication.type;\n      const options = config.authentication.options === undefined ? {} : config.authentication.options;\n\n      if (typeof type !== 'string') {\n        throw new TypeError('The \"config.authentication.type\" property must be of type string.');\n      }\n\n      if (type !== 'default' && type !== 'ntlm' && type !== 'azure-active-directory-password' && type !== 'azure-active-directory-access-token' && type !== 'azure-active-directory-msi-vm' && type !== 'azure-active-directory-msi-app-service' && type !== 'azure-active-directory-service-principal-secret' && type !== 'azure-active-directory-default') {\n        throw new TypeError('The \"type\" property must one of \"default\", \"ntlm\", \"azure-active-directory-password\", \"azure-active-directory-access-token\", \"azure-active-directory-default\", \"azure-active-directory-msi-vm\" or \"azure-active-directory-msi-app-service\" or \"azure-active-directory-service-principal-secret\".');\n      }\n\n      if (typeof options !== 'object' || options === null) {\n        throw new TypeError('The \"config.authentication.options\" property must be of type object.');\n      }\n\n      if (type === 'ntlm') {\n        if (typeof options.domain !== 'string') {\n          throw new TypeError('The \"config.authentication.options.domain\" property must be of type string.');\n        }\n\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'ntlm',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain && options.domain.toUpperCase()\n          }\n        };\n      } else if (type === 'azure-active-directory-password') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        if (options.tenantId !== undefined && typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-password',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            tenantId: options.tenantId,\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-access-token') {\n        if (typeof options.token !== 'string') {\n          throw new TypeError('The \"config.authentication.options.token\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-access-token',\n          options: {\n            token: options.token\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-vm') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-vm',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-default') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-default',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-app-service') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-app-service',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-service-principal-secret') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (typeof options.clientSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientSecret\" property must be of type string.');\n        }\n\n        if (typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-service-principal-secret',\n          options: {\n            clientId: options.clientId,\n            clientSecret: options.clientSecret,\n            tenantId: options.tenantId\n          }\n        };\n      } else {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'default',\n          options: {\n            userName: options.userName,\n            password: options.password\n          }\n        };\n      }\n    } else {\n      authentication = {\n        type: 'default',\n        options: {\n          userName: undefined,\n          password: undefined\n        }\n      };\n    }\n\n    this.config = {\n      server: config.server,\n      authentication: authentication,\n      options: {\n        abortTransactionOnError: false,\n        appName: undefined,\n        camelCaseColumns: false,\n        cancelTimeout: DEFAULT_CANCEL_TIMEOUT,\n        columnEncryptionKeyCacheTTL: 2 * 60 * 60 * 1000,  // Units: miliseconds\n        columnEncryptionSetting: false,\n        columnNameReplacer: undefined,\n        connectionRetryInterval: DEFAULT_CONNECT_RETRY_INTERVAL,\n        connectTimeout: DEFAULT_CONNECT_TIMEOUT,\n        connectionIsolationLevel: ISOLATION_LEVEL.READ_COMMITTED,\n        cryptoCredentialsDetails: {},\n        database: undefined,\n        datefirst: DEFAULT_DATEFIRST,\n        dateFormat: DEFAULT_DATEFORMAT,\n        debug: {\n          data: false,\n          packet: false,\n          payload: false,\n          token: false\n        },\n        enableAnsiNull: true,\n        enableAnsiNullDefault: true,\n        enableAnsiPadding: true,\n        enableAnsiWarnings: true,\n        enableArithAbort: true,\n        enableConcatNullYieldsNull: true,\n        enableCursorCloseOnCommit: null,\n        enableImplicitTransactions: false,\n        enableNumericRoundabort: false,\n        enableQuotedIdentifier: true,\n        encrypt: true,\n        fallbackToDefaultDb: false,\n        encryptionKeyStoreProviders: undefined,\n        instanceName: undefined,\n        isolationLevel: ISOLATION_LEVEL.READ_COMMITTED,\n        language: DEFAULT_LANGUAGE,\n        localAddress: undefined,\n        maxRetriesOnTransientErrors: 3,\n        multiSubnetFailover: false,\n        packetSize: DEFAULT_PACKET_SIZE,\n        port: DEFAULT_PORT,\n        readOnlyIntent: false,\n        requestTimeout: DEFAULT_CLIENT_REQUEST_TIMEOUT,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        serverName: undefined,\n        serverSupportsColumnEncryption: false,\n        tdsVersion: DEFAULT_TDS_VERSION,\n        textsize: DEFAULT_TEXTSIZE,\n        trustedServerNameAE: undefined,\n        trustServerCertificate: false,\n        useColumnNames: false,\n        useUTC: true,\n        workstationId: undefined,\n        lowerCaseGuids: false\n      }\n    };\n\n    if (config.options) {\n      if (config.options.port && config.options.instanceName) {\n        throw new Error('Port and instanceName are mutually exclusive, but ' + config.options.port + ' and ' + config.options.instanceName + ' provided');\n      }\n\n      if (config.options.abortTransactionOnError !== undefined) {\n        if (typeof config.options.abortTransactionOnError !== 'boolean' && config.options.abortTransactionOnError !== null) {\n          throw new TypeError('The \"config.options.abortTransactionOnError\" property must be of type string or null.');\n        }\n\n        this.config.options.abortTransactionOnError = config.options.abortTransactionOnError;\n      }\n\n      if (config.options.appName !== undefined) {\n        if (typeof config.options.appName !== 'string') {\n          throw new TypeError('The \"config.options.appName\" property must be of type string.');\n        }\n\n        this.config.options.appName = config.options.appName;\n      }\n\n      if (config.options.camelCaseColumns !== undefined) {\n        if (typeof config.options.camelCaseColumns !== 'boolean') {\n          throw new TypeError('The \"config.options.camelCaseColumns\" property must be of type boolean.');\n        }\n\n        this.config.options.camelCaseColumns = config.options.camelCaseColumns;\n      }\n\n      if (config.options.cancelTimeout !== undefined) {\n        if (typeof config.options.cancelTimeout !== 'number') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type number.');\n        }\n\n        this.config.options.cancelTimeout = config.options.cancelTimeout;\n      }\n\n      if (config.options.columnNameReplacer) {\n        if (typeof config.options.columnNameReplacer !== 'function') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type function.');\n        }\n\n        this.config.options.columnNameReplacer = config.options.columnNameReplacer;\n      }\n\n      if (config.options.connectionIsolationLevel !== undefined) {\n        assertValidIsolationLevel(config.options.connectionIsolationLevel, 'config.options.connectionIsolationLevel');\n\n        this.config.options.connectionIsolationLevel = config.options.connectionIsolationLevel;\n      }\n\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n\n        this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n\n      if (config.options.cryptoCredentialsDetails !== undefined) {\n        if (typeof config.options.cryptoCredentialsDetails !== 'object' || config.options.cryptoCredentialsDetails === null) {\n          throw new TypeError('The \"config.options.cryptoCredentialsDetails\" property must be of type Object.');\n        }\n\n        this.config.options.cryptoCredentialsDetails = config.options.cryptoCredentialsDetails;\n      }\n\n      if (config.options.database !== undefined) {\n        if (typeof config.options.database !== 'string') {\n          throw new TypeError('The \"config.options.database\" property must be of type string.');\n        }\n\n        this.config.options.database = config.options.database;\n      }\n\n      if (config.options.datefirst !== undefined) {\n        if (typeof config.options.datefirst !== 'number' && config.options.datefirst !== null) {\n          throw new TypeError('The \"config.options.datefirst\" property must be of type number.');\n        }\n\n        if (config.options.datefirst !== null && (config.options.datefirst < 1 || config.options.datefirst > 7)) {\n          throw new RangeError('The \"config.options.datefirst\" property must be >= 1 and <= 7');\n        }\n\n        this.config.options.datefirst = config.options.datefirst;\n      }\n\n      if (config.options.dateFormat !== undefined) {\n        if (typeof config.options.dateFormat !== 'string' && config.options.dateFormat !== null) {\n          throw new TypeError('The \"config.options.dateFormat\" property must be of type string or null.');\n        }\n\n        this.config.options.dateFormat = config.options.dateFormat;\n      }\n\n      if (config.options.debug) {\n        if (config.options.debug.data !== undefined) {\n          if (typeof config.options.debug.data !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.data\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.data = config.options.debug.data;\n        }\n\n        if (config.options.debug.packet !== undefined) {\n          if (typeof config.options.debug.packet !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.packet\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.packet = config.options.debug.packet;\n        }\n\n        if (config.options.debug.payload !== undefined) {\n          if (typeof config.options.debug.payload !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.payload\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.payload = config.options.debug.payload;\n        }\n\n        if (config.options.debug.token !== undefined) {\n          if (typeof config.options.debug.token !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.token\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.token = config.options.debug.token;\n        }\n      }\n\n      if (config.options.enableAnsiNull !== undefined) {\n        if (typeof config.options.enableAnsiNull !== 'boolean' && config.options.enableAnsiNull !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNull = config.options.enableAnsiNull;\n      }\n\n      if (config.options.enableAnsiNullDefault !== undefined) {\n        if (typeof config.options.enableAnsiNullDefault !== 'boolean' && config.options.enableAnsiNullDefault !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNullDefault\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNullDefault = config.options.enableAnsiNullDefault;\n      }\n\n      if (config.options.enableAnsiPadding !== undefined) {\n        if (typeof config.options.enableAnsiPadding !== 'boolean' && config.options.enableAnsiPadding !== null) {\n          throw new TypeError('The \"config.options.enableAnsiPadding\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiPadding = config.options.enableAnsiPadding;\n      }\n\n      if (config.options.enableAnsiWarnings !== undefined) {\n        if (typeof config.options.enableAnsiWarnings !== 'boolean' && config.options.enableAnsiWarnings !== null) {\n          throw new TypeError('The \"config.options.enableAnsiWarnings\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiWarnings = config.options.enableAnsiWarnings;\n      }\n\n      if (config.options.enableArithAbort !== undefined) {\n        if (typeof config.options.enableArithAbort !== 'boolean' && config.options.enableArithAbort !== null) {\n          throw new TypeError('The \"config.options.enableArithAbort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableArithAbort = config.options.enableArithAbort;\n      }\n\n      if (config.options.enableConcatNullYieldsNull !== undefined) {\n        if (typeof config.options.enableConcatNullYieldsNull !== 'boolean' && config.options.enableConcatNullYieldsNull !== null) {\n          throw new TypeError('The \"config.options.enableConcatNullYieldsNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableConcatNullYieldsNull = config.options.enableConcatNullYieldsNull;\n      }\n\n      if (config.options.enableCursorCloseOnCommit !== undefined) {\n        if (typeof config.options.enableCursorCloseOnCommit !== 'boolean' && config.options.enableCursorCloseOnCommit !== null) {\n          throw new TypeError('The \"config.options.enableCursorCloseOnCommit\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableCursorCloseOnCommit = config.options.enableCursorCloseOnCommit;\n      }\n\n      if (config.options.enableImplicitTransactions !== undefined) {\n        if (typeof config.options.enableImplicitTransactions !== 'boolean' && config.options.enableImplicitTransactions !== null) {\n          throw new TypeError('The \"config.options.enableImplicitTransactions\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableImplicitTransactions = config.options.enableImplicitTransactions;\n      }\n\n      if (config.options.enableNumericRoundabort !== undefined) {\n        if (typeof config.options.enableNumericRoundabort !== 'boolean' && config.options.enableNumericRoundabort !== null) {\n          throw new TypeError('The \"config.options.enableNumericRoundabort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableNumericRoundabort = config.options.enableNumericRoundabort;\n      }\n\n      if (config.options.enableQuotedIdentifier !== undefined) {\n        if (typeof config.options.enableQuotedIdentifier !== 'boolean' && config.options.enableQuotedIdentifier !== null) {\n          throw new TypeError('The \"config.options.enableQuotedIdentifier\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableQuotedIdentifier = config.options.enableQuotedIdentifier;\n      }\n\n      if (config.options.encrypt !== undefined) {\n        if (typeof config.options.encrypt !== 'boolean') {\n          throw new TypeError('The \"config.options.encrypt\" property must be of type boolean.');\n        }\n\n        this.config.options.encrypt = config.options.encrypt;\n      }\n\n      if (config.options.fallbackToDefaultDb !== undefined) {\n        if (typeof config.options.fallbackToDefaultDb !== 'boolean') {\n          throw new TypeError('The \"config.options.fallbackToDefaultDb\" property must be of type boolean.');\n        }\n\n        this.config.options.fallbackToDefaultDb = config.options.fallbackToDefaultDb;\n      }\n\n      if (config.options.instanceName !== undefined) {\n        if (typeof config.options.instanceName !== 'string') {\n          throw new TypeError('The \"config.options.instanceName\" property must be of type string.');\n        }\n\n        this.config.options.instanceName = config.options.instanceName;\n        this.config.options.port = undefined;\n      }\n\n      if (config.options.isolationLevel !== undefined) {\n        assertValidIsolationLevel(config.options.isolationLevel, 'config.options.isolationLevel');\n\n        this.config.options.isolationLevel = config.options.isolationLevel;\n      }\n\n      if (config.options.language !== undefined) {\n        if (typeof config.options.language !== 'string' && config.options.language !== null) {\n          throw new TypeError('The \"config.options.language\" property must be of type string or null.');\n        }\n\n        this.config.options.language = config.options.language;\n      }\n\n      if (config.options.localAddress !== undefined) {\n        if (typeof config.options.localAddress !== 'string') {\n          throw new TypeError('The \"config.options.localAddress\" property must be of type string.');\n        }\n\n        this.config.options.localAddress = config.options.localAddress;\n      }\n\n      if (config.options.multiSubnetFailover !== undefined) {\n        if (typeof config.options.multiSubnetFailover !== 'boolean') {\n          throw new TypeError('The \"config.options.multiSubnetFailover\" property must be of type boolean.');\n        }\n\n        this.config.options.multiSubnetFailover = config.options.multiSubnetFailover;\n      }\n\n      if (config.options.packetSize !== undefined) {\n        if (typeof config.options.packetSize !== 'number') {\n          throw new TypeError('The \"config.options.packetSize\" property must be of type number.');\n        }\n\n        this.config.options.packetSize = config.options.packetSize;\n      }\n\n      if (config.options.port !== undefined) {\n        if (typeof config.options.port !== 'number') {\n          throw new TypeError('The \"config.options.port\" property must be of type number.');\n        }\n\n        if (config.options.port <= 0 || config.options.port >= 65536) {\n          throw new RangeError('The \"config.options.port\" property must be > 0 and < 65536');\n        }\n\n        this.config.options.port = config.options.port;\n        this.config.options.instanceName = undefined;\n      }\n\n      if (config.options.readOnlyIntent !== undefined) {\n        if (typeof config.options.readOnlyIntent !== 'boolean') {\n          throw new TypeError('The \"config.options.readOnlyIntent\" property must be of type boolean.');\n        }\n\n        this.config.options.readOnlyIntent = config.options.readOnlyIntent;\n      }\n\n      if (config.options.requestTimeout !== undefined) {\n        if (typeof config.options.requestTimeout !== 'number') {\n          throw new TypeError('The \"config.options.requestTimeout\" property must be of type number.');\n        }\n\n        this.config.options.requestTimeout = config.options.requestTimeout;\n      }\n\n      if (config.options.maxRetriesOnTransientErrors !== undefined) {\n        if (typeof config.options.maxRetriesOnTransientErrors !== 'number') {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be of type number.');\n        }\n\n        if (config.options.maxRetriesOnTransientErrors < 0) {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be equal or greater than 0.');\n        }\n\n        this.config.options.maxRetriesOnTransientErrors = config.options.maxRetriesOnTransientErrors;\n      }\n\n      if (config.options.connectionRetryInterval !== undefined) {\n        if (typeof config.options.connectionRetryInterval !== 'number') {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be of type number.');\n        }\n\n        if (config.options.connectionRetryInterval <= 0) {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be greater than 0.');\n        }\n\n        this.config.options.connectionRetryInterval = config.options.connectionRetryInterval;\n      }\n\n      if (config.options.rowCollectionOnDone !== undefined) {\n        if (typeof config.options.rowCollectionOnDone !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnDone\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnDone = config.options.rowCollectionOnDone;\n      }\n\n      if (config.options.rowCollectionOnRequestCompletion !== undefined) {\n        if (typeof config.options.rowCollectionOnRequestCompletion !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnRequestCompletion\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnRequestCompletion = config.options.rowCollectionOnRequestCompletion;\n      }\n\n      if (config.options.tdsVersion !== undefined) {\n        if (typeof config.options.tdsVersion !== 'string') {\n          throw new TypeError('The \"config.options.tdsVersion\" property must be of type string.');\n        }\n\n        this.config.options.tdsVersion = config.options.tdsVersion;\n      }\n\n      if (config.options.textsize !== undefined) {\n        if (typeof config.options.textsize !== 'number' && config.options.textsize !== null) {\n          throw new TypeError('The \"config.options.textsize\" property must be of type number or null.');\n        }\n\n        if (config.options.textsize > 2147483647) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be greater than 2147483647.');\n        } else if (config.options.textsize < -1) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be smaller than -1.');\n        }\n\n        this.config.options.textsize = config.options.textsize | 0;\n      }\n\n      if (config.options.trustServerCertificate !== undefined) {\n        if (typeof config.options.trustServerCertificate !== 'boolean') {\n          throw new TypeError('The \"config.options.trustServerCertificate\" property must be of type boolean.');\n        }\n\n        this.config.options.trustServerCertificate = config.options.trustServerCertificate;\n      }\n\n      if (config.options.useColumnNames !== undefined) {\n        if (typeof config.options.useColumnNames !== 'boolean') {\n          throw new TypeError('The \"config.options.useColumnNames\" property must be of type boolean.');\n        }\n\n        this.config.options.useColumnNames = config.options.useColumnNames;\n      }\n\n      if (config.options.useUTC !== undefined) {\n        if (typeof config.options.useUTC !== 'boolean') {\n          throw new TypeError('The \"config.options.useUTC\" property must be of type boolean.');\n        }\n\n        this.config.options.useUTC = config.options.useUTC;\n      }\n\n      if (config.options.workstationId !== undefined) {\n        if (typeof config.options.workstationId !== 'string') {\n          throw new TypeError('The \"config.options.workstationId\" property must be of type string.');\n        }\n\n        this.config.options.workstationId = config.options.workstationId;\n      }\n\n      if (config.options.lowerCaseGuids !== undefined) {\n        if (typeof config.options.lowerCaseGuids !== 'boolean') {\n          throw new TypeError('The \"config.options.lowerCaseGuids\" property must be of type boolean.');\n        }\n\n        this.config.options.lowerCaseGuids = config.options.lowerCaseGuids;\n      }\n    }\n\n    this.secureContextOptions = this.config.options.cryptoCredentialsDetails;\n    if (this.secureContextOptions.secureOptions === undefined) {\n      // If the caller has not specified their own `secureOptions`,\n      // we set `SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS` here.\n      // Older SQL Server instances running on older Windows versions have\n      // trouble with the BEAST workaround in OpenSSL.\n      // As BEAST is a browser specific exploit, we can just disable this option here.\n      this.secureContextOptions = Object.create(this.secureContextOptions, {\n        secureOptions: {\n          value: constants.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\n        }\n      });\n    }\n\n    this.debug = this.createDebug();\n    this.inTransaction = false;\n    this.transactionDescriptors = [Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])];\n\n    // 'beginTransaction', 'commitTransaction' and 'rollbackTransaction'\n    // events are utilized to maintain inTransaction property state which in\n    // turn is used in managing transactions. These events are only fired for\n    // TDS version 7.2 and beyond. The properties below are used to emulate\n    // equivalent behavior for TDS versions before 7.2.\n    this.transactionDepth = 0;\n    this.isSqlBatch = false;\n    this.closed = false;\n    this.messageBuffer = Buffer.alloc(0);\n\n    this.curTransientRetryCount = 0;\n    this.transientErrorLookup = new TransientErrorLookup();\n\n    this.state = this.STATE.INITIALIZED;\n\n    this._cancelAfterRequestSent = () => {\n      this.messageIo.sendMessage(TYPE.ATTENTION);\n      this.createCancelTimer();\n    };\n  }\n\n  connect(connectListener?: (err?: Error) => void) {\n    if (this.state !== this.STATE.INITIALIZED) {\n      throw new ConnectionError('`.connect` can not be called on a Connection in `' + this.state.name + '` state.');\n    }\n\n    if (connectListener) {\n      const onConnect = (err?: Error) => {\n        this.removeListener('error', onError);\n        connectListener(err);\n      };\n\n      const onError = (err: Error) => {\n        this.removeListener('connect', onConnect);\n        connectListener(err);\n      };\n\n      this.once('connect', onConnect);\n      this.once('error', onError);\n    }\n\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n\n  /**\n   * The server has reported that the charset has changed.\n   */\n  on(event: 'charsetChange', listener: (charset: string) => void): this\n\n  /**\n   * The attempt to connect and validate has completed.\n   */\n  on(\n    event: 'connect',\n    /**\n     * @param err If successfully connected, will be falsey. If there was a\n     *   problem (with either connecting or validation), will be an [[Error]] object.\n     */\n    listener: (err: Error | undefined) => void\n  ): this\n\n  /**\n   * The server has reported that the active database has changed.\n   * This may be as a result of a successful login, or a `use` statement.\n   */\n  on(event: 'databaseChange', listener: (databaseName: string) => void): this\n\n  /**\n   * A debug message is available. It may be logged or ignored.\n   */\n  on(event: 'debug', listener: (messageText: string) => void): this\n\n  /**\n   * Internal error occurs.\n   */\n  on(event: 'error', listener: (err: Error) => void): this\n\n  /**\n   * The server has issued an error message.\n   */\n  on(event: 'errorMessage', listener: (message: import('./token/token').ErrorMessageToken) => void): this\n\n  /**\n   * The connection has ended.\n   *\n   * This may be as a result of the client calling [[close]], the server\n   * closing the connection, or a network error.\n   */\n  on(event: 'end', listener: () => void): this\n\n  /**\n   * The server has issued an information message.\n   */\n  on(event: 'infoMessage', listener: (message: import('./token/token').InfoMessageToken) => void): this\n\n  /**\n   * The server has reported that the language has changed.\n   */\n  on(event: 'languageChange', listener: (languageName: string) => void): this\n\n  /**\n   * The connection was reset.\n   */\n  on(event: 'resetConnection', listener: () => void): this\n\n  /**\n   * A secure connection has been established.\n   */\n  on(event: 'secure', listener: (cleartext: import('tls').TLSSocket) => void): this\n\n  on(event: string | symbol, listener: (...args: any[]) => void) {\n    return super.on(event, listener);\n  }\n\n  /**\n   * @private\n   */\n  emit(event: 'charsetChange', charset: string): boolean\n  /**\n   * @private\n   */\n  emit(event: 'connect', error?: Error): boolean\n  /**\n   * @private\n   */\n  emit(event: 'databaseChange', databaseName: string): boolean\n  /**\n   * @private\n   */\n  emit(event: 'debug', messageText: string): boolean\n  /**\n   * @private\n   */\n  emit(event: 'error', error: Error): boolean\n  /**\n   * @private\n   */\n  emit(event: 'errorMessage', message: import('./token/token').ErrorMessageToken): boolean\n  /**\n   * @private\n   */\n  emit(event: 'end'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'infoMessage', message: import('./token/token').InfoMessageToken): boolean\n  /**\n   * @private\n   */\n  emit(event: 'languageChange', languageName: string): boolean\n  /**\n   * @private\n   */\n  emit(event: 'secure', cleartext: import('tls').TLSSocket): boolean\n  /**\n   * @private\n   */\n  emit(event: 'rerouting'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'resetConnection'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'retry'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'rollbackTransaction'): boolean\n\n  emit(event: string | symbol, ...args: any[]) {\n    return super.emit(event, ...args);\n  }\n\n  /**\n   * Closes the connection to the database.\n   *\n   * The [[Event_end]] will be emitted once the connection has been closed.\n   */\n  close() {\n    this.transitionTo(this.STATE.FINAL);\n  }\n\n  /**\n   * @private\n   */\n  initialiseConnection() {\n    const signal = this.createConnectTimer();\n\n    if (this.config.options.port) {\n      return this.connectOnPort(this.config.options.port, this.config.options.multiSubnetFailover, signal);\n    } else {\n      return instanceLookup({\n        server: this.config.server,\n        instanceName: this.config.options.instanceName!,\n        timeout: this.config.options.connectTimeout,\n        signal: signal\n      }).then((port) => {\n        process.nextTick(() => {\n          this.connectOnPort(port, this.config.options.multiSubnetFailover, signal);\n        });\n      }, (err) => {\n        this.clearConnectTimer();\n        if (err.name === 'AbortError') {\n          // Ignore the AbortError for now, this is still handled by the connectTimer firing\n          return;\n        }\n\n        process.nextTick(() => {\n          this.emit('connect', new ConnectionError(err.message, 'EINSTLOOKUP'));\n        });\n      });\n    }\n  }\n\n  /**\n   * @private\n   */\n  cleanupConnection(cleanupType: typeof CLEANUP_TYPE[keyof typeof CLEANUP_TYPE]) {\n    if (!this.closed) {\n      this.clearConnectTimer();\n      this.clearRequestTimer();\n      this.clearRetryTimer();\n      this.closeConnection();\n      if (cleanupType === CLEANUP_TYPE.REDIRECT) {\n        this.emit('rerouting');\n      } else if (cleanupType !== CLEANUP_TYPE.RETRY) {\n        process.nextTick(() => {\n          this.emit('end');\n        });\n      }\n\n      const request = this.request;\n      if (request) {\n        const err = new RequestError('Connection closed before request completed.', 'ECLOSE');\n        request.callback(err);\n        this.request = undefined;\n      }\n\n      this.closed = true;\n      this.loginError = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  createDebug() {\n    const debug = new Debug(this.config.options.debug);\n    debug.on('debug', (message) => {\n      this.emit('debug', message);\n    });\n    return debug;\n  }\n\n  /**\n   * @private\n   */\n  createTokenStreamParser(message: Message, handler: TokenHandler) {\n    return new TokenStreamParser(message, this.debug, handler, this.config.options);\n  }\n\n  connectOnPort(port: number, multiSubnetFailover: boolean, signal: AbortSignal) {\n    const connectOpts = {\n      host: this.routingData ? this.routingData.server : this.config.server,\n      port: this.routingData ? this.routingData.port : port,\n      localAddress: this.config.options.localAddress\n    };\n\n    const connect = multiSubnetFailover ? connectInParallel : connectInSequence;\n\n    connect(connectOpts, dns.lookup, signal).then((socket) => {\n      process.nextTick(() => {\n        socket.on('error', (error) => { this.socketError(error); });\n        socket.on('close', () => { this.socketClose(); });\n        socket.on('end', () => { this.socketEnd(); });\n        socket.setKeepAlive(true, KEEP_ALIVE_INITIAL_DELAY);\n\n        this.messageIo = new MessageIO(socket, this.config.options.packetSize, this.debug);\n        this.messageIo.on('secure', (cleartext) => { this.emit('secure', cleartext); });\n\n        this.socket = socket;\n\n        this.closed = false;\n        this.debug.log('connected to ' + this.config.server + ':' + this.config.options.port);\n\n        this.sendPreLogin();\n        this.transitionTo(this.STATE.SENT_PRELOGIN);\n      });\n    }, (err) => {\n      this.clearConnectTimer();\n      if (err.name === 'AbortError') {\n        return;\n      }\n\n      process.nextTick(() => { this.socketError(err); });\n    });\n  }\n\n  /**\n   * @private\n   */\n  closeConnection() {\n    if (this.socket) {\n      this.socket.destroy();\n    }\n  }\n\n  /**\n   * @private\n   */\n  createConnectTimer() {\n    const controller = new AbortController();\n    this.connectTimer = setTimeout(() => {\n      controller.abort();\n      this.connectTimeout();\n    }, this.config.options.connectTimeout);\n    return controller.signal;\n  }\n\n  /**\n   * @private\n   */\n  createCancelTimer() {\n    this.clearCancelTimer();\n    const timeout = this.config.options.cancelTimeout;\n    if (timeout > 0) {\n      this.cancelTimer = setTimeout(() => {\n        this.cancelTimeout();\n      }, timeout);\n    }\n  }\n\n  /**\n   * @private\n   */\n  createRequestTimer() {\n    this.clearRequestTimer(); // release old timer, just to be safe\n    const request = this.request as Request;\n    const timeout = (request.timeout !== undefined) ? request.timeout : this.config.options.requestTimeout;\n    if (timeout) {\n      this.requestTimer = setTimeout(() => {\n        this.requestTimeout();\n      }, timeout);\n    }\n  }\n\n  /**\n   * @private\n   */\n  createRetryTimer() {\n    this.clearRetryTimer();\n    this.retryTimer = setTimeout(() => {\n      this.retryTimeout();\n    }, this.config.options.connectionRetryInterval);\n  }\n\n  /**\n   * @private\n   */\n  connectTimeout() {\n    const message = `Failed to connect to ${this.config.server}${this.config.options.port ? `:${this.config.options.port}` : `\\\\${this.config.options.instanceName}`} in ${this.config.options.connectTimeout}ms`;\n    this.debug.log(message);\n    this.emit('connect', new ConnectionError(message, 'ETIMEOUT'));\n    this.connectTimer = undefined;\n    this.dispatchEvent('connectTimeout');\n  }\n\n  /**\n   * @private\n   */\n  cancelTimeout() {\n    const message = `Failed to cancel request in ${this.config.options.cancelTimeout}ms`;\n    this.debug.log(message);\n    this.dispatchEvent('socketError', new ConnectionError(message, 'ETIMEOUT'));\n  }\n\n  /**\n   * @private\n   */\n  requestTimeout() {\n    this.requestTimer = undefined;\n    const request = this.request!;\n    request.cancel();\n    const timeout = (request.timeout !== undefined) ? request.timeout : this.config.options.requestTimeout;\n    const message = 'Timeout: Request failed to complete in ' + timeout + 'ms';\n    request.error = new RequestError(message, 'ETIMEOUT');\n  }\n\n  /**\n   * @private\n   */\n  retryTimeout() {\n    this.retryTimer = undefined;\n    this.emit('retry');\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (this.connectTimer) {\n      clearTimeout(this.connectTimer);\n      this.connectTimer = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  clearCancelTimer() {\n    if (this.cancelTimer) {\n      clearTimeout(this.cancelTimer);\n      this.cancelTimer = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimer() {\n    if (this.requestTimer) {\n      clearTimeout(this.requestTimer);\n      this.requestTimer = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  clearRetryTimer() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n      this.retryTimer = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  transitionTo(newState: State) {\n    if (this.state === newState) {\n      this.debug.log('State is already ' + newState.name);\n      return;\n    }\n\n    if (this.state && this.state.exit) {\n      this.state.exit.call(this, newState);\n    }\n\n    this.debug.log('State change: ' + (this.state ? this.state.name : 'undefined') + ' -> ' + newState.name);\n    this.state = newState;\n\n    if (this.state.enter) {\n      this.state.enter.apply(this);\n    }\n  }\n\n  /**\n   * @private\n   */\n  getEventHandler<T extends keyof State['events']>(eventName: T): NonNullable<State['events'][T]> {\n    const handler = this.state.events[eventName];\n\n    if (!handler) {\n      throw new Error(`No event '${eventName}' in state '${this.state.name}'`);\n    }\n\n    return handler!;\n  }\n\n  /**\n   * @private\n   */\n  dispatchEvent<T extends keyof State['events']>(eventName: T, ...args: Parameters<NonNullable<State['events'][T]>>) {\n    const handler = this.state.events[eventName] as ((this: Connection, ...args: any[]) => void) | undefined;\n    if (handler) {\n      handler.apply(this, args);\n    } else {\n      this.emit('error', new Error(`No event '${eventName}' in state '${this.state.name}'`));\n      this.close();\n    }\n  }\n\n  /**\n   * @private\n   */\n  socketError(error: Error) {\n    if (this.state === this.STATE.CONNECTING || this.state === this.STATE.SENT_TLSSSLNEGOTIATION) {\n      const message = `Failed to connect to ${this.config.server}:${this.config.options.port} - ${error.message}`;\n      this.debug.log(message);\n      this.emit('connect', new ConnectionError(message, 'ESOCKET'));\n    } else {\n      const message = `Connection lost - ${error.message}`;\n      this.debug.log(message);\n      this.emit('error', new ConnectionError(message, 'ESOCKET'));\n    }\n    this.dispatchEvent('socketError', error);\n  }\n\n  /**\n   * @private\n   */\n  socketEnd() {\n    this.debug.log('socket ended');\n    if (this.state !== this.STATE.FINAL) {\n      const error: ErrorWithCode = new Error('socket hang up');\n      error.code = 'ECONNRESET';\n      this.socketError(error);\n    }\n  }\n\n  /**\n   * @private\n   */\n  socketClose() {\n    this.debug.log('connection to ' + this.config.server + ':' + this.config.options.port + ' closed');\n    if (this.state === this.STATE.REROUTING) {\n      this.debug.log('Rerouting to ' + this.routingData!.server + ':' + this.routingData!.port);\n\n      this.dispatchEvent('reconnect');\n    } else if (this.state === this.STATE.TRANSIENT_FAILURE_RETRY) {\n      const server = this.routingData ? this.routingData.server : this.config.server;\n      const port = this.routingData ? this.routingData.port : this.config.options.port;\n      this.debug.log('Retry after transient failure connecting to ' + server + ':' + port);\n\n      this.dispatchEvent('retry');\n    } else {\n      this.transitionTo(this.STATE.FINAL);\n    }\n  }\n\n  /**\n   * @private\n   */\n  sendPreLogin() {\n    const [ , major, minor, build ] = /^(\\d+)\\.(\\d+)\\.(\\d+)/.exec(version) ?? [ '0.0.0', '0', '0', '0' ];\n\n    const payload = new PreloginPayload({\n      encrypt: this.config.options.encrypt,\n      version: { major: Number(major), minor: Number(minor), build: Number(build), subbuild: 0 }\n    });\n\n    this.messageIo.sendMessage(TYPE.PRELOGIN, payload.data);\n    this.debug.payload(function() {\n      return payload.toString('  ');\n    });\n  }\n\n  /**\n   * @private\n   */\n  sendLogin7Packet() {\n    const payload = new Login7Payload({\n      tdsVersion: versions[this.config.options.tdsVersion],\n      packetSize: this.config.options.packetSize,\n      clientProgVer: 0,\n      clientPid: process.pid,\n      connectionId: 0,\n      clientTimeZone: new Date().getTimezoneOffset(),\n      clientLcid: 0x00000409\n    });\n\n    const { authentication } = this.config;\n    switch (authentication.type) {\n      case 'azure-active-directory-password':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'default'\n        };\n        break;\n\n      case 'azure-active-directory-access-token':\n        payload.fedAuth = {\n          type: 'SECURITYTOKEN',\n          echo: this.fedAuthRequired,\n          fedAuthToken: authentication.options.token\n        };\n        break;\n\n      case 'azure-active-directory-msi-vm':\n      case 'azure-active-directory-default':\n      case 'azure-active-directory-msi-app-service':\n      case 'azure-active-directory-service-principal-secret':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'integrated'\n        };\n        break;\n\n      case 'ntlm':\n        payload.sspi = createNTLMRequest({ domain: authentication.options.domain });\n        break;\n\n      default:\n        payload.userName = authentication.options.userName;\n        payload.password = authentication.options.password;\n    }\n\n    payload.hostname = this.config.options.workstationId || os.hostname();\n    payload.serverName = this.routingData ? this.routingData.server : this.config.server;\n    payload.appName = this.config.options.appName || 'Tedious';\n    payload.libraryName = libraryName;\n    payload.language = this.config.options.language;\n    payload.database = this.config.options.database;\n    payload.clientId = Buffer.from([1, 2, 3, 4, 5, 6]);\n\n    payload.readOnlyIntent = this.config.options.readOnlyIntent;\n    payload.initDbFatal = !this.config.options.fallbackToDefaultDb;\n\n    this.routingData = undefined;\n    this.messageIo.sendMessage(TYPE.LOGIN7, payload.toBuffer());\n\n    this.debug.payload(function() {\n      return payload.toString('  ');\n    });\n  }\n\n  /**\n   * @private\n   */\n  sendFedAuthTokenMessage(token: string) {\n    const accessTokenLen = Buffer.byteLength(token, 'ucs2');\n    const data = Buffer.alloc(8 + accessTokenLen);\n    let offset = 0;\n    offset = data.writeUInt32LE(accessTokenLen + 4, offset);\n    offset = data.writeUInt32LE(accessTokenLen, offset);\n    data.write(token, offset, 'ucs2');\n    this.messageIo.sendMessage(TYPE.FEDAUTH_TOKEN, data);\n    // sent the fedAuth token message, the rest is similar to standard login 7\n    this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n  }\n\n  /**\n   * @private\n   */\n  sendInitialSql() {\n    const payload = new SqlBatchPayload(this.getInitialSql(), this.currentTransactionDescriptor(), this.config.options);\n\n    const message = new Message({ type: TYPE.SQL_BATCH });\n    this.messageIo.outgoingMessageStream.write(message);\n    Readable.from(payload).pipe(message);\n  }\n\n  /**\n   * @private\n   */\n  getInitialSql() {\n    const options = [];\n\n    if (this.config.options.enableAnsiNull === true) {\n      options.push('set ansi_nulls on');\n    } else if (this.config.options.enableAnsiNull === false) {\n      options.push('set ansi_nulls off');\n    }\n\n    if (this.config.options.enableAnsiNullDefault === true) {\n      options.push('set ansi_null_dflt_on on');\n    } else if (this.config.options.enableAnsiNullDefault === false) {\n      options.push('set ansi_null_dflt_on off');\n    }\n\n    if (this.config.options.enableAnsiPadding === true) {\n      options.push('set ansi_padding on');\n    } else if (this.config.options.enableAnsiPadding === false) {\n      options.push('set ansi_padding off');\n    }\n\n    if (this.config.options.enableAnsiWarnings === true) {\n      options.push('set ansi_warnings on');\n    } else if (this.config.options.enableAnsiWarnings === false) {\n      options.push('set ansi_warnings off');\n    }\n\n    if (this.config.options.enableArithAbort === true) {\n      options.push('set arithabort on');\n    } else if (this.config.options.enableArithAbort === false) {\n      options.push('set arithabort off');\n    }\n\n    if (this.config.options.enableConcatNullYieldsNull === true) {\n      options.push('set concat_null_yields_null on');\n    } else if (this.config.options.enableConcatNullYieldsNull === false) {\n      options.push('set concat_null_yields_null off');\n    }\n\n    if (this.config.options.enableCursorCloseOnCommit === true) {\n      options.push('set cursor_close_on_commit on');\n    } else if (this.config.options.enableCursorCloseOnCommit === false) {\n      options.push('set cursor_close_on_commit off');\n    }\n\n    if (this.config.options.datefirst !== null) {\n      options.push(`set datefirst ${this.config.options.datefirst}`);\n    }\n\n    if (this.config.options.dateFormat !== null) {\n      options.push(`set dateformat ${this.config.options.dateFormat}`);\n    }\n\n    if (this.config.options.enableImplicitTransactions === true) {\n      options.push('set implicit_transactions on');\n    } else if (this.config.options.enableImplicitTransactions === false) {\n      options.push('set implicit_transactions off');\n    }\n\n    if (this.config.options.language !== null) {\n      options.push(`set language ${this.config.options.language}`);\n    }\n\n    if (this.config.options.enableNumericRoundabort === true) {\n      options.push('set numeric_roundabort on');\n    } else if (this.config.options.enableNumericRoundabort === false) {\n      options.push('set numeric_roundabort off');\n    }\n\n    if (this.config.options.enableQuotedIdentifier === true) {\n      options.push('set quoted_identifier on');\n    } else if (this.config.options.enableQuotedIdentifier === false) {\n      options.push('set quoted_identifier off');\n    }\n\n    if (this.config.options.textsize !== null) {\n      options.push(`set textsize ${this.config.options.textsize}`);\n    }\n\n    if (this.config.options.connectionIsolationLevel !== null) {\n      options.push(`set transaction isolation level ${this.getIsolationLevelText(this.config.options.connectionIsolationLevel)}`);\n    }\n\n    if (this.config.options.abortTransactionOnError === true) {\n      options.push('set xact_abort on');\n    } else if (this.config.options.abortTransactionOnError === false) {\n      options.push('set xact_abort off');\n    }\n\n    return options.join('\\n');\n  }\n\n  /**\n   * @private\n   */\n  processedInitialSql() {\n    this.clearConnectTimer();\n    this.emit('connect');\n  }\n\n  /**\n   * Execute the SQL batch represented by [[Request]].\n   * There is no param support, and unlike [[Request.execSql]],\n   * it is not likely that SQL Server will reuse the execution plan it generates for the SQL.\n   *\n   * In almost all cases, [[Request.execSql]] will be a better choice.\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n  execSqlBatch(request: Request) {\n    this.makeRequest(request, TYPE.SQL_BATCH, new SqlBatchPayload(request.sqlTextOrProcedure!, this.currentTransactionDescriptor(), this.config.options));\n  }\n\n  /**\n   *  Execute the SQL represented by [[Request]].\n   *\n   * As `sp_executesql` is used to execute the SQL, if the same SQL is executed multiples times\n   * using this function, the SQL Server query optimizer is likely to reuse the execution plan it generates\n   * for the first execution. This may also result in SQL server treating the request like a stored procedure\n   * which can result in the [[Event_doneInProc]] or [[Event_doneProc]] events being emitted instead of the\n   * [[Event_done]] event you might expect. Using [[execSqlBatch]] will prevent this from occurring but may have a negative performance impact.\n   *\n   * Beware of the way that scoping rules apply, and how they may [affect local temp tables](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)\n   * If you're running in to scoping issues, then [[execSqlBatch]] may be a better choice.\n   * See also [issue #24](https://github.com/pekim/tedious/issues/24)\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n  execSql(request: Request) {\n    try {\n      request.validateParameters(this.databaseCollation);\n    } catch (error: any) {\n      request.error = error;\n\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n\n      return;\n    }\n\n    const parameters: Parameter[] = [];\n\n    parameters.push({\n      type: TYPES.NVarChar,\n      name: 'statement',\n      value: request.sqlTextOrProcedure,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    if (request.parameters.length) {\n      parameters.push({\n        type: TYPES.NVarChar,\n        name: 'params',\n        value: request.makeParamsParameter(request.parameters),\n        output: false,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n\n      parameters.push(...request.parameters);\n    }\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload('sp_executesql', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Creates a new BulkLoad instance.\n   *\n   * @param table The name of the table to bulk-insert into.\n   * @param options A set of bulk load options.\n   */\n  newBulkLoad(table: string, callback: BulkLoadCallback): BulkLoad\n  newBulkLoad(table: string, options: BulkLoadOptions, callback: BulkLoadCallback): BulkLoad\n  newBulkLoad(table: string, callbackOrOptions: BulkLoadOptions | BulkLoadCallback, callback?: BulkLoadCallback) {\n    let options: BulkLoadOptions;\n\n    if (callback === undefined) {\n      callback = callbackOrOptions as BulkLoadCallback;\n      options = {};\n    } else {\n      options = callbackOrOptions as BulkLoadOptions;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('\"options\" argument must be an object');\n    }\n    return new BulkLoad(table, this.databaseCollation, this.config.options, options, callback);\n  }\n\n  /**\n   * Execute a [[BulkLoad]].\n   *\n   * ```js\n   * // We want to perform a bulk load into a table with the following format:\n   * // CREATE TABLE employees (first_name nvarchar(255), last_name nvarchar(255), day_of_birth date);\n   *\n   * const bulkLoad = connection.newBulkLoad('employees', (err, rowCount) => {\n   *   // ...\n   * });\n   *\n   * // First, we need to specify the columns that we want to write to,\n   * // and their definitions. These definitions must match the actual table,\n   * // otherwise the bulk load will fail.\n   * bulkLoad.addColumn('first_name', TYPES.NVarchar, { nullable: false });\n   * bulkLoad.addColumn('last_name', TYPES.NVarchar, { nullable: false });\n   * bulkLoad.addColumn('date_of_birth', TYPES.Date, { nullable: false });\n   *\n   * // Execute a bulk load with a predefined list of rows.\n   * //\n   * // Note that these rows are held in memory until the\n   * // bulk load was performed, so if you need to write a large\n   * // number of rows (e.g. by reading from a CSV file),\n   * // passing an `AsyncIterable` is advisable to keep memory usage low.\n   * connection.execBulkLoad(bulkLoad, [\n   *   { 'first_name': 'Steve', 'last_name': 'Jobs', 'day_of_birth': new Date('02-24-1955') },\n   *   { 'first_name': 'Bill', 'last_name': 'Gates', 'day_of_birth': new Date('10-28-1955') }\n   * ]);\n   * ```\n   *\n   * @param bulkLoad A previously created [[BulkLoad]].\n   * @param rows A [[Iterable]] or [[AsyncIterable]] that contains the rows that should be bulk loaded.\n   */\n  execBulkLoad(bulkLoad: BulkLoad, rows: AsyncIterable<unknown[] | { [columnName: string]: unknown }> | Iterable<unknown[] | { [columnName: string]: unknown }>): void\n\n  execBulkLoad(bulkLoad: BulkLoad, rows?: AsyncIterable<unknown[] | { [columnName: string]: unknown }> | Iterable<unknown[] | { [columnName: string]: unknown }>) {\n    bulkLoad.executionStarted = true;\n\n    if (rows) {\n      if (bulkLoad.streamingMode) {\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that was put in streaming mode.\");\n      }\n\n      if (bulkLoad.firstRowWritten) {\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that already has rows written to it.\");\n      }\n\n      const rowStream = Readable.from(rows);\n\n      // Destroy the packet transform if an error happens in the row stream,\n      // e.g. if an error is thrown from within a generator or stream.\n      rowStream.on('error', (err) => {\n        bulkLoad.rowToPacketTransform.destroy(err);\n      });\n\n      // Destroy the row stream if an error happens in the packet transform,\n      // e.g. if the bulk load is cancelled.\n      bulkLoad.rowToPacketTransform.on('error', (err) => {\n        rowStream.destroy(err);\n      });\n\n      rowStream.pipe(bulkLoad.rowToPacketTransform);\n    } else if (!bulkLoad.streamingMode) {\n      // If the bulkload was not put into streaming mode by the user,\n      // we end the rowToPacketTransform here for them.\n      //\n      // If it was put into streaming mode, it's the user's responsibility\n      // to end the stream.\n      bulkLoad.rowToPacketTransform.end();\n    }\n\n    const onCancel = () => {\n      request.cancel();\n    };\n\n    const payload = new BulkLoadPayload(bulkLoad);\n\n    const request = new Request(bulkLoad.getBulkInsertSql(), (error: (Error & { code?: string }) | null | undefined) => {\n      bulkLoad.removeListener('cancel', onCancel);\n\n      if (error) {\n        if (error.code === 'UNKNOWN') {\n          error.message += ' This is likely because the schema of the BulkLoad does not match the schema of the table you are attempting to insert into.';\n        }\n        bulkLoad.error = error;\n        bulkLoad.callback(error);\n        return;\n      }\n\n      this.makeRequest(bulkLoad, TYPE.BULK_LOAD, payload);\n    });\n\n    bulkLoad.once('cancel', onCancel);\n\n    this.execSqlBatch(request);\n  }\n\n  /**\n   * Prepare the SQL represented by the request.\n   *\n   * The request can then be used in subsequent calls to\n   * [[execute]] and [[unprepare]]\n   *\n   * @param request A [[Request]] object representing the request.\n   *   Parameters only require a name and type. Parameter values are ignored.\n   */\n  prepare(request: Request) {\n    const parameters: Parameter[] = [];\n\n    parameters.push({\n      type: TYPES.Int,\n      name: 'handle',\n      value: undefined,\n      output: true,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    parameters.push({\n      type: TYPES.NVarChar,\n      name: 'params',\n      value: request.parameters.length ? request.makeParamsParameter(request.parameters) : null,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    parameters.push({\n      type: TYPES.NVarChar,\n      name: 'stmt',\n      value: request.sqlTextOrProcedure,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    request.preparing = true;\n    // TODO: We need to clean up this event handler, otherwise this leaks memory\n    request.on('returnValue', (name: string, value: any) => {\n      if (name === 'handle') {\n        request.handle = value;\n      } else {\n        request.error = new RequestError(`Tedious > Unexpected output parameter ${name} from sp_prepare`);\n      }\n    });\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload('sp_prepare', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Release the SQL Server resources associated with a previously prepared request.\n   *\n   * @param request A [[Request]] object representing the request.\n   *   Parameters only require a name and type.\n   *   Parameter values are ignored.\n   */\n  unprepare(request: Request) {\n    const parameters: Parameter[] = [];\n\n    parameters.push({\n      type: TYPES.Int,\n      name: 'handle',\n      // TODO: Abort if `request.handle` is not set\n      value: request.handle,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload('sp_unprepare', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Execute previously prepared SQL, using the supplied parameters.\n   *\n   * @param request A previously prepared [[Request]].\n   * @param parameters  An object whose names correspond to the names of\n   *   parameters that were added to the [[Request]] before it was prepared.\n   *   The object's values are passed as the parameters' values when the\n   *   request is executed.\n   */\n  execute(request: Request, parameters?: { [key: string]: unknown }) {\n    const executeParameters: Parameter[] = [];\n\n    executeParameters.push({\n      type: TYPES.Int,\n      name: 'handle',\n      // TODO: Abort if `request.handle` is not set\n      value: request.handle,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    try {\n      for (let i = 0, len = request.parameters.length; i < len; i++) {\n        const parameter = request.parameters[i];\n\n        executeParameters.push({\n          ...parameter,\n          value: parameter.type.validate(parameters ? parameters[parameter.name] : null, this.databaseCollation)\n        });\n      }\n    } catch (error: any) {\n      request.error = error;\n\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n\n      return;\n    }\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload('sp_execute', executeParameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Call a stored procedure represented by [[Request]].\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n  callProcedure(request: Request) {\n    try {\n      request.validateParameters(this.databaseCollation);\n    } catch (error: any) {\n      request.error = error;\n\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n\n      return;\n    }\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload(request.sqlTextOrProcedure!, request.parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Start a transaction.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`\n   *   is present.\n   * @param isolationLevel The isolation level that the transaction is to be run with.\n   *\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   *   * `READ_UNCOMMITTED`\n   *   * `READ_COMMITTED`\n   *   * `REPEATABLE_READ`\n   *   * `SERIALIZABLE`\n   *   * `SNAPSHOT`\n   *\n   *   Optional, and defaults to the Connection's isolation level.\n   */\n  beginTransaction(callback: BeginTransactionCallback, name = '', isolationLevel = this.config.options.isolationLevel) {\n    assertValidIsolationLevel(isolationLevel, 'isolationLevel');\n\n    const transaction = new Transaction(name, isolationLevel);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new Request('SET TRANSACTION ISOLATION LEVEL ' + (transaction.isolationLevelToTSQL()) + ';BEGIN TRAN ' + transaction.name, (err) => {\n        this.transactionDepth++;\n        if (this.transactionDepth === 1) {\n          this.inTransaction = true;\n        }\n        callback(err);\n      }));\n    }\n\n    const request = new Request(undefined, (err) => {\n      return callback(err, this.currentTransactionDescriptor());\n    });\n    return this.makeRequest(request, TYPE.TRANSACTION_MANAGER, transaction.beginPayload(this.currentTransactionDescriptor()));\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`is present.\n   */\n  commitTransaction(callback: CommitTransactionCallback, name = '') {\n    const transaction = new Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new Request('COMMIT TRAN ' + transaction.name, (err) => {\n        this.transactionDepth--;\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n\n        callback(err);\n      }));\n    }\n    const request = new Request(undefined, callback);\n    return this.makeRequest(request, TYPE.TRANSACTION_MANAGER, transaction.commitPayload(this.currentTransactionDescriptor()));\n  }\n\n  /**\n   * Rollback a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string.\n   *   Required when `isolationLevel` is present.\n   */\n  rollbackTransaction(callback: RollbackTransactionCallback, name = '') {\n    const transaction = new Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new Request('ROLLBACK TRAN ' + transaction.name, (err) => {\n        this.transactionDepth--;\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n        callback(err);\n      }));\n    }\n    const request = new Request(undefined, callback);\n    return this.makeRequest(request, TYPE.TRANSACTION_MANAGER, transaction.rollbackPayload(this.currentTransactionDescriptor()));\n  }\n\n  /**\n   * Set a savepoint within a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\\\n   *   Optional, and defaults to an empty string.\n   *   Required when `isolationLevel` is present.\n   */\n  saveTransaction(callback: SaveTransactionCallback, name: string) {\n    const transaction = new Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new Request('SAVE TRAN ' + transaction.name, (err) => {\n        this.transactionDepth++;\n        callback(err);\n      }));\n    }\n    const request = new Request(undefined, callback);\n    return this.makeRequest(request, TYPE.TRANSACTION_MANAGER, transaction.savePayload(this.currentTransactionDescriptor()));\n  }\n\n  /**\n   * Run the given callback after starting a transaction, and commit or\n   * rollback the transaction afterwards.\n   *\n   * This is a helper that employs [[beginTransaction]], [[commitTransaction]],\n   * [[rollbackTransaction]], and [[saveTransaction]] to greatly simplify the\n   * use of database transactions and automatically handle transaction nesting.\n   *\n   * @param cb\n   * @param isolationLevel\n   *   The isolation level that the transaction is to be run with.\n   *\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   *   * `READ_UNCOMMITTED`\n   *   * `READ_COMMITTED`\n   *   * `REPEATABLE_READ`\n   *   * `SERIALIZABLE`\n   *   * `SNAPSHOT`\n   *\n   *   Optional, and defaults to the Connection's isolation level.\n   */\n  transaction(cb: (err: Error | null | undefined, txDone?: <T extends TransactionDoneCallback>(err: Error | null | undefined, done: T, ...args: CallbackParameters<T>) => void) => void, isolationLevel?: typeof ISOLATION_LEVEL[keyof typeof ISOLATION_LEVEL]) {\n    if (typeof cb !== 'function') {\n      throw new TypeError('`cb` must be a function');\n    }\n\n    const useSavepoint = this.inTransaction;\n    const name = '_tedious_' + (crypto.randomBytes(10).toString('hex'));\n    const txDone: <T extends TransactionDoneCallback>(err: Error | null | undefined, done: T, ...args: CallbackParameters<T>) => void = (err, done, ...args) => {\n      if (err) {\n        if (this.inTransaction && this.state === this.STATE.LOGGED_IN) {\n          this.rollbackTransaction((txErr) => {\n            done(txErr || err, ...args);\n          }, name);\n        } else {\n          done(err, ...args);\n        }\n      } else if (useSavepoint) {\n        if (this.config.options.tdsVersion < '7_2') {\n          this.transactionDepth--;\n        }\n        done(null, ...args);\n      } else {\n        this.commitTransaction((txErr) => {\n          done(txErr, ...args);\n        }, name);\n      }\n    };\n\n    if (useSavepoint) {\n      return this.saveTransaction((err) => {\n        if (err) {\n          return cb(err);\n        }\n\n        if (isolationLevel) {\n          return this.execSqlBatch(new Request('SET transaction isolation level ' + this.getIsolationLevelText(isolationLevel), (err) => {\n            return cb(err, txDone);\n          }));\n        } else {\n          return cb(null, txDone);\n        }\n      }, name);\n    } else {\n      return this.beginTransaction((err) => {\n        if (err) {\n          return cb(err);\n        }\n\n        return cb(null, txDone);\n      }, name, isolationLevel);\n    }\n  }\n\n  /**\n   * @private\n   */\n  makeRequest(request: Request | BulkLoad, packetType: number, payload: (Iterable<Buffer> | AsyncIterable<Buffer>) & { toString: (indent?: string) => string }) {\n    if (this.state !== this.STATE.LOGGED_IN) {\n      const message = 'Requests can only be made in the ' + this.STATE.LOGGED_IN.name + ' state, not the ' + this.state.name + ' state';\n      this.debug.log(message);\n      request.callback(new RequestError(message, 'EINVALIDSTATE'));\n    } else if (request.canceled) {\n      process.nextTick(() => {\n        request.callback(new RequestError('Canceled.', 'ECANCEL'));\n      });\n    } else {\n      if (packetType === TYPE.SQL_BATCH) {\n        this.isSqlBatch = true;\n      } else {\n        this.isSqlBatch = false;\n      }\n\n      this.request = request;\n      request.connection! = this;\n      request.rowCount! = 0;\n      request.rows! = [];\n      request.rst! = [];\n\n      const onCancel = () => {\n        payloadStream.unpipe(message);\n        payloadStream.destroy(new RequestError('Canceled.', 'ECANCEL'));\n\n        // set the ignore bit and end the message.\n        message.ignore = true;\n        message.end();\n\n        if (request instanceof Request && request.paused) {\n          // resume the request if it was paused so we can read the remaining tokens\n          request.resume();\n        }\n      };\n\n      request.once('cancel', onCancel);\n\n      this.createRequestTimer();\n\n      const message = new Message({ type: packetType, resetConnection: this.resetConnectionOnNextRequest });\n      this.messageIo.outgoingMessageStream.write(message);\n      this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n\n      message.once('finish', () => {\n        request.removeListener('cancel', onCancel);\n        request.once('cancel', this._cancelAfterRequestSent);\n\n        this.resetConnectionOnNextRequest = false;\n        this.debug.payload(function() {\n          return payload!.toString('  ');\n        });\n      });\n\n      const payloadStream = Readable.from(payload);\n      payloadStream.once('error', (error) => {\n        payloadStream.unpipe(message);\n\n        // Only set a request error if no error was set yet.\n        request.error ??= error;\n\n        message.ignore = true;\n        message.end();\n      });\n      payloadStream.pipe(message);\n    }\n  }\n\n  /**\n   * Cancel currently executed request.\n   */\n  cancel() {\n    if (!this.request) {\n      return false;\n    }\n\n    if (this.request.canceled) {\n      return false;\n    }\n\n    this.request.cancel();\n    return true;\n  }\n\n  /**\n   * Reset the connection to its initial state.\n   * Can be useful for connection pool implementations.\n   *\n   * @param callback\n   */\n  reset(callback: ResetCallback) {\n    const request = new Request(this.getInitialSql(), (err) => {\n      if (this.config.options.tdsVersion < '7_2') {\n        this.inTransaction = false;\n      }\n      callback(err);\n    });\n    this.resetConnectionOnNextRequest = true;\n    this.execSqlBatch(request);\n  }\n\n  /**\n   * @private\n   */\n  currentTransactionDescriptor() {\n    return this.transactionDescriptors[this.transactionDescriptors.length - 1];\n  }\n\n  /**\n   * @private\n   */\n  getIsolationLevelText(isolationLevel: typeof ISOLATION_LEVEL[keyof typeof ISOLATION_LEVEL]) {\n    switch (isolationLevel) {\n      case ISOLATION_LEVEL.READ_UNCOMMITTED:\n        return 'read uncommitted';\n      case ISOLATION_LEVEL.REPEATABLE_READ:\n        return 'repeatable read';\n      case ISOLATION_LEVEL.SERIALIZABLE:\n        return 'serializable';\n      case ISOLATION_LEVEL.SNAPSHOT:\n        return 'snapshot';\n      default:\n        return 'read committed';\n    }\n  }\n}\n\nfunction isTransientError(error: AggregateError | ConnectionError): boolean {\n  if (error instanceof AggregateError) {\n    error = error.errors[0];\n  }\n  return (error instanceof ConnectionError) && !!error.isTransient;\n}\n\nexport default Connection;\nmodule.exports = Connection;\n\nConnection.prototype.STATE = {\n  INITIALIZED: {\n    name: 'Initialized',\n    events: {}\n  },\n  CONNECTING: {\n    name: 'Connecting',\n    enter: function() {\n      this.initialiseConnection();\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_PRELOGIN: {\n    name: 'SentPrelogin',\n    enter: function() {\n      (async () => {\n        let messageBuffer = Buffer.alloc(0);\n\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n\n        for await (const data of message) {\n          messageBuffer = Buffer.concat([messageBuffer, data]);\n        }\n\n        const preloginPayload = new PreloginPayload(messageBuffer);\n        this.debug.payload(function() {\n          return preloginPayload.toString('  ');\n        });\n\n        if (preloginPayload.fedAuthRequired === 1) {\n          this.fedAuthRequired = true;\n        }\n\n        if (preloginPayload.encryptionString === 'ON' || preloginPayload.encryptionString === 'REQ') {\n          if (!this.config.options.encrypt) {\n            this.emit('connect', new ConnectionError(\"Server requires encryption, set 'encrypt' config option to true.\", 'EENCRYPT'));\n            return this.close();\n          }\n\n          try {\n            this.transitionTo(this.STATE.SENT_TLSSSLNEGOTIATION);\n            await this.messageIo.startTls(this.secureContextOptions, this.routingData?.server ?? this.config.server, this.config.options.trustServerCertificate);\n          } catch (err: any) {\n            return this.socketError(err);\n          }\n        }\n\n        this.sendLogin7Packet();\n\n        const { authentication } = this.config;\n\n        switch (authentication.type) {\n          case 'azure-active-directory-password':\n          case 'azure-active-directory-msi-vm':\n          case 'azure-active-directory-msi-app-service':\n          case 'azure-active-directory-service-principal-secret':\n          case 'azure-active-directory-default':\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_FEDAUTH);\n            break;\n          case 'ntlm':\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\n            break;\n          default:\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n            break;\n        }\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  REROUTING: {\n    name: 'ReRouting',\n    enter: function() {\n      this.cleanupConnection(CLEANUP_TYPE.REDIRECT);\n    },\n    events: {\n      message: function() {\n      },\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      reconnect: function() {\n        this.transitionTo(this.STATE.CONNECTING);\n      }\n    }\n  },\n  TRANSIENT_FAILURE_RETRY: {\n    name: 'TRANSIENT_FAILURE_RETRY',\n    enter: function() {\n      this.curTransientRetryCount++;\n      this.cleanupConnection(CLEANUP_TYPE.RETRY);\n    },\n    events: {\n      message: function() {\n      },\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      retry: function() {\n        this.createRetryTimer();\n      }\n    }\n  },\n  SENT_TLSSSLNEGOTIATION: {\n    name: 'SentTLSSSLNegotiation',\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_STANDARD_LOGIN: {\n    name: 'SentLogin7WithStandardLogin',\n    enter: function() {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n\n        const handler = new Login7TokenHandler(this);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n\n        await once(tokenStreamParser, 'end');\n\n        if (handler.loginAckReceived) {\n          if (handler.routingData) {\n            this.routingData = handler.routingData;\n            this.transitionTo(this.STATE.REROUTING);\n          } else {\n            this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n          }\n        } else if (this.loginError) {\n          if (isTransientError(this.loginError)) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', new ConnectionError('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_NTLM: {\n    name: 'SentLogin7WithNTLMLogin',\n    enter: function() {\n      (async () => {\n        while (true) {\n          let message;\n          try {\n            message = await this.messageIo.readMessage();\n          } catch (err: any) {\n            return this.socketError(err);\n          }\n\n          const handler = new Login7TokenHandler(this);\n          const tokenStreamParser = this.createTokenStreamParser(message, handler);\n\n          await once(tokenStreamParser, 'end');\n\n          if (handler.loginAckReceived) {\n            if (handler.routingData) {\n              this.routingData = handler.routingData;\n              return this.transitionTo(this.STATE.REROUTING);\n            } else {\n              return this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n            }\n          } else if (this.ntlmpacket) {\n            const authentication = this.config.authentication as NtlmAuthentication;\n\n            const payload = new NTLMResponsePayload({\n              domain: authentication.options.domain,\n              userName: authentication.options.userName,\n              password: authentication.options.password,\n              ntlmpacket: this.ntlmpacket\n            });\n\n            this.messageIo.sendMessage(TYPE.NTLMAUTH_PKT, payload.data);\n            this.debug.payload(function() {\n              return payload.toString('  ');\n            });\n\n            this.ntlmpacket = undefined;\n          } else if (this.loginError) {\n            if (isTransientError(this.loginError)) {\n              this.debug.log('Initiating retry on transient error');\n              return this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n            } else {\n              this.emit('connect', this.loginError);\n              return this.transitionTo(this.STATE.FINAL);\n            }\n          } else {\n            this.emit('connect', new ConnectionError('Login failed.', 'ELOGIN'));\n            return this.transitionTo(this.STATE.FINAL);\n          }\n        }\n\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_FEDAUTH: {\n    name: 'SentLogin7Withfedauth',\n    enter: function() {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n\n        const handler = new Login7TokenHandler(this);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n        await once(tokenStreamParser, 'end');\n        if (handler.loginAckReceived) {\n          if (handler.routingData) {\n            this.routingData = handler.routingData;\n            this.transitionTo(this.STATE.REROUTING);\n          } else {\n            this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n          }\n\n          return;\n        }\n\n        const fedAuthInfoToken = handler.fedAuthInfoToken;\n\n        if (fedAuthInfoToken && fedAuthInfoToken.stsurl && fedAuthInfoToken.spn) {\n          const authentication = this.config.authentication as AzureActiveDirectoryPasswordAuthentication | AzureActiveDirectoryMsiVmAuthentication | AzureActiveDirectoryMsiAppServiceAuthentication | AzureActiveDirectoryServicePrincipalSecret | AzureActiveDirectoryDefaultAuthentication;\n          const tokenScope = new URL('/.default', fedAuthInfoToken.spn).toString();\n\n          let credentials;\n\n          switch (authentication.type) {\n            case 'azure-active-directory-password':\n              credentials = new UsernamePasswordCredential(\n                authentication.options.tenantId ?? 'common',\n                authentication.options.clientId,\n                authentication.options.userName,\n                authentication.options.password\n              );\n              break;\n            case 'azure-active-directory-msi-vm':\n            case 'azure-active-directory-msi-app-service':\n              const msiArgs = authentication.options.clientId ? [authentication.options.clientId, {}] : [{}];\n              credentials = new ManagedIdentityCredential(...msiArgs);\n              break;\n            case 'azure-active-directory-default':\n              const args = authentication.options.clientId ? { managedIdentityClientId: authentication.options.clientId } : {};\n              credentials = new DefaultAzureCredential(args);\n              break;\n            case 'azure-active-directory-service-principal-secret':\n              credentials = new ClientSecretCredential(\n                authentication.options.tenantId,\n                authentication.options.clientId,\n                authentication.options.clientSecret\n              );\n              break;\n          }\n\n          let tokenResponse;\n          try {\n            tokenResponse = await credentials.getToken(tokenScope);\n          } catch (err) {\n            this.loginError = new AggregateError(\n              [new ConnectionError('Security token could not be authenticated or authorized.', 'EFEDAUTH'), err]);\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n            return;\n          }\n\n\n          const token = tokenResponse.token;\n          this.sendFedAuthTokenMessage(token);\n\n        } else if (this.loginError) {\n          if (isTransientError(this.loginError)) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', new ConnectionError('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  LOGGED_IN_SENDING_INITIAL_SQL: {\n    name: 'LoggedInSendingInitialSql',\n    enter: function() {\n      (async () => {\n        this.sendInitialSql();\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n        const tokenStreamParser = this.createTokenStreamParser(message, new InitialSqlTokenHandler(this));\n        await once(tokenStreamParser, 'end');\n\n        this.transitionTo(this.STATE.LOGGED_IN);\n        this.processedInitialSql();\n\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  LOGGED_IN: {\n    name: 'LoggedIn',\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_CLIENT_REQUEST: {\n    name: 'SentClientRequest',\n    enter: function() {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n        // request timer is stopped on first data package\n        this.clearRequestTimer();\n\n        const tokenStreamParser = this.createTokenStreamParser(message, new RequestTokenHandler(this, this.request!));\n\n        // If the request was canceled and we have a `cancelTimer`\n        // defined, we send a attention message after the\n        // request message was fully sent off.\n        //\n        // We already started consuming the current message\n        // (but all the token handlers should be no-ops), and\n        // need to ensure the next message is handled by the\n        // `SENT_ATTENTION` state.\n        if (this.request?.canceled && this.cancelTimer) {\n          return this.transitionTo(this.STATE.SENT_ATTENTION);\n        }\n\n        const onResume = () => {\n          tokenStreamParser.resume();\n        };\n        const onPause = () => {\n          tokenStreamParser.pause();\n\n          this.request?.once('resume', onResume);\n        };\n\n        this.request?.on('pause', onPause);\n\n        if (this.request instanceof Request && this.request.paused) {\n          onPause();\n        }\n\n        const onCancel = () => {\n          tokenStreamParser.removeListener('end', onEndOfMessage);\n\n          if (this.request instanceof Request && this.request.paused) {\n            // resume the request if it was paused so we can read the remaining tokens\n            this.request.resume();\n          }\n\n          this.request?.removeListener('pause', onPause);\n          this.request?.removeListener('resume', onResume);\n\n          // The `_cancelAfterRequestSent` callback will have sent a\n          // attention message, so now we need to also switch to\n          // the `SENT_ATTENTION` state to make sure the attention ack\n          // message is processed correctly.\n          this.transitionTo(this.STATE.SENT_ATTENTION);\n        };\n\n        const onEndOfMessage = () => {\n          this.request?.removeListener('cancel', this._cancelAfterRequestSent);\n          this.request?.removeListener('cancel', onCancel);\n          this.request?.removeListener('pause', onPause);\n          this.request?.removeListener('resume', onResume);\n\n          this.transitionTo(this.STATE.LOGGED_IN);\n          const sqlRequest = this.request as Request;\n          this.request = undefined;\n          if (this.config.options.tdsVersion < '7_2' && sqlRequest.error && this.isSqlBatch) {\n            this.inTransaction = false;\n          }\n          sqlRequest.callback(sqlRequest.error, sqlRequest.rowCount, sqlRequest.rows);\n        };\n\n        tokenStreamParser.once('end', onEndOfMessage);\n        this.request?.once('cancel', onCancel);\n      })();\n\n    },\n    exit: function(nextState) {\n      this.clearRequestTimer();\n    },\n    events: {\n      socketError: function(err) {\n        const sqlRequest = this.request!;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  SENT_ATTENTION: {\n    name: 'SentAttention',\n    enter: function() {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n\n        const handler = new AttentionTokenHandler(this, this.request!);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n\n        await once(tokenStreamParser, 'end');\n        // 3.2.5.7 Sent Attention State\n        // Discard any data contained in the response, until we receive the attention response\n        if (handler.attentionReceived) {\n          this.clearCancelTimer();\n\n          const sqlRequest = this.request!;\n          this.request = undefined;\n          this.transitionTo(this.STATE.LOGGED_IN);\n\n          if (sqlRequest.error && sqlRequest.error instanceof RequestError && sqlRequest.error.code === 'ETIMEOUT') {\n            sqlRequest.callback(sqlRequest.error);\n          } else {\n            sqlRequest.callback(new RequestError('Canceled.', 'ECANCEL'));\n          }\n        }\n\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function(err) {\n        const sqlRequest = this.request!;\n        this.request = undefined;\n\n        this.transitionTo(this.STATE.FINAL);\n\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  FINAL: {\n    name: 'Final',\n    enter: function() {\n      this.cleanupConnection(CLEANUP_TYPE.NORMAL);\n    },\n    events: {\n      connectTimeout: function() {\n        // Do nothing, as the timer should be cleaned up.\n      },\n      message: function() {\n        // Do nothing\n      },\n      socketError: function() {\n        // Do nothing\n      }\n    }\n  }\n};\n"],"mappings":";;;;;;AAAA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,GAAA,GAAAF,sBAAA,CAAAC,OAAA;AAEA,IAAAE,IAAA,GAAAH,sBAAA,CAAAC,OAAA;AAEA,IAAAG,UAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAGA,IAAAI,OAAA,GAAAJ,OAAA;AAEA,IAAAK,SAAA,GAAAL,OAAA;AAOA,IAAAM,SAAA,GAAAP,sBAAA,CAAAC,OAAA;AACA,IAAAO,MAAA,GAAAR,sBAAA,CAAAC,OAAA;AACA,IAAAQ,OAAA,GAAAR,OAAA;AACA,IAAAS,eAAA,GAAAT,OAAA;AACA,IAAAU,qBAAA,GAAAV,OAAA;AACA,IAAAW,OAAA,GAAAX,OAAA;AACA,IAAAY,gBAAA,GAAAb,sBAAA,CAAAC,OAAA;AACA,IAAAa,cAAA,GAAAd,sBAAA,CAAAC,OAAA;AACA,IAAAc,YAAA,GAAAf,sBAAA,CAAAC,OAAA;AACA,IAAAe,QAAA,GAAAhB,sBAAA,CAAAC,OAAA;AACA,IAAAgB,kBAAA,GAAAjB,sBAAA,CAAAC,OAAA;AACA,IAAAiB,gBAAA,GAAAlB,sBAAA,CAAAC,OAAA;AACA,IAAAkB,UAAA,GAAAnB,sBAAA,CAAAC,OAAA;AACA,IAAAmB,kBAAA,GAAAnB,OAAA;AACA,IAAAoB,YAAA,GAAApB,OAAA;AACA,IAAAqB,OAAA,GAAArB,OAAA;AACA,IAAAsB,UAAA,GAAAtB,OAAA;AACA,IAAAuB,QAAA,GAAAvB,OAAA;AACA,IAAAwB,YAAA,GAAAxB,OAAA;AACA,IAAAyB,QAAA,GAAA1B,sBAAA,CAAAC,OAAA;AAEA,IAAA0B,KAAA,GAAA1B,OAAA;AAGA,IAAA2B,oBAAA,GAAA3B,OAAA;AACA,IAAA4B,SAAA,GAAA5B,OAAA;AACA,IAAA6B,gBAAA,GAAA7B,OAAA;AAGA,IAAA8B,iBAAA,GAAA/B,sBAAA,CAAAC,OAAA;AACA,IAAA+B,QAAA,GAAA/B,OAAA;AACA,IAAAgC,IAAA,GAAAhC,OAAA;AACA,IAAAiC,QAAA,GAAAjC,OAAA;;;;;;;AAoGA;AACA;AACA;AACA,MAAMkC,wBAAwB,GAAG,KAAK,IAAtC;AACA;AACA;AACA;;AACA,MAAMC,uBAAuB,GAAG,KAAK,IAArC;AACA;AACA;AACA;;AACA,MAAMC,8BAA8B,GAAG,KAAK,IAA5C;AACA;AACA;AACA;;AACA,MAAMC,sBAAsB,GAAG,IAAI,IAAnC;AACA;AACA;AACA;;AACA,MAAMC,8BAA8B,GAAG,GAAvC;AACA;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAG,IAAI,IAAhC;AACA;AACA;AACA;;AACA,MAAMC,gBAAgB,GAAG,UAAzB;AACA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAG,CAA1B;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,IAArB;AACA;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAG,KAA5B;AACA;AACA;AACA;;AACA,MAAMC,gBAAgB,GAAG,YAAzB;AACA;AACA;AACA;;AACA,MAAMC,kBAAkB,GAAG,KAA3B;;AAwoBA;AACA;AACA;AACA,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,CADW;EAEnBC,QAAQ,EAAE,CAFS;EAGnBC,KAAK,EAAE;AAHY,CAArB;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAN,SAAyB1C,OAAA,CAAA2C,YAAzB,CAAsC;EACpC;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAuBE;AACF;AACA;;EAGE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAGE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAGE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAG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"},"metadata":{},"sourceType":"script","externalDependencies":[]}