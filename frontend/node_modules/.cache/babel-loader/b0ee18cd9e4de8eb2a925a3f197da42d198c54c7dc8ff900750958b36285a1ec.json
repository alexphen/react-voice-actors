{"ast":null,"code":"// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst constants = require(\"../constants.js\");\nconst errors = require(\"../../../errors.js\");\n\n/**\n *\n * Base class for all the RPC messages to support encode/decode functions\n */\nclass Message {\n  constructor(connection) {\n    this.errorInfo = {};\n    this.connection = connection;\n    this.messageType = constants.TNS_MSG_TYPE_FUNCTION;\n    this.functionCode = 0;\n    this.callStatus = 0;\n    this.flushOutBinds = false;\n    this.endToEndSeqNum = 0;\n    this.errorOccurred = false;\n    this.isWarning = false;\n    this.flushOutBinds = false;\n    this.processedError = false;\n  }\n  preProcess() {}\n  async postProcess() {}\n  writeFunctionHeader(buf) {\n    buf.writeUInt8(this.messageType);\n    buf.writeUInt8(this.functionCode);\n    buf.writeSeqNum();\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1_EXT_1) {\n      buf.writeUB8(0); // token number\n    }\n  }\n\n  processErrorInfo(buf) {\n    this.callStatus = buf.readUB4(); // end of call status\n    buf.skipUB2(); // end to end seq number\n    buf.skipUB4(); // current row number\n    buf.skipUB2(); // error number\n    buf.skipUB2(); // array elem error\n    buf.skipUB2(); // array elem error\n    this.errorInfo.cursorId = buf.readUB2(); // cursor id\n    this.errorInfo.pos = buf.readUB2(); // error position\n    buf.skipUB1(); // sql type\n    buf.skipUB1(); // fatal ?\n    buf.skipUB2(); // flags\n    buf.skipUB2(); // user cursor options\n    buf.skipUB1(); // UPI parameter\n    buf.skipUB1(); // warning flag\n    this.errorInfo.rowID = buf.readRowID(); // rowid\n    buf.skipUB4(); // OS error\n    buf.skipUB1(); // statement error\n    buf.skipUB1(); // call number\n    buf.skipUB2(); // padding\n    buf.skipUB4(); // success iters\n    const numBytes = buf.readUB4(); // oerrdd (logical rowid)\n    if (numBytes > 0) {\n      buf.skipBytesChunked();\n    }\n    // batch error codes\n    let numEntries = buf.readUB2(); // batch error codes array\n    if (numEntries > 0) {\n      this.errorInfo.batchErrors = [];\n      const firstByte = buf.readUInt8();\n      for (let i = 0; i < numEntries; i++) {\n        if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n          buf.skipUB4(); // chunk length ignored\n        }\n\n        const errorCode = buf.readUB2();\n        this.errorInfo.batchErrors.push(new Error(errorCode));\n      }\n      if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n        buf.skipBytes(1); // ignore end marker\n      }\n    }\n\n    // batch error offset\n    numEntries = buf.readUB2(); // batch error row offset array\n    if (numEntries > 0) {\n      const firstByte = buf.readUInt8();\n      for (let i = 0; i < numEntries; i++) {\n        if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n          buf.skipUB4(); // chunk length ignored\n        }\n\n        this.errorInfo.batchErrors[i].offset = buf.readUB4();\n      }\n      if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n        buf.skipBytes(1); // ignore end marker\n      }\n    }\n\n    // batch error messages\n    numEntries = buf.readUB2(); // batch error messages array\n    if (numEntries > 0) {\n      buf.skipBytes(1); // ignore packed size\n      for (let i = 0; i < numEntries; i++) {\n        buf.skipUB2(); // skip chunk length\n\n        this.errorInfo.batchErrors[i].message = buf.readStr(constants.CSFRM_IMPLICIT);\n        buf.skipBytes(2); // ignore end marker\n      }\n    }\n\n    this.errorInfo.num = buf.readUB4(); // error number (extended)\n    this.errorInfo.rowCount = buf.readUB8(); // row number (extended)\n    if (this.errorInfo.num !== 0) {\n      this.errorOccurred = true;\n      this.errorInfo.message = buf.readStr(constants.CSFRM_IMPLICIT);\n      /*\n       * Remove ending newline from ORA error message\n       */\n      this.errorInfo.message = this.errorInfo.message.replace(/\\n+$/, \"\");\n    }\n    this.errorInfo.isWarning = false;\n    this.processedError = true;\n  }\n  processReturnParameter() {}\n  processWarningInfo(buf) {\n    this.errorInfo.num = buf.readUB2(); // error number\n    const numBytes = buf.readUB2(); // length of error message\n    buf.skipUB2(); // flags\n    if (this.errorInfo.num != 0 && numBytes > 0) {\n      this.errorInfo.message = buf.readStr(constants.CSFRM_IMPLICIT);\n    }\n    this.errorInfo.isWarning = true;\n  }\n  hasMoreData(buf) {\n    return buf.numBytesLeft() > 0 && !this.flushOutBinds;\n  }\n  decode(buf) {\n    this.process(buf);\n  }\n  process(buf) {\n    this.flushOutBinds = false;\n    this.processedError = false;\n    do {\n      this.savePoint(buf);\n      const messageType = buf.readUInt8();\n      this.processMessage(buf, messageType);\n    } while (this.hasMoreData(buf));\n  }\n  savePoint(buf) {\n    buf.savePoint();\n  }\n  processMessage(buf, messageType) {\n    if (messageType === constants.TNS_MSG_TYPE_ERROR) {\n      this.processErrorInfo(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_WARNING) {\n      this.processWarningInfo(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_STATUS) {\n      this.callStatus = buf.readUB4();\n      this.endToEndSeqNum = buf.readUB2();\n    } else if (messageType === constants.TNS_MSG_TYPE_PARAMETER) {\n      this.processReturnParameter(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_SERVER_SIDE_PIGGYBACK) {\n      this.processServerSidePiggyBack(buf);\n    } else {\n      errors.throwErr(errors.ERR_UNEXPECTED_MESSAGE_TYPE, messageType, buf.pos, buf.packetNum);\n    }\n  }\n  processServerSidePiggyBack(buf) {\n    const opcode = buf.readUInt8();\n    if (opcode === constants.TNS_SERVER_PIGGYBACK_LTXID) {\n      const num_bytes = buf.readUB4();\n      if (num_bytes > 0) {\n        buf.skipBytesChunked();\n      }\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_QUERY_CACHE_INVALIDATION || opcode === constants.TNS_SERVER_PIGGYBACK_TRACE_EVENT) {\n      // pass\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_OS_PID_MTS) {\n      const numDtys = buf.readUB2();\n      buf.skipUB1();\n      buf.skipBytes(numDtys);\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_SYNC) {\n      buf.skipUB2(); // skip number of DTYs\n      buf.skipUB1(); // skip length of DTYs\n      const num_elements = buf.readUB4();\n      buf.skipBytes(1); // skip length\n      for (let i = 0; i < num_elements; i++) {\n        let temp16 = buf.readUB2();\n        if (temp16 > 0) {\n          // skip key\n          buf.skipBytesChunked();\n        }\n        temp16 = buf.readUB2();\n        if (temp16 > 0) {\n          // skip value\n          buf.skipBytesChunked();\n        }\n        buf.skipUB2(); // skip flags\n      }\n\n      buf.skipUB4(); // skip overall flags\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_EXT_SYNC) {\n      buf.skipUB2();\n      buf.skipUB1();\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_AC_REPLAY_CONTEXT) {\n      buf.skipUB2(); // skip number of DTYs\n      buf.skipUB1(); // skip length of DTYs\n      buf.skipUB4(); // skip flags\n      buf.skipUB4(); // skip error code\n      buf.skipUB1(); // skip queue\n      const num_bytes = buf.readUB4(); // skip replay context\n      if (num_bytes > 0) {\n        buf.skipBytesChunked();\n      }\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_SESS_RET) {\n      buf.skipUB2();\n      buf.skipUB1();\n      const num_elements = buf.readUB2();\n      if (num_elements > 0) {\n        buf.skipUB1();\n        for (let i = 0; i < num_elements; ++i) {\n          let temp16 = buf.readUB2();\n          if (temp16 > 0) {\n            // skip key\n            buf.skipBytesChunked();\n          }\n          temp16 = buf.readUB2();\n          if (temp16 > 0) {\n            // skip value\n            buf.skipBytesChunked();\n          }\n          buf.skipUB2(); // skip flags\n        }\n      }\n\n      const flags = buf.readUB4(); // session flags\n      if (flags & constants.TNS_SESSGET_SESSION_CHANGED) {\n        if (this.connection._drcpEstablishSession) {\n          this.connection.resetStatementCache();\n        }\n      }\n      this.connection._drcpEstablishSession = false;\n      buf.skipUB4(); // session id\n      buf.skipUB2(); // serial number\n    } else {\n      errors.throwErr(errors.ERR_UNKOWN_SERVER_SIDE_PIGGYBACK, opcode);\n    }\n  }\n  writePiggybacks(buf) {\n    if (this.connection._currentSchemaModified) {\n      this._writeCurrentSchemaPiggyback(buf);\n    }\n    if (this.connection._cursorsToClose.size > 0 && !this.connection._drcpEstablishSession) {\n      this.writeCloseCursorsPiggyBack(buf);\n    }\n    if (this.connection._actionModified || this.connection._clientIdentifierModified || this.connection._dbopModified || this.connection._clientInfoModified || this.connection._moduleModified) {\n      this._writeEndToEndPiggybacks(buf);\n    }\n    if (this.connection._tempLobsTotalSize > 0) {\n      this.writeCloseTempLobsPiggyback(buf);\n    }\n  }\n  writePiggybackHeader(buf, functionCode) {\n    buf.writeUInt8(constants.TNS_MSG_TYPE_PIGGYBACK);\n    buf.writeUInt8(functionCode);\n    buf.writeSeqNum();\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1_EXT_1) {\n      buf.writeUB8(0); // token number\n    }\n  }\n\n  writeCloseCursorsPiggyBack(buf) {\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_CLOSE_CURSORS);\n    buf.writeUInt8(1);\n    buf.writeUB4(this.connection._cursorsToClose.size);\n    for (const cursorNum of this.connection._cursorsToClose.keys()) {\n      buf.writeUB4(cursorNum);\n    }\n    this.connection._cursorsToClose.clear();\n  }\n  writeCloseTempLobsPiggyback(buf) {\n    const lobsToClose = this.connection._tempLobsToClose;\n    const opCode = constants.TNS_LOB_OP_FREE_TEMP | constants.TNS_LOB_OP_ARRAY;\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_LOB_OP);\n    buf.writeUInt8(1); // pointer\n    buf.writeUB4(this.connection._tempLobsTotalSize);\n    buf.writeUInt8(0); // dest LOB locator\n    buf.writeUB4(0);\n    buf.writeUB4(0); // source LOB locator\n    buf.writeUB4(0);\n    buf.writeUInt8(0); // source LOB offset\n    buf.writeUInt8(0); // dest LOB offset\n    buf.writeUInt8(0); // charset\n    buf.writeUB4(opCode);\n    buf.writeUInt8(0); // scn\n    buf.writeUB4(0); // LOB scn\n    buf.writeUB8(0); // LOB scnl\n    buf.writeUB8(0);\n    buf.writeUInt8(0);\n\n    // array LOB fields\n    buf.writeUInt8(0);\n    buf.writeUB4(0);\n    buf.writeUInt8(0);\n    buf.writeUB4(0);\n    buf.writeUInt8(0);\n    buf.writeUB4(0);\n    for (const val of lobsToClose) {\n      buf.writeBytes(val);\n    }\n\n    // Reset Values\n    this.connection._tempLobsToClose = [];\n    this.connection._tempLobsTotalSize = 0;\n  }\n  _writeCurrentSchemaPiggyback(buf) {\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_SET_SCHEMA);\n    buf.writeUInt8(1);\n    const bytes = Buffer.byteLength(this.connection.currentSchema);\n    buf.writeUB4(bytes);\n    buf.writeBytesWithLength(Buffer.from(this.connection.currentSchema));\n  }\n  _writeEndToEndPiggybacks(buf) {\n    let flags = 0;\n\n    // determine which flags to send\n    if (this.connection._actionModified) {\n      flags |= constants.TNS_END_TO_END_ACTION;\n    }\n    if (this.connection._clientIdentifierModified) {\n      flags |= constants.TNS_END_TO_END_CLIENT_IDENTIFIER;\n    }\n    if (this.connection._clientInfoModified) {\n      flags |= constants.TNS_END_TO_END_CLIENT_INFO;\n    }\n    if (this.connection._moduleModified) {\n      flags |= constants.TNS_END_TO_END_MODULE;\n    }\n    if (this.connection._dbOpModified) {\n      flags |= constants.TNS_END_TO_END_DBOP;\n    }\n\n    // write initial packet data\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_SET_END_TO_END_ATTR);\n    buf.writeUInt8(0); // pointer (cidnam)\n    buf.writeUInt8(0); // pointer (cidser)\n    buf.writeUB4(flags);\n    const clientIdentifierBytes = this.writeEndEndTraceValue(buf, this.connection._clientIdentifier, this.connection._clientIdentifierModified);\n    const moduleBytes = this.writeEndEndTraceValue(buf, this.connection._module, this.connection._moduleModified);\n    const actionBytes = this.writeEndEndTraceValue(buf, this.connection._action, this.connection._actionModified);\n\n    // write unsupported bits\n    buf.writeUInt8(0); // pointer (cideci)\n    buf.writeUB4(0); // length (cideci)\n    buf.writeUInt8(0); // cidcct\n    buf.writeUB4(0); // cidecs\n\n    const clientInfoBytes = this.writeEndEndTraceValue(buf, this.connection._clientInfo, this.connection._clientInfoModified);\n    // write unsupported bits\n    buf.writeUInt8(0); // pointer (cideci)\n    buf.writeUB4(0); // length (cideci)\n    buf.writeUInt8(0); // cidcct\n    buf.writeUB4(0); // cidecs\n    const dbOpBytes = this.writeEndEndTraceValue(buf, this.connection._dbOp, this.connection._dbOpModified);\n\n    // write strings\n    if (this.connection._clientIdentifierModified && this.connection._clientIdentifier) {\n      buf.writeBytesWithLength(clientIdentifierBytes);\n    }\n    if (this.connection._moduleModified && this.connection._module) {\n      buf.writeBytesWithLength(moduleBytes);\n    }\n    if (this.connection._actionModified && this.connection._action) {\n      buf.writeBytesWithLength(actionBytes);\n    }\n    if (this.connection._clientInfoModified && this.connection._clientInfo) {\n      buf.writeBytesWithLength(clientInfoBytes);\n    }\n    if (this.connection._dbOpModified && this.connection._dbOp) {\n      buf.writeBytesWithLength(dbOpBytes);\n    }\n\n    // reset flags and values\n    this.connection._actionModified = false;\n    this.connection._action = \"\";\n    this.connection._clientIdentifierModified = false;\n    this.connection._clientIdentifier = \"\";\n    this.connection._clientInfoModified = false;\n    this.connection._clientInfo = \"\";\n    this.connection._dbOpModified = false;\n    this.connection._dbOp = \"\";\n    this.connection._moduleModified = false;\n    this.connection._module = \"\";\n  }\n  writeEndEndTraceValue(buf, value, modified) {\n    // write client identifier header info\n    let writtenBytes;\n    if (modified) {\n      buf.writeUInt8(1); // pointer (client identifier)\n      if (value) {\n        writtenBytes = Buffer.from(value);\n        buf.writeUB4(writtenBytes.length);\n      } else {\n        buf.writeUB4(0);\n      }\n    } else {\n      buf.writeUInt8(0); // pointer (client identifier)\n      buf.writeUB4(0); // length of client identifier\n    }\n\n    return writtenBytes;\n  }\n\n  // Called when an error is encountered during decode of RPC\n  saveDeferredErr() {\n    if (!this.deferredErr) {\n      this.deferredErr = errors.getErr(...arguments);\n    }\n  }\n}\nmodule.exports = Message;","map":{"version":3,"names":["Buffer","require","constants","errors","Message","constructor","connection","errorInfo","messageType","TNS_MSG_TYPE_FUNCTION","functionCode","callStatus","flushOutBinds","endToEndSeqNum","errorOccurred","isWarning","processedError","preProcess","postProcess","writeFunctionHeader","buf","writeUInt8","writeSeqNum","caps","ttcFieldVersion","TNS_CCAP_FIELD_VERSION_23_1_EXT_1","writeUB8","processErrorInfo","readUB4","skipUB2","skipUB4","cursorId","readUB2","pos","skipUB1","rowID","readRowID","numBytes","skipBytesChunked","numEntries","batchErrors","firstByte","readUInt8","i","TNS_LONG_LENGTH_INDICATOR","errorCode","push","Error","skipBytes","offset","message","readStr","CSFRM_IMPLICIT","num","rowCount","readUB8","replace","processReturnParameter","processWarningInfo","hasMoreData","numBytesLeft","decode","process","savePoint","processMessage","TNS_MSG_TYPE_ERROR","TNS_MSG_TYPE_WARNING","TNS_MSG_TYPE_STATUS","TNS_MSG_TYPE_PARAMETER","TNS_MSG_TYPE_SERVER_SIDE_PIGGYBACK","processServerSidePiggyBack","throwErr","ERR_UNEXPECTED_MESSAGE_TYPE","packetNum","opcode","TNS_SERVER_PIGGYBACK_LTXID","num_bytes","TNS_SERVER_PIGGYBACK_QUERY_CACHE_INVALIDATION","TNS_SERVER_PIGGYBACK_TRACE_EVENT","TNS_SERVER_PIGGYBACK_OS_PID_MTS","numDtys","TNS_SERVER_PIGGYBACK_SYNC","num_elements","temp16","TNS_SERVER_PIGGYBACK_EXT_SYNC","TNS_SERVER_PIGGYBACK_AC_REPLAY_CONTEXT","TNS_SERVER_PIGGYBACK_SESS_RET","flags","TNS_SESSGET_SESSION_CHANGED","_drcpEstablishSession","resetStatementCache","ERR_UNKOWN_SERVER_SIDE_PIGGYBACK","writePiggybacks","_currentSchemaModified","_writeCurrentSchemaPiggyback","_cursorsToClose","size","writeCloseCursorsPiggyBack","_actionModified","_clientIdentifierModified","_dbopModified","_clientInfoModified","_moduleModified","_writeEndToEndPiggybacks","_tempLobsTotalSize","writeCloseTempLobsPiggyback","writePiggybackHeader","TNS_MSG_TYPE_PIGGYBACK","TNS_FUNC_CLOSE_CURSORS","writeUB4","cursorNum","keys","clear","lobsToClose","_tempLobsToClose","opCode","TNS_LOB_OP_FREE_TEMP","TNS_LOB_OP_ARRAY","TNS_FUNC_LOB_OP","val","writeBytes","TNS_FUNC_SET_SCHEMA","bytes","byteLength","currentSchema","writeBytesWithLength","from","TNS_END_TO_END_ACTION","TNS_END_TO_END_CLIENT_IDENTIFIER","TNS_END_TO_END_CLIENT_INFO","TNS_END_TO_END_MODULE","_dbOpModified","TNS_END_TO_END_DBOP","TNS_FUNC_SET_END_TO_END_ATTR","clientIdentifierBytes","writeEndEndTraceValue","_clientIdentifier","moduleBytes","_module","actionBytes","_action","clientInfoBytes","_clientInfo","dbOpBytes","_dbOp","value","modified","writtenBytes","length","saveDeferredErr","deferredErr","getErr","arguments","module","exports"],"sources":["C:/Users/aphen/OneDrive/Documents/GitHub/react-voice-actors/node_modules/oracledb/lib/thin/protocol/messages/base.js"],"sourcesContent":["// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst constants = require(\"../constants.js\");\nconst errors = require(\"../../../errors.js\");\n\n/**\n *\n * Base class for all the RPC messages to support encode/decode functions\n */\nclass Message {\n  constructor(connection) {\n    this.errorInfo = {};\n    this.connection = connection;\n    this.messageType = constants.TNS_MSG_TYPE_FUNCTION;\n    this.functionCode = 0;\n    this.callStatus = 0;\n    this.flushOutBinds = false;\n    this.endToEndSeqNum = 0;\n    this.errorOccurred = false;\n    this.isWarning = false;\n    this.flushOutBinds = false;\n    this.processedError = false;\n  }\n\n  preProcess() { }\n  async postProcess() { }\n\n  writeFunctionHeader(buf) {\n    buf.writeUInt8(this.messageType);\n    buf.writeUInt8(this.functionCode);\n    buf.writeSeqNum();\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1_EXT_1) {\n      buf.writeUB8(0);                          // token number\n    }\n  }\n\n  processErrorInfo(buf) {\n    this.callStatus = buf.readUB4();            // end of call status\n    buf.skipUB2();                              // end to end seq number\n    buf.skipUB4();                              // current row number\n    buf.skipUB2();                              // error number\n    buf.skipUB2();                              // array elem error\n    buf.skipUB2();                              // array elem error\n    this.errorInfo.cursorId = buf.readUB2();    // cursor id\n    this.errorInfo.pos = buf.readUB2();         // error position\n    buf.skipUB1();                              // sql type\n    buf.skipUB1();                              // fatal ?\n    buf.skipUB2();                              // flags\n    buf.skipUB2();                              // user cursor options\n    buf.skipUB1();                              // UPI parameter\n    buf.skipUB1();                              // warning flag\n    this.errorInfo.rowID = buf.readRowID();     // rowid\n    buf.skipUB4();                              // OS error\n    buf.skipUB1();                              // statement error\n    buf.skipUB1();                              // call number\n    buf.skipUB2();                              // padding\n    buf.skipUB4();                              // success iters\n    const numBytes = buf.readUB4();               // oerrdd (logical rowid)\n    if (numBytes > 0) {\n      buf.skipBytesChunked();\n    }\n    // batch error codes\n    let numEntries = buf.readUB2();             // batch error codes array\n    if (numEntries > 0) {\n      this.errorInfo.batchErrors = [];\n      const firstByte = buf.readUInt8();\n      for (let i = 0; i < numEntries; i++) {\n        if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n          buf.skipUB4();                        // chunk length ignored\n        }\n        const errorCode = buf.readUB2();\n        this.errorInfo.batchErrors.push(new Error(errorCode));\n      }\n      if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n        buf.skipBytes(1);                       // ignore end marker\n      }\n    }\n\n    // batch error offset\n    numEntries = buf.readUB2();                 // batch error row offset array\n    if (numEntries > 0) {\n      const firstByte = buf.readUInt8();\n      for (let i = 0; i < numEntries; i++) {\n        if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n          buf.skipUB4();                        // chunk length ignored\n        }\n        this.errorInfo.batchErrors[i].offset = buf.readUB4();\n      }\n      if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n        buf.skipBytes(1);                       // ignore end marker\n      }\n    }\n\n    // batch error messages\n    numEntries = buf.readUB2();                 // batch error messages array\n    if (numEntries > 0) {\n      buf.skipBytes(1);                         // ignore packed size\n      for (let i = 0; i < numEntries; i++) {\n        buf.skipUB2();                          // skip chunk length\n\n        this.errorInfo.batchErrors[i].message = buf.readStr(constants.CSFRM_IMPLICIT);\n        buf.skipBytes(2);                       // ignore end marker\n      }\n    }\n\n    this.errorInfo.num = buf.readUB4();         // error number (extended)\n    this.errorInfo.rowCount = buf.readUB8();    // row number (extended)\n    if (this.errorInfo.num !== 0) {\n      this.errorOccurred = true;\n      this.errorInfo.message = buf.readStr(constants.CSFRM_IMPLICIT);\n      /*\n       * Remove ending newline from ORA error message\n       */\n      this.errorInfo.message = this.errorInfo.message.replace(/\\n+$/, \"\");\n    }\n    this.errorInfo.isWarning = false;\n    this.processedError = true;\n  }\n\n  processReturnParameter() { }\n\n  processWarningInfo(buf) {\n    this.errorInfo.num = buf.readUB2();         // error number\n    const numBytes = buf.readUB2();               // length of error message\n    buf.skipUB2();                              // flags\n    if (this.errorInfo.num != 0 && numBytes > 0) {\n      this.errorInfo.message = buf.readStr(constants.CSFRM_IMPLICIT);\n    }\n    this.errorInfo.isWarning = true;\n  }\n\n  hasMoreData(buf) {\n    return buf.numBytesLeft() > 0 && !this.flushOutBinds;\n  }\n\n  decode(buf) {\n    this.process(buf);\n  }\n\n  process(buf) {\n    this.flushOutBinds = false;\n    this.processedError = false;\n    do {\n      this.savePoint(buf);\n      const messageType = buf.readUInt8();\n      this.processMessage(buf, messageType);\n    } while (this.hasMoreData(buf));\n  }\n\n  savePoint(buf) {\n    buf.savePoint();\n  }\n\n  processMessage(buf, messageType) {\n    if (messageType === constants.TNS_MSG_TYPE_ERROR) {\n      this.processErrorInfo(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_WARNING) {\n      this.processWarningInfo(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_STATUS) {\n      this.callStatus = buf.readUB4();\n      this.endToEndSeqNum = buf.readUB2();\n    } else if (messageType === constants.TNS_MSG_TYPE_PARAMETER) {\n      this.processReturnParameter(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_SERVER_SIDE_PIGGYBACK) {\n      this.processServerSidePiggyBack(buf);\n    } else {\n      errors.throwErr(errors.ERR_UNEXPECTED_MESSAGE_TYPE, messageType, buf.pos, buf.packetNum);\n    }\n  }\n\n  processServerSidePiggyBack(buf) {\n    const opcode = buf.readUInt8();\n    if (opcode === constants.TNS_SERVER_PIGGYBACK_LTXID) {\n      const num_bytes = buf.readUB4();\n      if (num_bytes > 0) {\n        buf.skipBytesChunked();\n      }\n    } else if ((opcode === constants.TNS_SERVER_PIGGYBACK_QUERY_CACHE_INVALIDATION)\n     || (opcode === constants.TNS_SERVER_PIGGYBACK_TRACE_EVENT)) {\n      // pass\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_OS_PID_MTS) {\n      const numDtys = buf.readUB2();\n      buf.skipUB1();\n      buf.skipBytes(numDtys);\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_SYNC) {\n      buf.skipUB2();                            // skip number of DTYs\n      buf.skipUB1();                            // skip length of DTYs\n      const num_elements = buf.readUB4();\n      buf.skipBytes(1);                         // skip length\n      for (let i = 0; i < num_elements; i++) {\n        let temp16 = buf.readUB2();\n        if (temp16 > 0) {                       // skip key\n          buf.skipBytesChunked();\n        }\n        temp16 = buf.readUB2();\n        if (temp16 > 0) {                       // skip value\n          buf.skipBytesChunked();\n        }\n        buf.skipUB2();                          // skip flags\n      }\n      buf.skipUB4();                            // skip overall flags\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_EXT_SYNC) {\n      buf.skipUB2();\n      buf.skipUB1();\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_AC_REPLAY_CONTEXT) {\n      buf.skipUB2();                            // skip number of DTYs\n      buf.skipUB1();                            // skip length of DTYs\n      buf.skipUB4();                            // skip flags\n      buf.skipUB4();                            // skip error code\n      buf.skipUB1();                            // skip queue\n      const num_bytes = buf.readUB4();          // skip replay context\n      if (num_bytes > 0) {\n        buf.skipBytesChunked();\n      }\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_SESS_RET) {\n      buf.skipUB2();\n      buf.skipUB1();\n      const num_elements = buf.readUB2();\n      if (num_elements > 0) {\n        buf.skipUB1();\n        for (let i = 0; i < num_elements; ++i) {\n          let temp16 = buf.readUB2();\n          if (temp16 > 0) {                     // skip key\n            buf.skipBytesChunked();\n          }\n          temp16 = buf.readUB2();\n          if (temp16 > 0) {                     // skip value\n            buf.skipBytesChunked();\n          }\n          buf.skipUB2();                        // skip flags\n        }\n      }\n      const flags = buf.readUB4();              // session flags\n      if (flags & constants.TNS_SESSGET_SESSION_CHANGED) {\n        if (this.connection._drcpEstablishSession) {\n          this.connection.resetStatementCache();\n        }\n      }\n      this.connection._drcpEstablishSession = false;\n      buf.skipUB4();                            // session id\n      buf.skipUB2();                            // serial number\n    } else {\n      errors.throwErr(errors.ERR_UNKOWN_SERVER_SIDE_PIGGYBACK, opcode);\n    }\n  }\n\n  writePiggybacks(buf) {\n    if (this.connection._currentSchemaModified) {\n      this._writeCurrentSchemaPiggyback(buf);\n    }\n    if (this.connection._cursorsToClose.size > 0 && !this.connection._drcpEstablishSession) {\n      this.writeCloseCursorsPiggyBack(buf);\n    }\n    if (\n      this.connection._actionModified ||\n      this.connection._clientIdentifierModified ||\n      this.connection._dbopModified ||\n      this.connection._clientInfoModified ||\n      this.connection._moduleModified\n    ) {\n      this._writeEndToEndPiggybacks(buf);\n    }\n    if (this.connection._tempLobsTotalSize > 0) {\n      this.writeCloseTempLobsPiggyback(buf);\n    }\n  }\n\n  writePiggybackHeader(buf, functionCode) {\n    buf.writeUInt8(constants.TNS_MSG_TYPE_PIGGYBACK);\n    buf.writeUInt8(functionCode);\n    buf.writeSeqNum();\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1_EXT_1) {\n      buf.writeUB8(0);                          // token number\n    }\n  }\n\n  writeCloseCursorsPiggyBack(buf) {\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_CLOSE_CURSORS);\n    buf.writeUInt8(1);\n    buf.writeUB4(this.connection._cursorsToClose.size);\n    for (const cursorNum of this.connection._cursorsToClose.keys()) {\n      buf.writeUB4(cursorNum);\n    }\n    this.connection._cursorsToClose.clear();\n  }\n\n  writeCloseTempLobsPiggyback(buf) {\n    const lobsToClose = this.connection._tempLobsToClose;\n    const opCode = constants.TNS_LOB_OP_FREE_TEMP | constants.TNS_LOB_OP_ARRAY;\n\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_LOB_OP);\n\n    buf.writeUInt8(1); // pointer\n    buf.writeUB4(this.connection._tempLobsTotalSize);\n    buf.writeUInt8(0); // dest LOB locator\n    buf.writeUB4(0);\n    buf.writeUB4(0); // source LOB locator\n    buf.writeUB4(0);\n    buf.writeUInt8(0); // source LOB offset\n    buf.writeUInt8(0); // dest LOB offset\n    buf.writeUInt8(0); // charset\n    buf.writeUB4(opCode);\n    buf.writeUInt8(0); // scn\n    buf.writeUB4(0); // LOB scn\n    buf.writeUB8(0); // LOB scnl\n    buf.writeUB8(0);\n    buf.writeUInt8(0);\n\n    // array LOB fields\n    buf.writeUInt8(0);\n    buf.writeUB4(0);\n    buf.writeUInt8(0);\n    buf.writeUB4(0);\n    buf.writeUInt8(0);\n    buf.writeUB4(0);\n    for (const val of lobsToClose) {\n      buf.writeBytes(val);\n    }\n\n    // Reset Values\n    this.connection._tempLobsToClose = [];\n    this.connection._tempLobsTotalSize = 0;\n  }\n\n  _writeCurrentSchemaPiggyback(buf) {\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_SET_SCHEMA);\n    buf.writeUInt8(1);\n    const bytes = Buffer.byteLength(this.connection.currentSchema);\n    buf.writeUB4(bytes);\n    buf.writeBytesWithLength(Buffer.from(this.connection.currentSchema));\n  }\n\n  _writeEndToEndPiggybacks(buf) {\n    let flags = 0;\n\n    // determine which flags to send\n    if (this.connection._actionModified) {\n      flags |= constants.TNS_END_TO_END_ACTION;\n    }\n    if (this.connection._clientIdentifierModified) {\n      flags |= constants.TNS_END_TO_END_CLIENT_IDENTIFIER;\n    }\n    if (this.connection._clientInfoModified) {\n      flags |= constants.TNS_END_TO_END_CLIENT_INFO;\n    }\n    if (this.connection._moduleModified) {\n      flags |= constants.TNS_END_TO_END_MODULE;\n    }\n    if (this.connection._dbOpModified) {\n      flags |= constants.TNS_END_TO_END_DBOP;\n    }\n\n    // write initial packet data\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_SET_END_TO_END_ATTR);\n    buf.writeUInt8(0);                  // pointer (cidnam)\n    buf.writeUInt8(0);                  // pointer (cidser)\n    buf.writeUB4(flags);\n\n    const clientIdentifierBytes = this.writeEndEndTraceValue(buf, this.connection._clientIdentifier, this.connection._clientIdentifierModified);\n    const moduleBytes = this.writeEndEndTraceValue(buf, this.connection._module, this.connection._moduleModified);\n    const actionBytes = this.writeEndEndTraceValue(buf, this.connection._action, this.connection._actionModified);\n\n    // write unsupported bits\n    buf.writeUInt8(0);                  // pointer (cideci)\n    buf.writeUB4(0);                    // length (cideci)\n    buf.writeUInt8(0);                  // cidcct\n    buf.writeUB4(0);                    // cidecs\n\n    const clientInfoBytes = this.writeEndEndTraceValue(buf, this.connection._clientInfo, this.connection._clientInfoModified);\n    // write unsupported bits\n    buf.writeUInt8(0);                  // pointer (cideci)\n    buf.writeUB4(0);                    // length (cideci)\n    buf.writeUInt8(0);                  // cidcct\n    buf.writeUB4(0);                    // cidecs\n    const dbOpBytes = this.writeEndEndTraceValue(buf, this.connection._dbOp, this.connection._dbOpModified);\n\n    // write strings\n    if (this.connection._clientIdentifierModified && this.connection._clientIdentifier) {\n      buf.writeBytesWithLength(clientIdentifierBytes);\n    }\n    if (this.connection._moduleModified && this.connection._module) {\n      buf.writeBytesWithLength(moduleBytes);\n    }\n    if (this.connection._actionModified && this.connection._action) {\n      buf.writeBytesWithLength(actionBytes);\n    }\n    if (this.connection._clientInfoModified && this.connection._clientInfo) {\n      buf.writeBytesWithLength(clientInfoBytes);\n    }\n    if (this.connection._dbOpModified && this.connection._dbOp) {\n      buf.writeBytesWithLength(dbOpBytes);\n    }\n\n    // reset flags and values\n    this.connection._actionModified = false;\n    this.connection._action = \"\";\n    this.connection._clientIdentifierModified = false;\n    this.connection._clientIdentifier = \"\";\n    this.connection._clientInfoModified = false;\n    this.connection._clientInfo = \"\";\n    this.connection._dbOpModified = false;\n    this.connection._dbOp = \"\";\n    this.connection._moduleModified = false;\n    this.connection._module = \"\";\n  }\n\n  writeEndEndTraceValue(buf, value, modified) {\n    // write client identifier header info\n    let writtenBytes;\n    if (modified) {\n      buf.writeUInt8(1);              // pointer (client identifier)\n      if (value) {\n        writtenBytes = Buffer.from(value);\n        buf.writeUB4(writtenBytes.length);\n      } else {\n        buf.writeUB4(0);\n      }\n    } else {\n      buf.writeUInt8(0);              // pointer (client identifier)\n      buf.writeUB4(0);                // length of client identifier\n    }\n    return writtenBytes;\n  }\n\n  // Called when an error is encountered during decode of RPC\n  saveDeferredErr() {\n    if (!this.deferredErr) {\n      this.deferredErr = errors.getErr(...arguments);\n    }\n  }\n}\n\nmodule.exports = Message;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}