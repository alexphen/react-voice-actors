{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aphen\\\\OneDrive\\\\Documents\\\\GitHub\\\\react-voice-actors\\\\frontend\\\\src\\\\pages\\\\Show.js\",\n  _s = $RefreshSig$();\nimport ShowInfo from \"../components/ShowInfo\";\n// import {myList} from './Home'\n// import SearchBar from \"../components/SearchBar\"\nimport { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\n// import { unmountComponentAtNode } from \"react-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ShowID = 0,\n  Title = 1,\n  ImageURL = 2;\nexport default function Show({\n  user,\n  myList\n}) {\n  _s();\n  // const CLIENT_ID = '5dbcd29b3178e6d62ec7ecf17b4daf56'\n  const {\n    id,\n    title\n  } = useParams();\n  const [keyword, setKeyword] = useState('');\n  const [shows, setShows] = useState([]);\n  const [titles, setTitles] = useState([]);\n  const [showSelected, setShowSelected] = useState([id || 0, title || '']);\n  var filterFlag = user.length > 0;\n  console.log(user, \"in Show\");\n  // const [showActors, setShowActors] = useState([]);\n\n  // useEffect(() => {\n  // }, [showSelected])\n\n  useEffect(() => {\n    setShowSelected([id, title]);\n    setKeyword(\"\");\n    getSearchData(\"\");\n  }, [id, title]);\n  const getSearchData = async keyword => {\n    setKeyword(keyword);\n    setTitles([]);\n    if (keyword === \"\") {\n      setTitles([]);\n    } else {\n      var idRes = [];\n      var tRes = [];\n      const searchData = await fetch('/api/search', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          Title: keyword,\n          myList: myList,\n          flag: filterFlag\n        })\n      }).then(res => res.json());\n      console.log(\"SD\", searchData);\n\n      // console.log(\"RD\", returnedData)\n      for (let i in searchData) {\n        searchData[i] = Object.values(searchData[i]);\n        tRes.push(searchData[i][Title]);\n        idRes.push(searchData[i][ShowID]);\n      }\n      setTitles(tRes);\n      setShows(idRes);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"show\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [showSelected[0] != 0 ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", showSelected[Title], \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchSide\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"Search\",\n          type: \"search\",\n          placeholder: \"Search Anime\",\n          autoComplete: \"off\",\n          onChange: e => getSearchData(e.target.value),\n          value: keyword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results\",\n          children: titles.slice(0, 10).map((title, index) => /*#__PURE__*/_jsxDEV(Link, {\n            to: `/Anime/${shows[index]}/${title}`,\n            className: \"resBox\",\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), showSelected[0] != 0 && showSelected[0] != null //!= 0//.length > 1 //\n    ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ShowInfo, {\n        Show: showSelected,\n        user: user,\n        myList: myList,\n        flag: filterFlag\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"showHeader\",\n      children: \"Search for a Show in Your List to Begin!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this)\n  // <ShowInfo show={myList.shows[160]} />\n  // <ShowInfo show={myList.shows[146]} />\n  ;\n}\n_s(Show, \"oMPAOn7SPVo16rRdTwv82NojnyI=\", false, function () {\n  return [useParams];\n});\n_c = Show;\nvar _c;\n$RefreshReg$(_c, \"Show\");","map":{"version":3,"names":["ShowInfo","useState","useEffect","useParams","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","ShowID","Title","ImageURL","Show","user","myList","_s","id","title","keyword","setKeyword","shows","setShows","titles","setTitles","showSelected","setShowSelected","filterFlag","length","console","log","getSearchData","idRes","tRes","searchData","fetch","method","headers","body","JSON","stringify","flag","then","res","json","i","Object","values","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","autoComplete","onChange","e","target","value","slice","map","index","to","_c","$RefreshReg$"],"sources":["C:/Users/aphen/OneDrive/Documents/GitHub/react-voice-actors/frontend/src/pages/Show.js"],"sourcesContent":["import ShowInfo from \"../components/ShowInfo\"\r\n// import {myList} from './Home'\r\n// import SearchBar from \"../components/SearchBar\"\r\nimport { useState, useEffect } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\n// import { unmountComponentAtNode } from \"react-dom\";\r\nconst   ShowID      = 0,\r\n        Title       = 1,\r\n        ImageURL    = 2;\r\n\r\n\r\nexport default function Show({user, myList}) {\r\n    \r\n    // const CLIENT_ID = '5dbcd29b3178e6d62ec7ecf17b4daf56'\r\n    const { id, title } = useParams();\r\n    const [keyword, setKeyword] = useState('');\r\n    const [shows, setShows] = useState([]);\r\n    const [titles, setTitles] = useState([]);\r\n    const [showSelected, setShowSelected] = useState([id || 0, title || '']);\r\n    var filterFlag = user.length > 0;\r\n    console.log(user, \"in Show\")\r\n    // const [showActors, setShowActors] = useState([]);\r\n    \r\n    // useEffect(() => {\r\n    // }, [showSelected])\r\n\r\n    useEffect(() => {\r\n        setShowSelected([id, title]);\r\n        setKeyword(\"\");\r\n        getSearchData(\"\");\r\n    }, [id, title])\r\n    \r\n    const getSearchData = async(keyword) => {\r\n        setKeyword(keyword);\r\n        setTitles([])\r\n        if(keyword === \"\") {\r\n            setTitles([])\r\n        }\r\n        else {\r\n            var idRes = [];\r\n            var tRes = [];\r\n\r\n            const searchData = await fetch ('/api/search', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'content-type': 'application/json',\r\n                  'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                  Title: keyword,\r\n                  myList: myList,\r\n                  flag: filterFlag\r\n                })\r\n            })\r\n            .then(res => res.json());\r\n            console.log(\"SD\", searchData)\r\n\r\n            // console.log(\"RD\", returnedData)\r\n            for (let i in searchData) {\r\n                searchData[i] = Object.values(searchData[i]);\r\n                tRes.push(searchData[i][Title]);\r\n                idRes.push(searchData[i][ShowID]);\r\n            }\r\n            setTitles(tRes);\r\n            setShows(idRes);\r\n        }\r\n    }\r\n\r\n    return (   \r\n        <div className=\"show\">\r\n            {/* {console.log(myList.shows)} */}\r\n            {/* <SearchBar keyword={keyword} onChange={updateKeyword} /> */}\r\n            <div className=\"header\">\r\n                {showSelected[0] != 0\r\n                    ? <h1> {showSelected[Title]} </h1>\r\n                    : <></>\r\n                }\r\n                <div className=\"searchSide\">\r\n                    <input\r\n                        id=\"Search\"\r\n                        type=\"search\"\r\n                        placeholder=\"Search Anime\"\r\n                        autoComplete=\"off\"\r\n                        onChange={(e) => getSearchData(e.target.value)}\r\n                        value={keyword} />\r\n                    <div className=\"results\">\r\n                        {/* Display 10 filtered results. Change Show on click */}\r\n                        {titles.slice(0,10).map((title, index) => (\r\n                            <Link to={`/Anime/${shows[index]}/${title}`} className=\"resBox\">{title}</Link>\r\n                        ))}\r\n                    </div>\r\n                    {/* <button onClick={() => fetchList(\"RufusPeanut\")}>Fetch List</button> */}\r\n                </div>\r\n            </div>\r\n            {/* {console.log(\"showSelected\", showSelected)} */}\r\n            {showSelected[0] != 0 && showSelected[0] != null //!= 0//.length > 1 //\r\n                ? <>\r\n                    <ShowInfo Show={showSelected} user={user} myList={myList} flag={filterFlag}/>\r\n                </>\r\n                : <h2 id=\"showHeader\">Search for a Show in Your List to Begin!</h2>\r\n            }\r\n            \r\n            {/* <ShowInfo list={myList} show={myList.shows[51535]} /> */}\r\n        </div>     \r\n        // <ShowInfo show={myList.shows[160]} />\r\n        // <ShowInfo show={myList.shows[146]} />\r\n\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}