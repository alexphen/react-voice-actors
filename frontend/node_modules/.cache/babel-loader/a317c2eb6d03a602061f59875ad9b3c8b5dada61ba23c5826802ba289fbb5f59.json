{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nexport function uint8ArrayToString(bytes, format) {\n  switch (format) {\n    case \"utf-8\":\n      return uint8ArrayToUtf8String(bytes);\n    case \"base64\":\n      return uint8ArrayToBase64(bytes);\n    case \"base64url\":\n      return uint8ArrayToBase64Url(bytes);\n  }\n}\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nexport function stringToUint8Array(value, format) {\n  switch (format) {\n    case \"utf-8\":\n      return utf8StringToUint8Array(value);\n    case \"base64\":\n      return base64ToUint8Array(value);\n    case \"base64url\":\n      return base64UrlToUint8Array(value);\n  }\n}\n/**\n * Decodes a Uint8Array into a Base64 string.\n * @internal\n */\nexport function uint8ArrayToBase64(uint8Array) {\n  const decoder = new TextDecoder();\n  const dataString = decoder.decode(uint8Array);\n  return btoa(dataString);\n}\n/**\n * Decodes a Uint8Array into a Base64Url string.\n * @internal\n */\nexport function uint8ArrayToBase64Url(bytes) {\n  return uint8ArrayToBase64(bytes).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\n/**\n * Decodes a Uint8Array into a javascript string.\n * @internal\n */\nexport function uint8ArrayToUtf8String(uint8Array) {\n  const decoder = new TextDecoder(\"utf-8\");\n  const dataString = decoder.decode(uint8Array);\n  return dataString;\n}\n/**\n * Encodes a JavaScript string into a Uint8Array.\n * @internal\n */\nexport function utf8StringToUint8Array(value) {\n  return new TextEncoder(\"utf-8\").encode(value);\n}\n/**\n * Encodes a Base64 string into a Uint8Array.\n * @internal\n */\nexport function base64ToUint8Array(value) {\n  return new TextEncoder().encode(atob(value));\n}\n/**\n * Encodes a Base64Url string into a Uint8Array.\n * @internal\n */\nexport function base64UrlToUint8Array(value) {\n  const base64String = value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  return base64ToUint8Array(base64String);\n}","map":{"version":3,"names":["uint8ArrayToString","bytes","format","uint8ArrayToUtf8String","uint8ArrayToBase64","uint8ArrayToBase64Url","stringToUint8Array","value","utf8StringToUint8Array","base64ToUint8Array","base64UrlToUint8Array","uint8Array","decoder","TextDecoder","dataString","decode","btoa","replace","TextEncoder","encode","atob","base64String"],"sources":["C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\node_modules\\@azure\\core-util\\src\\bytesEncoding.browser.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\ndeclare global {\n  // stub these out for the browser\n  function btoa(input: string): string;\n  function atob(input: string): string;\n  class TextDecoder {\n    constructor(encoding?: string);\n    decode(input?: ArrayBufferView | ArrayBuffer): string;\n  }\n  class TextEncoder {\n    constructor(encoding?: string);\n    encode(input?: string): Uint8Array;\n  }\n}\n\n/** The supported character encoding type */\nexport type EncodingType = \"utf-8\" | \"base64\" | \"base64url\";\n\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nexport function uint8ArrayToString(bytes: Uint8Array, format: EncodingType): string {\n  switch (format) {\n    case \"utf-8\":\n      return uint8ArrayToUtf8String(bytes);\n    case \"base64\":\n      return uint8ArrayToBase64(bytes);\n    case \"base64url\":\n      return uint8ArrayToBase64Url(bytes);\n  }\n}\n\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nexport function stringToUint8Array(value: string, format: EncodingType): Uint8Array {\n  switch (format) {\n    case \"utf-8\":\n      return utf8StringToUint8Array(value);\n    case \"base64\":\n      return base64ToUint8Array(value);\n    case \"base64url\":\n      return base64UrlToUint8Array(value);\n  }\n}\n\n/**\n * Decodes a Uint8Array into a Base64 string.\n * @internal\n */\nexport function uint8ArrayToBase64(uint8Array: Uint8Array): string {\n  const decoder = new TextDecoder();\n  const dataString = decoder.decode(uint8Array);\n  return btoa(dataString);\n}\n\n/**\n * Decodes a Uint8Array into a Base64Url string.\n * @internal\n */\nexport function uint8ArrayToBase64Url(bytes: Uint8Array): string {\n  return uint8ArrayToBase64(bytes).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\n\n/**\n * Decodes a Uint8Array into a javascript string.\n * @internal\n */\nexport function uint8ArrayToUtf8String(uint8Array: Uint8Array): string {\n  const decoder = new TextDecoder(\"utf-8\");\n  const dataString = decoder.decode(uint8Array);\n  return dataString;\n}\n\n/**\n * Encodes a JavaScript string into a Uint8Array.\n * @internal\n */\nexport function utf8StringToUint8Array(value: string): Uint8Array {\n  return new TextEncoder(\"utf-8\").encode(value);\n}\n\n/**\n * Encodes a Base64 string into a Uint8Array.\n * @internal\n */\nexport function base64ToUint8Array(value: string): Uint8Array {\n  return new TextEncoder().encode(atob(value));\n}\n\n/**\n * Encodes a Base64Url string into a Uint8Array.\n * @internal\n */\nexport function base64UrlToUint8Array(value: string): Uint8Array {\n  const base64String = value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  return base64ToUint8Array(base64String);\n}\n"],"mappings":"AAAA;AACA;AAmBA;;;;;;AAMA,OAAM,SAAUA,kBAAkBA,CAACC,KAAiB,EAAEC,MAAoB;EACxE,QAAQA,MAAM;IACZ,KAAK,OAAO;MACV,OAAOC,sBAAsB,CAACF,KAAK,CAAC;IACtC,KAAK,QAAQ;MACX,OAAOG,kBAAkB,CAACH,KAAK,CAAC;IAClC,KAAK,WAAW;MACd,OAAOI,qBAAqB,CAACJ,KAAK,CAAC;;AAEzC;AAEA;;;;;;AAMA,OAAM,SAAUK,kBAAkBA,CAACC,KAAa,EAAEL,MAAoB;EACpE,QAAQA,MAAM;IACZ,KAAK,OAAO;MACV,OAAOM,sBAAsB,CAACD,KAAK,CAAC;IACtC,KAAK,QAAQ;MACX,OAAOE,kBAAkB,CAACF,KAAK,CAAC;IAClC,KAAK,WAAW;MACd,OAAOG,qBAAqB,CAACH,KAAK,CAAC;;AAEzC;AAEA;;;;AAIA,OAAM,SAAUH,kBAAkBA,CAACO,UAAsB;EACvD,MAAMC,OAAO,GAAG,IAAIC,WAAW,EAAE;EACjC,MAAMC,UAAU,GAAGF,OAAO,CAACG,MAAM,CAACJ,UAAU,CAAC;EAC7C,OAAOK,IAAI,CAACF,UAAU,CAAC;AACzB;AAEA;;;;AAIA,OAAM,SAAUT,qBAAqBA,CAACJ,KAAiB;EACrD,OAAOG,kBAAkB,CAACH,KAAK,CAAC,CAACgB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;AAC5F;AAEA;;;;AAIA,OAAM,SAAUd,sBAAsBA,CAACQ,UAAsB;EAC3D,MAAMC,OAAO,GAAG,IAAIC,WAAW,CAAC,OAAO,CAAC;EACxC,MAAMC,UAAU,GAAGF,OAAO,CAACG,MAAM,CAACJ,UAAU,CAAC;EAC7C,OAAOG,UAAU;AACnB;AAEA;;;;AAIA,OAAM,SAAUN,sBAAsBA,CAACD,KAAa;EAClD,OAAO,IAAIW,WAAW,CAAC,OAAO,CAAC,CAACC,MAAM,CAACZ,KAAK,CAAC;AAC/C;AAEA;;;;AAIA,OAAM,SAAUE,kBAAkBA,CAACF,KAAa;EAC9C,OAAO,IAAIW,WAAW,EAAE,CAACC,MAAM,CAACC,IAAI,CAACb,KAAK,CAAC,CAAC;AAC9C;AAEA;;;;AAIA,OAAM,SAAUG,qBAAqBA,CAACH,KAAa;EACjD,MAAMc,YAAY,GAAGd,KAAK,CAACU,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAChE,OAAOR,kBAAkB,CAACY,YAAY,CAAC;AACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}