{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { tracingClient } from \"../util/tracing\";\nconst logger = credentialLogger(\"ClientSecretCredential\");\n// This credential is exported on browser bundles for development purposes.\n// For this credential to work in browsers, browsers would need to have security features disabled.\n// Please do not disable your browser security features.\n/**\n * Enables authentication to Azure Active Directory using a client secret\n * that was generated for an App Registration.  More information on how\n * to configure a client secret can be found here:\n *\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-configure-app-access-web-apis#add-credentials-to-your-web-application\n *\n */\nexport class ClientSecretCredential {\n  /**\n   * Creates an instance of the ClientSecretCredential with the details\n   * needed to authenticate against Azure Active Directory with a client\n   * secret.\n   *\n   * @param tenantId - The Azure Active Directory tenant (directory) ID.\n   * @param clientId - The client (application) ID of an App Registration in the tenant.\n   * @param clientSecret - A client secret that was generated for the App Registration.\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(tenantId, clientId, clientSecret, options) {\n    this.identityClient = new IdentityClient(options);\n    this.tenantId = tenantId;\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n  }\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if\n   * successful.  If authentication cannot be performed at this time, this method may\n   * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n   * containing failure details will be thrown.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  async getToken(scopes, options = {}) {\n    return tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async newOptions => {\n      const query = new URLSearchParams({\n        response_type: \"token\",\n        grant_type: \"client_credentials\",\n        client_id: this.clientId,\n        client_secret: this.clientSecret,\n        scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \")\n      });\n      try {\n        const urlSuffix = getIdentityTokenEndpointSuffix(this.tenantId);\n        const request = createPipelineRequest({\n          url: `${this.identityClient.authorityHost}/${this.tenantId}/${urlSuffix}`,\n          method: \"POST\",\n          body: query.toString(),\n          headers: createHttpHeaders({\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          }),\n          abortSignal: options && options.abortSignal,\n          tracingOptions: newOptions === null || newOptions === void 0 ? void 0 : newOptions.tracingOptions\n        });\n        const tokenResponse = await this.identityClient.sendTokenRequest(request);\n        logger.getToken.info(formatSuccess(scopes));\n        return tokenResponse && tokenResponse.accessToken || null;\n      } catch (err) {\n        logger.getToken.info(formatError(scopes, err));\n        throw err;\n      }\n    });\n  }\n}","map":{"version":3,"names":["createHttpHeaders","createPipelineRequest","credentialLogger","formatError","formatSuccess","getIdentityTokenEndpointSuffix","IdentityClient","tracingClient","logger","ClientSecretCredential","constructor","tenantId","clientId","clientSecret","options","identityClient","getToken","scopes","withSpan","name","newOptions","query","URLSearchParams","response_type","grant_type","client_id","client_secret","scope","join","urlSuffix","request","url","authorityHost","method","body","toString","headers","Accept","abortSignal","tracingOptions","tokenResponse","sendTokenRequest","info","accessToken","err"],"sources":["C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\node_modules\\@azure\\identity\\src\\credentials\\clientSecretCredential.browser.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { TokenCredentialOptions } from \"../tokenCredentialOptions\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { tracingClient } from \"../util/tracing\";\n\nconst logger = credentialLogger(\"ClientSecretCredential\");\n\n// This credential is exported on browser bundles for development purposes.\n// For this credential to work in browsers, browsers would need to have security features disabled.\n// Please do not disable your browser security features.\n\n/**\n * Enables authentication to Azure Active Directory using a client secret\n * that was generated for an App Registration.  More information on how\n * to configure a client secret can be found here:\n *\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-configure-app-access-web-apis#add-credentials-to-your-web-application\n *\n */\nexport class ClientSecretCredential implements TokenCredential {\n  private identityClient: IdentityClient;\n  private tenantId: string;\n  private clientId: string;\n  private clientSecret: string;\n\n  /**\n   * Creates an instance of the ClientSecretCredential with the details\n   * needed to authenticate against Azure Active Directory with a client\n   * secret.\n   *\n   * @param tenantId - The Azure Active Directory tenant (directory) ID.\n   * @param clientId - The client (application) ID of an App Registration in the tenant.\n   * @param clientSecret - A client secret that was generated for the App Registration.\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(\n    tenantId: string,\n    clientId: string,\n    clientSecret: string,\n    options?: TokenCredentialOptions\n  ) {\n    this.identityClient = new IdentityClient(options);\n    this.tenantId = tenantId;\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n  }\n\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if\n   * successful.  If authentication cannot be performed at this time, this method may\n   * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n   * containing failure details will be thrown.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  public async getToken(\n    scopes: string | string[],\n    options: GetTokenOptions = {}\n  ): Promise<AccessToken | null> {\n    return tracingClient.withSpan(\n      `${this.constructor.name}.getToken`,\n      options,\n      async (newOptions) => {\n        const query = new URLSearchParams({\n          response_type: \"token\",\n          grant_type: \"client_credentials\",\n          client_id: this.clientId,\n          client_secret: this.clientSecret,\n          scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \"),\n        });\n\n        try {\n          const urlSuffix = getIdentityTokenEndpointSuffix(this.tenantId);\n          const request = createPipelineRequest({\n            url: `${this.identityClient.authorityHost}/${this.tenantId}/${urlSuffix}`,\n            method: \"POST\",\n            body: query.toString(),\n            headers: createHttpHeaders({\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\n            }),\n            abortSignal: options && options.abortSignal,\n            tracingOptions: newOptions?.tracingOptions,\n          });\n\n          const tokenResponse = await this.identityClient.sendTokenRequest(request);\n          logger.getToken.info(formatSuccess(scopes));\n          return (tokenResponse && tokenResponse.accessToken) || null;\n        } catch (err: any) {\n          logger.getToken.info(formatError(scopes, err));\n          throw err;\n        }\n      }\n    );\n  }\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,iBAAiB,EAAEC,qBAAqB,QAAQ,2BAA2B;AACpF,SAASC,gBAAgB,EAAEC,WAAW,EAAEC,aAAa,QAAQ,iBAAiB;AAC9E,SAASC,8BAA8B,QAAQ,+BAA+B;AAE9E,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,aAAa,QAAQ,iBAAiB;AAE/C,MAAMC,MAAM,GAAGN,gBAAgB,CAAC,wBAAwB,CAAC;AAEzD;AACA;AACA;AAEA;;;;;;;;AAQA,OAAM,MAAOO,sBAAsB;EAMjC;;;;;;;;;;EAUAC,YACEC,QAAgB,EAChBC,QAAgB,EAChBC,YAAoB,EACpBC,OAAgC;IAEhC,IAAI,CAACC,cAAc,GAAG,IAAIT,cAAc,CAACQ,OAAO,CAAC;IACjD,IAAI,CAACH,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,YAAY,GAAGA,YAAY;EAClC;EAEA;;;;;;;;;;EAUO,MAAMG,QAAQA,CACnBC,MAAyB,EACzBH,OAAA,GAA2B,EAAE;IAE7B,OAAOP,aAAa,CAACW,QAAQ,CAC3B,GAAG,IAAI,CAACR,WAAW,CAACS,IAAI,WAAW,EACnCL,OAAO,EACP,MAAOM,UAAU,IAAI;MACnB,MAAMC,KAAK,GAAG,IAAIC,eAAe,CAAC;QAChCC,aAAa,EAAE,OAAO;QACtBC,UAAU,EAAE,oBAAoB;QAChCC,SAAS,EAAE,IAAI,CAACb,QAAQ;QACxBc,aAAa,EAAE,IAAI,CAACb,YAAY;QAChCc,KAAK,EAAE,OAAOV,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAGA,MAAM,CAACW,IAAI,CAAC,GAAG;OAC7D,CAAC;MAEF,IAAI;QACF,MAAMC,SAAS,GAAGxB,8BAA8B,CAAC,IAAI,CAACM,QAAQ,CAAC;QAC/D,MAAMmB,OAAO,GAAG7B,qBAAqB,CAAC;UACpC8B,GAAG,EAAE,GAAG,IAAI,CAAChB,cAAc,CAACiB,aAAa,IAAI,IAAI,CAACrB,QAAQ,IAAIkB,SAAS,EAAE;UACzEI,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEb,KAAK,CAACc,QAAQ,EAAE;UACtBC,OAAO,EAAEpC,iBAAiB,CAAC;YACzBqC,MAAM,EAAE,kBAAkB;YAC1B,cAAc,EAAE;WACjB,CAAC;UACFC,WAAW,EAAExB,OAAO,IAAIA,OAAO,CAACwB,WAAW;UAC3CC,cAAc,EAAEnB,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEmB;SAC7B,CAAC;QAEF,MAAMC,aAAa,GAAG,MAAM,IAAI,CAACzB,cAAc,CAAC0B,gBAAgB,CAACX,OAAO,CAAC;QACzEtB,MAAM,CAACQ,QAAQ,CAAC0B,IAAI,CAACtC,aAAa,CAACa,MAAM,CAAC,CAAC;QAC3C,OAAQuB,aAAa,IAAIA,aAAa,CAACG,WAAW,IAAK,IAAI;OAC5D,CAAC,OAAOC,GAAQ,EAAE;QACjBpC,MAAM,CAACQ,QAAQ,CAAC0B,IAAI,CAACvC,WAAW,CAACc,MAAM,EAAE2B,GAAG,CAAC,CAAC;QAC9C,MAAMA,GAAG;;IAEb,CAAC,CACF;EACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}