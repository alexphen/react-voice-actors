{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logPolicy } from \"./policies/logPolicy\";\nimport { createEmptyPipeline } from \"./pipeline\";\nimport { redirectPolicy } from \"./policies/redirectPolicy\";\nimport { userAgentPolicy } from \"./policies/userAgentPolicy\";\nimport { decompressResponsePolicy } from \"./policies/decompressResponsePolicy\";\nimport { defaultRetryPolicy } from \"./policies/defaultRetryPolicy\";\nimport { formDataPolicy } from \"./policies/formDataPolicy\";\nimport { isNode } from \"@azure/core-util\";\nimport { proxyPolicy } from \"./policies/proxyPolicy\";\nimport { setClientRequestIdPolicy } from \"./policies/setClientRequestIdPolicy\";\nimport { tlsPolicy } from \"./policies/tlsPolicy\";\nimport { tracingPolicy } from \"./policies/tracingPolicy\";\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nexport function createPipelineFromOptions(options) {\n  var _a;\n  const pipeline = createEmptyPipeline();\n  if (isNode) {\n    if (options.tlsOptions) {\n      pipeline.addPolicy(tlsPolicy(options.tlsOptions));\n    }\n    pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n    pipeline.addPolicy(decompressResponsePolicy());\n  }\n  pipeline.addPolicy(formDataPolicy());\n  pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n  pipeline.addPolicy(setClientRequestIdPolicy((_a = options.telemetryOptions) === null || _a === void 0 ? void 0 : _a.clientRequestIdHeaderName));\n  pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), {\n    phase: \"Retry\"\n  });\n  pipeline.addPolicy(tracingPolicy(options.userAgentOptions), {\n    afterPhase: \"Retry\"\n  });\n  if (isNode) {\n    // Both XHR and Fetch expect to handle redirects automatically,\n    // so only include this policy when we're in Node.\n    pipeline.addPolicy(redirectPolicy(options.redirectOptions), {\n      afterPhase: \"Retry\"\n    });\n  }\n  pipeline.addPolicy(logPolicy(options.loggingOptions), {\n    afterPhase: \"Sign\"\n  });\n  return pipeline;\n}","map":{"version":3,"names":["logPolicy","createEmptyPipeline","redirectPolicy","userAgentPolicy","decompressResponsePolicy","defaultRetryPolicy","formDataPolicy","isNode","proxyPolicy","setClientRequestIdPolicy","tlsPolicy","tracingPolicy","createPipelineFromOptions","options","pipeline","tlsOptions","addPolicy","proxyOptions","userAgentOptions","_a","telemetryOptions","clientRequestIdHeaderName","retryOptions","phase","afterPhase","redirectOptions","loggingOptions"],"sources":["C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\node_modules\\@azure\\core-rest-pipeline\\src\\createPipelineFromOptions.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { LogPolicyOptions, logPolicy } from \"./policies/logPolicy\";\nimport { Pipeline, createEmptyPipeline } from \"./pipeline\";\nimport { PipelineRetryOptions, TlsSettings } from \"./interfaces\";\nimport { RedirectPolicyOptions, redirectPolicy } from \"./policies/redirectPolicy\";\nimport { UserAgentPolicyOptions, userAgentPolicy } from \"./policies/userAgentPolicy\";\n\nimport { ProxySettings } from \".\";\nimport { decompressResponsePolicy } from \"./policies/decompressResponsePolicy\";\nimport { defaultRetryPolicy } from \"./policies/defaultRetryPolicy\";\nimport { formDataPolicy } from \"./policies/formDataPolicy\";\nimport { isNode } from \"@azure/core-util\";\nimport { proxyPolicy } from \"./policies/proxyPolicy\";\nimport { setClientRequestIdPolicy } from \"./policies/setClientRequestIdPolicy\";\nimport { tlsPolicy } from \"./policies/tlsPolicy\";\nimport { tracingPolicy } from \"./policies/tracingPolicy\";\n\n/**\n * Defines options that are used to configure the HTTP pipeline for\n * an SDK client.\n */\nexport interface PipelineOptions {\n  /**\n   * Options that control how to retry failed requests.\n   */\n  retryOptions?: PipelineRetryOptions;\n\n  /**\n   * Options to configure a proxy for outgoing requests.\n   */\n  proxyOptions?: ProxySettings;\n\n  /** Options for configuring TLS authentication */\n  tlsOptions?: TlsSettings;\n\n  /**\n   * Options for how redirect responses are handled.\n   */\n  redirectOptions?: RedirectPolicyOptions;\n\n  /**\n   * Options for adding user agent details to outgoing requests.\n   */\n  userAgentOptions?: UserAgentPolicyOptions;\n\n  /**\n   * Options for setting common telemetry and tracing info to outgoing requests.\n   */\n  telemetryOptions?: TelemetryOptions;\n}\n\n/**\n * Defines options that are used to configure common telemetry and tracing info\n */\nexport interface TelemetryOptions {\n  /**\n   * The name of the header to pass the request ID to.\n   */\n  clientRequestIdHeaderName?: string;\n}\n\n/**\n * Defines options that are used to configure internal options of\n * the HTTP pipeline for an SDK client.\n */\nexport interface InternalPipelineOptions extends PipelineOptions {\n  /**\n   * Options to configure request/response logging.\n   */\n  loggingOptions?: LogPolicyOptions;\n}\n\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nexport function createPipelineFromOptions(options: InternalPipelineOptions): Pipeline {\n  const pipeline = createEmptyPipeline();\n\n  if (isNode) {\n    if (options.tlsOptions) {\n      pipeline.addPolicy(tlsPolicy(options.tlsOptions));\n    }\n    pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n    pipeline.addPolicy(decompressResponsePolicy());\n  }\n\n  pipeline.addPolicy(formDataPolicy());\n  pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n  pipeline.addPolicy(setClientRequestIdPolicy(options.telemetryOptions?.clientRequestIdHeaderName));\n  pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), { phase: \"Retry\" });\n  pipeline.addPolicy(tracingPolicy(options.userAgentOptions), { afterPhase: \"Retry\" });\n  if (isNode) {\n    // Both XHR and Fetch expect to handle redirects automatically,\n    // so only include this policy when we're in Node.\n    pipeline.addPolicy(redirectPolicy(options.redirectOptions), { afterPhase: \"Retry\" });\n  }\n  pipeline.addPolicy(logPolicy(options.loggingOptions), { afterPhase: \"Sign\" });\n\n  return pipeline;\n}\n"],"mappings":"AAAA;AACA;AAEA,SAA2BA,SAAS,QAAQ,sBAAsB;AAClE,SAAmBC,mBAAmB,QAAQ,YAAY;AAE1D,SAAgCC,cAAc,QAAQ,2BAA2B;AACjF,SAAiCC,eAAe,QAAQ,4BAA4B;AAGpF,SAASC,wBAAwB,QAAQ,qCAAqC;AAC9E,SAASC,kBAAkB,QAAQ,+BAA+B;AAClE,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,MAAM,QAAQ,kBAAkB;AACzC,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,wBAAwB,QAAQ,qCAAqC;AAC9E,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,aAAa,QAAQ,0BAA0B;AAyDxD;;;;AAIA,OAAM,SAAUC,yBAAyBA,CAACC,OAAgC;;EACxE,MAAMC,QAAQ,GAAGb,mBAAmB,EAAE;EAEtC,IAAIM,MAAM,EAAE;IACV,IAAIM,OAAO,CAACE,UAAU,EAAE;MACtBD,QAAQ,CAACE,SAAS,CAACN,SAAS,CAACG,OAAO,CAACE,UAAU,CAAC,CAAC;;IAEnDD,QAAQ,CAACE,SAAS,CAACR,WAAW,CAACK,OAAO,CAACI,YAAY,CAAC,CAAC;IACrDH,QAAQ,CAACE,SAAS,CAACZ,wBAAwB,EAAE,CAAC;;EAGhDU,QAAQ,CAACE,SAAS,CAACV,cAAc,EAAE,CAAC;EACpCQ,QAAQ,CAACE,SAAS,CAACb,eAAe,CAACU,OAAO,CAACK,gBAAgB,CAAC,CAAC;EAC7DJ,QAAQ,CAACE,SAAS,CAACP,wBAAwB,CAAC,CAAAU,EAAA,GAAAN,OAAO,CAACO,gBAAgB,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,yBAAyB,CAAC,CAAC;EACjGP,QAAQ,CAACE,SAAS,CAACX,kBAAkB,CAACQ,OAAO,CAACS,YAAY,CAAC,EAAE;IAAEC,KAAK,EAAE;EAAO,CAAE,CAAC;EAChFT,QAAQ,CAACE,SAAS,CAACL,aAAa,CAACE,OAAO,CAACK,gBAAgB,CAAC,EAAE;IAAEM,UAAU,EAAE;EAAO,CAAE,CAAC;EACpF,IAAIjB,MAAM,EAAE;IACV;IACA;IACAO,QAAQ,CAACE,SAAS,CAACd,cAAc,CAACW,OAAO,CAACY,eAAe,CAAC,EAAE;MAAED,UAAU,EAAE;IAAO,CAAE,CAAC;;EAEtFV,QAAQ,CAACE,SAAS,CAAChB,SAAS,CAACa,OAAO,CAACa,cAAc,CAAC,EAAE;IAAEF,UAAU,EAAE;EAAM,CAAE,CAAC;EAE7E,OAAOV,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}