{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aphen\\\\OneDrive\\\\Documents\\\\GitHub\\\\react-voice-actors\\\\frontend\\\\src\\\\pages\\\\Show.js\",\n  _s = $RefreshSig$();\nimport ShowInfo from \"../components/ShowInfo\";\n// import {myList} from './Home'\n// import SearchBar from \"../components/SearchBar\"\nimport { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\n// import { unmountComponentAtNode } from \"react-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ShowID = 0,\n  Title = 1,\n  ImageURL = 2;\nexport default function Show() {\n  _s();\n  // const CLIENT_ID = '5dbcd29b3178e6d62ec7ecf17b4daf56'\n  const {\n    id,\n    title\n  } = useParams();\n  const [keyword, setKeyword] = useState('');\n  const [shows, setShows] = useState([]);\n  const [titles, setTitles] = useState([]);\n  const [showSelected, setShowSelected] = useState([id || 0, title || '']);\n  // const [showActors, setShowActors] = useState([]);\n\n  // useEffect(() => {\n  // }, [showSelected])\n\n  useEffect(() => {\n    setShowSelected([id, title]);\n    setKeyword(\"\");\n    getSearchData(\"\");\n  }, [id, title]);\n  const getSearchData = async keyword => {\n    setKeyword(keyword);\n    setTitles([]);\n    if (keyword === \"\") {\n      setTitles([]);\n    } else {\n      var idRes = [];\n      var tRes = [];\n      const searchData = await fetch('/search', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          Title: keyword,\n          flag: true ////////////////////////////////\n        })\n      }).then(res => res.json());\n      console.log(\"SD\", searchData);\n\n      // console.log(\"RD\", returnedData)\n      for (let i in searchData) {\n        searchData[i] = Object.values(searchData[i]);\n        tRes.push(searchData[i][Title]);\n        idRes.push(searchData[i][ShowID]);\n      }\n      setTitles(tRes);\n      setShows(idRes);\n    }\n  };\n\n  // const getShowActors = async() => {\n  //     const showData = await fetch ('/show', {\n  //       method: 'POST',\n  //       headers: {\n  //         'content-type': 'application/json',\n  //         'Accept': 'application/json'\n  //       },\n  //       body: JSON.stringify({\n  //         ShowID: showSelected[0]\n  //       })\n  //     })\n  //     .then(res => res.json());\n  //     // console.log(showData)\n  //     for (let i in showData) {\n  //         showData[i] = Object.values(showData[i])\n  //     }\n  //     setShowActors(showData);\n  // }\n  // const updateKeyword = async(keyword) => {\n\n  //     // const results = myList.titles.filter((entry) => {\n  //     // // const results = myList.shows.filter((entry) => {\n  //     //     // console.log(entry.toLowerCase().match(keyword.toLowerCase()));\n  //     //     return entry.toLowerCase().match(keyword.toLowerCase());\n  //     // });\n  //     // setKeyword(keyword);\n  //     // setTitles([])\n  //     // if(keyword === \"\") {\n  //     //     setTitles([])\n  //     // }\n  //     // else {\n  //     //     var idRes = [];\n  //     //     var tRes = [];\n  //     //     getSearchData();\n  //     //     console.log(\"RD\", returnedData)\n  //     //     for (let i in returnedData) {\n  //     //         tRes.push(returnedData[i].Title);\n  //     //         idRes.push(returnedData[i].ShowID);\n  //     //     }\n  //     //     setTitles(tRes);\n  //     //     setShows(idRes);\n  //     // }\n  //     // console.log(titles)\n  // }\n\n  // function changeShow(index) {\n  //     setKeyword(\"\");\n  //     getSearchData(\"\");\n  //     setShowSelected([shows[index], titles[index]]);\n  //     console.log(showSelected)\n  //     getShowActors();\n  //     // if (document.getElementById(\"currList\"))\n  //     //     document.getElementById(\"currList\").remove()\n  //     // console.log(\"showSelected\", showSelected)\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"show\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [showSelected[0] != 0 ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", showSelected[Title], \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchSide\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"Search\",\n          type: \"search\",\n          placeholder: \"Search Show\",\n          onChange: e => getSearchData(e.target.value),\n          value: keyword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results\",\n          children: titles.slice(0, 10).map((title, index) => /*#__PURE__*/_jsxDEV(Link, {\n            to: `/Show/${shows[index]}/${title}`,\n            className: \"resBox\",\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), showSelected[0] != null //!= 0//.length > 1 //\n    ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", console.log(showSelected), /*#__PURE__*/_jsxDEV(ShowInfo, {\n        Show: showSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 19\n      }, this), console.log(\"created showe info\"), \"  \"]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"showHeader\",\n      children: \"Search for a Show in Your List to Begin!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this)\n  // <ShowInfo show={myList.shows[160]} />\n  // <ShowInfo show={myList.shows[146]} />\n  ;\n}\n// function setShowFromLabel() {\n//     setShowSelected([id, title]);\n// }\n\n// module.exports = {\n//     setShowFromLabel\n// }\n_s(Show, \"oMPAOn7SPVo16rRdTwv82NojnyI=\", false, function () {\n  return [useParams];\n});\n_c = Show;\nvar _c;\n$RefreshReg$(_c, \"Show\");","map":{"version":3,"names":["ShowInfo","useState","useEffect","useParams","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","ShowID","Title","ImageURL","Show","_s","id","title","keyword","setKeyword","shows","setShows","titles","setTitles","showSelected","setShowSelected","getSearchData","idRes","tRes","searchData","fetch","method","headers","body","JSON","stringify","flag","then","res","json","console","log","i","Object","values","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","value","slice","map","index","to","_c","$RefreshReg$"],"sources":["C:/Users/aphen/OneDrive/Documents/GitHub/react-voice-actors/frontend/src/pages/Show.js"],"sourcesContent":["import ShowInfo from \"../components/ShowInfo\"\r\n// import {myList} from './Home'\r\n// import SearchBar from \"../components/SearchBar\"\r\nimport { useState, useEffect } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\n// import { unmountComponentAtNode } from \"react-dom\";\r\nconst   ShowID      = 0,\r\n        Title       = 1,\r\n        ImageURL    = 2;\r\n\r\n\r\nexport default function Show() {\r\n    \r\n    // const CLIENT_ID = '5dbcd29b3178e6d62ec7ecf17b4daf56'\r\n    const { id, title } = useParams()\r\n    const [keyword, setKeyword] = useState('');\r\n    const [shows, setShows] = useState([]);\r\n    const [titles, setTitles] = useState([]);\r\n    const [showSelected, setShowSelected] = useState([id || 0, title || '']);\r\n    // const [showActors, setShowActors] = useState([]);\r\n    \r\n    // useEffect(() => {\r\n    // }, [showSelected])\r\n\r\n    useEffect(() => {\r\n        setShowSelected([id, title]);\r\n        setKeyword(\"\");\r\n        getSearchData(\"\");\r\n    }, [id, title])\r\n    \r\n    const getSearchData = async(keyword) => {\r\n        setKeyword(keyword);\r\n        setTitles([])\r\n        if(keyword === \"\") {\r\n            setTitles([])\r\n        }\r\n        else {\r\n            var idRes = [];\r\n            var tRes = [];\r\n\r\n            const searchData = await fetch ('/search', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'content-type': 'application/json',\r\n                  'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                  Title: keyword,\r\n                  flag: true ////////////////////////////////\r\n                })\r\n            })\r\n            .then(res => res.json());\r\n            console.log(\"SD\", searchData)\r\n\r\n            // console.log(\"RD\", returnedData)\r\n            for (let i in searchData) {\r\n                searchData[i] = Object.values(searchData[i]);\r\n                tRes.push(searchData[i][Title]);\r\n                idRes.push(searchData[i][ShowID]);\r\n            }\r\n            setTitles(tRes);\r\n            setShows(idRes);\r\n        }\r\n    }\r\n\r\n    // const getShowActors = async() => {\r\n    //     const showData = await fetch ('/show', {\r\n    //       method: 'POST',\r\n    //       headers: {\r\n    //         'content-type': 'application/json',\r\n    //         'Accept': 'application/json'\r\n    //       },\r\n    //       body: JSON.stringify({\r\n    //         ShowID: showSelected[0]\r\n    //       })\r\n    //     })\r\n    //     .then(res => res.json());\r\n    //     // console.log(showData)\r\n    //     for (let i in showData) {\r\n    //         showData[i] = Object.values(showData[i])\r\n    //     }\r\n    //     setShowActors(showData);\r\n    // }\r\n    // const updateKeyword = async(keyword) => {\r\n\r\n    //     // const results = myList.titles.filter((entry) => {\r\n    //     // // const results = myList.shows.filter((entry) => {\r\n    //     //     // console.log(entry.toLowerCase().match(keyword.toLowerCase()));\r\n    //     //     return entry.toLowerCase().match(keyword.toLowerCase());\r\n    //     // });\r\n    //     // setKeyword(keyword);\r\n    //     // setTitles([])\r\n    //     // if(keyword === \"\") {\r\n    //     //     setTitles([])\r\n    //     // }\r\n    //     // else {\r\n    //     //     var idRes = [];\r\n    //     //     var tRes = [];\r\n    //     //     getSearchData();\r\n    //     //     console.log(\"RD\", returnedData)\r\n    //     //     for (let i in returnedData) {\r\n    //     //         tRes.push(returnedData[i].Title);\r\n    //     //         idRes.push(returnedData[i].ShowID);\r\n    //     //     }\r\n    //     //     setTitles(tRes);\r\n    //     //     setShows(idRes);\r\n    //     // }\r\n    //     // console.log(titles)\r\n    // }\r\n\r\n    // function changeShow(index) {\r\n    //     setKeyword(\"\");\r\n    //     getSearchData(\"\");\r\n    //     setShowSelected([shows[index], titles[index]]);\r\n    //     console.log(showSelected)\r\n    //     getShowActors();\r\n    //     // if (document.getElementById(\"currList\"))\r\n    //     //     document.getElementById(\"currList\").remove()\r\n    //     // console.log(\"showSelected\", showSelected)\r\n    // }\r\n\r\n\r\n    return (   \r\n        <div className=\"show\">\r\n            {/* {console.log(myList.shows)} */}\r\n            {/* <SearchBar keyword={keyword} onChange={updateKeyword} /> */}\r\n            <div className=\"header\">\r\n                {showSelected[0] != 0\r\n                    ? <h1> {showSelected[Title]} </h1>\r\n                    : <></>\r\n                }\r\n                <div className=\"searchSide\">\r\n                    <input\r\n                        id=\"Search\"\r\n                        type=\"search\"\r\n                        placeholder=\"Search Show\"\r\n                        onChange={(e) => getSearchData(e.target.value)}\r\n                        value={keyword} />\r\n                    <div className=\"results\">\r\n                        {/* Display 10 filtered results. Change Show on click */}\r\n                        {titles.slice(0,10).map((title, index) => (\r\n                            <Link to={`/Show/${shows[index]}/${title}`} className=\"resBox\">{title}</Link>\r\n                        ))}\r\n                    </div>\r\n                    {/* <button onClick={() => fetchList(\"RufusPeanut\")}>Fetch List</button> */}\r\n                </div>\r\n            </div>\r\n            {/* {console.log(\"showSelected\", showSelected)} */}\r\n            {showSelected[0] != null //!= 0//.length > 1 //\r\n                ? <> {console.log(showSelected)}\r\n                  <ShowInfo Show={showSelected}/>\r\n                  {console.log(\"created showe info\")}  </>\r\n                : <h2 id=\"showHeader\">Search for a Show in Your List to Begin!</h2>\r\n            }\r\n            \r\n            {/* <ShowInfo list={myList} show={myList.shows[51535]} /> */}\r\n        </div>     \r\n        // <ShowInfo show={myList.shows[160]} />\r\n        // <ShowInfo show={myList.shows[146]} />\r\n\r\n    )\r\n}\r\n// function setShowFromLabel() {\r\n//     setShowSelected([id, title]);\r\n// }\r\n\r\n\r\n// module.exports = {\r\n//     setShowFromLabel\r\n// }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}