[{"C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\index.js":"1","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\App.js":"2","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Actor.js":"3","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\Navbar.js":"4","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Show.js":"5","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Home.js":"6","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\ShowInfo.js":"7","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\ShowRoleToggle.js":"8","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\HomeRoles.js":"9","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\HomeChar.js":"10"},{"size":469,"mtime":1696279387266,"results":"11","hashOfConfig":"12"},{"size":4834,"mtime":1704426539485,"results":"13","hashOfConfig":"12"},{"size":10171,"mtime":1703004457433,"results":"14","hashOfConfig":"12"},{"size":1523,"mtime":1704399185800,"results":"15","hashOfConfig":"12"},{"size":4572,"mtime":1703006281705,"results":"16","hashOfConfig":"12"},{"size":10170,"mtime":1704425832556,"results":"17","hashOfConfig":"12"},{"size":8794,"mtime":1704472421802,"results":"18","hashOfConfig":"12"},{"size":13363,"mtime":1704470480470,"results":"19","hashOfConfig":"12"},{"size":15909,"mtime":1704469802465,"results":"20","hashOfConfig":"12"},{"size":631,"mtime":1704405017645,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"5ww1no",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},"C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\index.js",[],[],[],"C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\App.js",["63","64","65","66","67","68"],[],"import Navbar from \"./components/Navbar\";\r\nimport Show from \"./pages/Show\";\r\nimport Home from \"./pages/Home\";\r\nimport Actor from \"./pages/Actor\";\r\nimport { Link, useMatch, useResolvedPath } from \"react-router-dom\"\r\nimport { Route, Routes, useLocation } from \"react-router-dom\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n\r\nfunction App() {\r\n\tconst [cookies, setCookies] = useCookies([\"acc\", \"list\"])\r\n\tconst [entry, setEntry]  \t= useState(cookies.acc || \"\");\r\n\tconst [myList, setMyList] \t= useState(cookies.list || []);\r\n  \tconst [user, setUser]     \t= useState(cookies.acc || \"\");\r\n\t\r\n\tlet location = useLocation();\r\n\t\r\n\r\n\t// useEffect(() => {\r\n\t// \tsetDBList();\r\n\t// }, [myList])\r\n\r\n\t// useEffect(() => {\r\n\t// \tgetMALData()\r\n\t// }, [])\r\n\r\n\r\n\tconst getMALData = async() => {\r\n\t\tif (entry != \"\") {\r\n\t\t\tconsole.log(\"getting MAL data\")\r\n\t\t\ttry {\r\n\t\t\t\tconst malData = await fetch ('/api/mal', {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t\t\t'Accept': 'application/json'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\t\tUsername: entry\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t\t.then(res => res.json());\r\n\t\t\t\tif (malData == false) {\r\n\t\t\t\t\tconsole.log(\"private\")\r\n\t\t\t\t\talert(\"Your List is marked as private. Please make it public to use this feature.\")\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t// instead of array we're turning the list into a comma separated string\r\n\t\t\t\t\t// let temp = [];\r\n\t\t\t\t\t// for (let i in malData.data) {\r\n\t\t\t\t\t// \ttemp[i] = malData.data[i].node.id;\r\n\t\t\t\t\t// }\r\n\t\t\t\t\tlet str = \"(\"\r\n\t\t\t\t\tfor (let i in malData.data) {\r\n\t\t\t\t\t\tstr += malData.data[i].node.id + \",\"\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstr = str.slice(0, str.length - 1) + \")\"\r\n\t\t\t\t\t// console.log(str)\r\n\t\t\t\t\tsetMyList(str)\r\n\t\t\t\t\tif (str.length > 0) {\r\n\t\t\t\t\t\tsetUser(entry)\r\n\t\t\t\t\t\tsetCookies('acc', entry, {path: '/'})\r\n\t\t\t\t\t\tsetCookies('list', str, {path: '/'})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction userFilter() {\r\n\t\tgetMALData()\r\n\t}\r\n\r\n\t// const setDBList = async() => {\r\n\t// \tif (myList.length > 0) {\r\n\t// \t\tconst myListString = await fetch('/api/list', {\r\n\t// \t\t\tmethod: 'POST',\r\n\t// \t\t\theaders: {\r\n\t// \t\t\t'content-type': 'application/json',\r\n\t// \t\t\t'Accept': 'application/json'\r\n\t// \t\t\t},\r\n\t// \t\t\tbody: JSON.stringify({\r\n\t// \t\t\t\tids: myList\r\n\t// \t\t\t})\r\n\t// \t\t})\r\n\t// \t}\r\n\t// }\r\n\r\n\treturn (\r\n\t\t<div className=\"app\">\r\n\t\t\t{/* {console.log(cookies)} */}\r\n\t\t\t\r\n\t\t\t{/* <Navbar username={user}>\r\n\t\t\t\t<h1>Hello</h1>\r\n\t\t\t\r\n\t\t\t</Navbar> */}\r\n\t\t\t<nav className=\"nav\">\r\n            <div id='navLeftPane'>\r\n\t\t\t\t{/* <CustomLink to=\"/\" className=\"site-title\" end=\"true\">Home</CustomLink> */}\r\n                <CustomLink to=\"/\" id=\"homeButton\" onClick={HomeClick}>Home</CustomLink> {/*className=\"site-title\"*/}\r\n            </div>\r\n\t\t\t<div id=\"userSearchArea\">\r\n\t\t\t\t\t<div id=\"userSearchInputs\">\r\n\t\t\t\t\t\t<input id=\"userSearch\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tplaceholder=\"MAL Username\" \r\n\t\t\t\t\t\t\tvalue={entry} \r\n\t\t\t\t\t\t\tonChange={(e) => setEntry(e.target.value)}\r\n\t\t\t\t\t\t\tonKeyDown={(e) => handleKeyDown(e)}></input>\r\n\t\t\t\t\t\t<button id=\"userSearchButton\" onClick={userFilter}>Filter by User</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t<div id='filterLabel'>\r\n\t\t\t\t\t<h6 id='filter'>Filtered by: {user.length > 0 ? user : \"All Anime\"}</h6>\r\n\t\t\t\t\t{user != \"\"\r\n\t\t\t\t\t\t? <button id='unfilter' onClick={removeFilter}>Remove Filter</button>\r\n\t\t\t\t\t\t: <></>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n            <ul id=\"navPages\">\r\n                <CustomLink to=\"/Anime/\">Anime Search</CustomLink>\r\n                <CustomLink to=\"/Actor/\">Actor Search</CustomLink>\r\n            </ul>\r\n        \t</nav>\r\n\t\t\t<Routes>\r\n\t\t\t\t<Route path=\"/Anime/:id?/:title?\" element={<Show user={user} myList={myList}/>} />\r\n\t\t\t\t<Route path=\"/Actor/:id?\" element={<Actor user={user} myList={myList}/>} />\r\n\t\t\t\t<Route path=\"/\" element={<Home user={user} myList={myList}/>} />\r\n\t\t\t</Routes>\r\n\t\t\t{/* <button onClick={getData}>Click</button> */}\r\n\t\t</div>\r\n\t\r\n\t);\r\n\r\n\tfunction CustomLink({ to, children, ...props }, end) {\r\n        const resolvedPath = useResolvedPath(to)\r\n        const isActive = useMatch({ path: resolvedPath.pathname, end: end })\r\n        \r\n        return (\r\n            <li className={isActive ? \"active\" : \"\"}>\r\n            <Link to={to} {...props}>\r\n                {children}\r\n            </Link>\r\n            </li>\r\n        )\r\n    }\r\n\r\n\tfunction HomeClick() {\r\n\t\tconsole.log(window.location.href)\r\n\t\tif (window.location.pathname = '/') {\r\n\t\t\t// window.location.replace(window.location.href);\r\n\t\t\tconsole.log(location.pathname)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction handleKeyDown(e) {\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\tuserFilter();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction removeFilter() {\r\n\t\tsetUser(\"\")\r\n\t\tsetMyList([])\r\n\t\tsetEntry(\"\")\r\n\t\tsetCookies('acc', \"\", {path: '/'})\r\n\t}\r\n}\r\nexport default App\r\n\r\n  \r\n  \r\n  \r\n\r\n\r\n\r\n\r\n\r\n// }\r\n\r\n// export default App;\r\n","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Actor.js",["69","70","71","72","73","74"],[],"import { useEffect, useState } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\n\r\nconst   actorName   = 0,\r\n        actorImg    = 1,\r\n        charID      = 2,\r\n        charName    = 3,\r\n        favorites   = 4,\r\n        charImg     = 5,\r\n        actorID     = 6,\r\n        showID      = 7,\r\n        title       = 8,\r\n        aFavs       = 9;\r\n\r\nexport default function Actor({user, myList}) {\r\n    \r\n    const {id, name} = useParams();\r\n    const [actor, setActor] = useState([id || 0, name || \"\", \"\", 0]);\r\n    const [roles, setRoles] = useState([]);\r\n    const [names, setNames] = useState([]);\r\n    const [ids, setIds]     = useState([]);\r\n    const [keyword, setKeyword] = useState('');\r\n    \r\n    var filterFlag = user.length > 0;\r\n    // console.log(actor)\r\n\r\n\r\n    useEffect(() => {\r\n        if (id > 0)\r\n            getData();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (id > 0) {\r\n            setKeyword(\"\")\r\n            getSearchData(\"\")\r\n            getData();\r\n        }\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        if (id > 0) {\r\n            setKeyword(\"\")\r\n            getSearchData(\"\")\r\n            getData();\r\n        }\r\n    }, [myList])\r\n\r\n    const getData = async() => {\r\n        // console.log(actor.actorID)\r\n        const actorData = await fetch ('/api/actorFull', {\r\n          method: 'POST',\r\n          headers: {\r\n            'content-type': 'application/json',\r\n            'Accept': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            ActorID: id,\r\n            myList: myList,\r\n            flag: filterFlag\r\n          })\r\n        })\r\n        .then(res => res.json());\r\n        for (let i in actorData) {\r\n            actorData[i] = Object.values(actorData[i])\r\n        }\r\n        // console.log(actorData[0][actorID], actorData[0][actorName], actorData[0][actorImg])\r\n        setActor([actorData[0][actorID], actorData[0][actorName], actorData[0][actorImg], actorData[0][aFavs]]);\r\n        setRoles(actorData)\r\n        console.log(actorData);\r\n    }\r\n\r\n    const getSearchData = async(keyword) => {\r\n        setKeyword(keyword);\r\n        setNames([])\r\n        if(keyword === \"\") {\r\n            setNames([])\r\n        }\r\n        else {\r\n            var idRes = [];\r\n            var nRes = [];\r\n\r\n            const searchData = await fetch ('/api/searchActor', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'content-type': 'application/json',\r\n                  'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                  name: keyword,\r\n                  myList: myList,\r\n                  flag: filterFlag\r\n                })\r\n            })\r\n            .then(res => res.json());\r\n            // console.log(\"SD\", searchData)\r\n\r\n            // console.log(\"RD\", returnedData)\r\n            for (let i in searchData) {\r\n                searchData[i] = Object.values(searchData[i]);\r\n                if (searchData[i][0] > 0) {\r\n                    nRes.push(searchData[i][1]);\r\n                    idRes.push(searchData[i][0]);\r\n                }\r\n            }\r\n            setNames(nRes);\r\n            setIds(idRes);\r\n            // console.log(nRes)\r\n            // console.log(idRes)\r\n        }\r\n    }\r\n\r\n    return (\r\n        // <><div className=\"actorSearchSide\">\r\n        //     <input\r\n        //         id=\"actorSearch\"\r\n        //         className=\"search\"\r\n        //         type=\"search\"\r\n        //         placeholder=\"Search Actor\"\r\n        //         autoComplete=\"off\"\r\n        //         onChange={(e) => getSearchData(e.target.value)}\r\n        //         value={keyword} />\r\n        //     <div className=\"results\">\r\n        //         {/* Display 10 filtered results. Change Show on click */}\r\n        //         {names.slice(0,10).map((name, index) => (\r\n        //             <Link to={`/Actor/${ids[index]}/`} className=\"resBox\" key={name}>{name}</Link>\r\n        //         ))}\r\n        //     </div>\r\n        // </div>\r\n        <div className=\"actorPage\">\r\n            {/* actor is set */}\r\n            {actor[0] > 0\r\n                ? <> \r\n                {combineRoles()}\r\n                {bubbleSort()} \r\n                <div id=\"actorTopPane\">\r\n                    <h2 id=\"actorTitle\">{actor[1]}</h2>\r\n                    <div className=\"actorSearchSide\">\r\n                        <input\r\n                            id=\"actorSearch\"\r\n                            className=\"search\"\r\n                            type=\"search\"\r\n                            placeholder=\"Search Actor\"\r\n                            autoComplete=\"off\"\r\n                            onChange={(e) => getSearchData(e.target.value)}\r\n                            value={keyword} />\r\n                        <div className=\"results\">\r\n                            {/* Display 10 filtered results. Change Show on click */}\r\n                            {names.slice(0,10).map((name, index) => (\r\n                                <Link to={`/Actor/${ids[index]}/`} className=\"resBox\" key={name}>{name}</Link>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"actorMain\">\r\n                    <div className=\"actorRoles\">\r\n                        {roles.map((role, n) => \r\n                            <div className=\"actorRole\">\r\n                                <img src={role[charImg]}></img>\r\n                                    <div className=\"info\">\r\n                                        <h3>{role[charName]}</h3>\r\n                                        <p>{\"(\" + role[favorites] + \" Favorites)\"}</p>\r\n                                        <Link to={`/Anime/${role[showID][n]}/${role[title][0]}`} className=\"actorInfoTitle\">{role[title][0]}</Link>\r\n                                        {/* IF MAPPING ALL ROLES ↓ */}\r\n                                        {/* {role[title].map((title, n) =>\r\n                                            <Link to={`/Anime/${role[showID][n]}/${title}`} key={n} className=\"actorInfoTitle\">{title}</Link>\r\n                                        )} */}\r\n                                    </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <div id=\"actorRightPane\">\r\n                        <div className=\"actorInfo\">\r\n                            <h1 className=\"actorName\">{actor[1]}</h1>\r\n                            <img className=\"actorImg\" src={actor[2]}></img>\r\n                            <p>Favorites: {actor[3]}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <img id=\"toTop\" src={require(\"../toTop.png\")} onClick={toTop}></img>\r\n                </>\r\n                : <div id=\"actorTopPane\">\r\n                        <h2 id=\"begin\">Search for an Actor to Begin!</h2>\r\n                        <div className=\"actorSearchSide\">\r\n                        <input\r\n                            id=\"actorSearch\"\r\n                            className=\"search\"\r\n                            type=\"search\"\r\n                            placeholder=\"Search Actor\"\r\n                            autoComplete=\"off\"\r\n                            onChange={(e) => getSearchData(e.target.value)}\r\n                            value={keyword} />\r\n                        <div className=\"results\">\r\n                            {/* Display 10 filtered results. Change Show on click */}\r\n                            {names.slice(0,10).map((name, index) => (\r\n                                <Link to={`/Actor/${ids[index]}/`} className=\"resBox\" key={name}>{name}</Link>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n    function combineRoles() {\r\n        // console.log(roles, roles.length)\r\n        var currRoleShowIDs = [];\r\n        var currRoleTitles = [];\r\n        for (let i = 0; i < roles.length; i++) {\r\n            // console.log(roles[i][title])\r\n            if (typeof roles[i][title] == 'string') {\r\n                currRoleShowIDs = [roles[i][showID]];\r\n                currRoleTitles = [roles[i][title]];\r\n                // var currRoleShowIDs = [roles[i].ShowID];\r\n                // var currRoleTitles = [roles[i].Title];\r\n            }\r\n            else {\r\n                currRoleShowIDs = roles[i][showID];\r\n                currRoleTitles = roles[i][title];\r\n            }\r\n            for (let p = i + 1; p < roles.length; p++) {\r\n                if(roles[i][charID] === roles[p][charID]) {\r\n                    // console.log(currRoleShowIDs)\r\n                    currRoleShowIDs.push(roles[p][showID]);\r\n                    currRoleTitles.push(roles[p][title]);\r\n                    // console.log(currRoleTitles)\r\n                    roles.splice(p, 1);\r\n                    p--;\r\n                }\r\n                else {\r\n                    i = p - 1;\r\n                    break\r\n                }\r\n            }\r\n            roles[i][showID] = currRoleShowIDs;\r\n            roles[i][title] = currRoleTitles;\r\n        }\r\n        // console.log(roles)\r\n    }\r\n\r\n    function bubbleSort()\r\n    {\r\n        // roleOrder = [];\r\n        // for (var i in roles) {\r\n        //     roleOrder.push(i)\r\n        // }\r\n        var i, j, temp;\r\n        var n = roles.length;\r\n        var swapped;\r\n        for (i = 0; i < n - 1; i++) \r\n        {\r\n            swapped = false;\r\n            for (j = 0; j < n - i - 1; j++) \r\n            {\r\n                if (roles[j][favorites] < roles[j + 1][favorites]) \r\n                {\r\n                    // Swap arr[j] and arr[j+1]\r\n                    temp = roles[j];\r\n                    roles[j] = roles[j + 1];\r\n                    roles[j + 1] = temp;\r\n                    swapped = true;\r\n                }\r\n            }\r\n            // IF no two elements were \r\n            // swapped by inner loop, then break\r\n            if (swapped === false)\r\n            break;\r\n        }\r\n    }\r\n\r\n    function toTop() {\r\n        window.scroll({top: 0, left: 0, behavior: \"smooth\"})\r\n    }\r\n\r\n}","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\Navbar.js",["75","76","77","78","79","80","81"],[],"import * as React from 'react';\r\nimport { Link, useMatch, useResolvedPath } from \"react-router-dom\"\r\nimport {useState, useEffect, useContext} from \"react\";\r\n\r\nconst Navbar = ({ username }) => {\r\n    var list = \"All Anime\";\r\n    const [user, setUser] = useState(\"\");\r\n    const [myList, setMyList]   = useState([]);\r\n\r\n\r\n    \r\n    // const setDBList = async() => {\r\n    //     const lister = await fetch('/api/list', {\r\n    //         method: 'POST',\r\n    //         headers: {\r\n    //           'content-type': 'application/json',\r\n    //           'Accept': 'application/json'\r\n    //         },\r\n    //         body: JSON.stringify({\r\n    //           ids: myList\r\n    //         })\r\n    //       })\r\n    // }\r\n\r\n\r\n    return (\r\n        <nav className=\"nav\">\r\n            <div id='navLeftPane'>\r\n                <CustomLink to=\"/\" className=\"site-title\">Home</CustomLink>\r\n            </div>\r\n            <ul>\r\n                <CustomLink to=\"/Anime/\">Anime Search</CustomLink>\r\n                <CustomLink to=\"/Actor/\">Actor Search</CustomLink>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n      \r\n    function CustomLink({ to, children, ...props }) {\r\n        const resolvedPath = useResolvedPath(to)\r\n        const isActive = useMatch({ path: resolvedPath.pathname, end: true })\r\n        \r\n        return (\r\n            <li className={isActive ? \"active\" : \"\"}>\r\n            <Link to={to} {...props}>\r\n                {children}\r\n            </Link>\r\n            </li>\r\n        )\r\n    }\r\n \r\nexport default Navbar;\r\n\r\n","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Show.js",["82","83"],[],"import ShowInfo from \"../components/ShowInfo\"\r\n// import {myList} from './Home'\r\n// import SearchBar from \"../components/SearchBar\"\r\nimport { useState, useEffect } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\n// import { unmountComponentAtNode } from \"react-dom\";\r\nconst   ShowID      = 0,\r\n        Title       = 1,\r\n        ImageURL    = 2;\r\n\r\n\r\nexport default function Show({user, myList}) {\r\n    \r\n    const { id, title } = useParams();\r\n    const [keyword, setKeyword] = useState('');\r\n    const [shows, setShows] = useState([]);\r\n    const [titles, setTitles] = useState([]);\r\n    const [showSelected, setShowSelected] = useState([id || 0, title || '']);\r\n    var filterFlag = user.length > 0;\r\n    // const [showActors, setShowActors] = useState([]);\r\n    \r\n    // useEffect(() => {\r\n    // }, [showSelected])\r\n\r\n    useEffect(() => {\r\n        setShowSelected([id, title]);\r\n        setKeyword(\"\");\r\n        getSearchData(\"\");\r\n    }, [id, title])\r\n    \r\n    const getSearchData = async(keyword) => {\r\n        setKeyword(keyword);\r\n        setTitles([])\r\n        if(keyword === \"\") {\r\n            setTitles([])\r\n        }\r\n        else {\r\n            var idRes = [];\r\n            var tRes = [];\r\n\r\n            const searchData = await fetch ('/api/search', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'content-type': 'application/json',\r\n                  'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                  Title: keyword,\r\n                  myList: myList,\r\n                  flag: filterFlag\r\n                })\r\n            })\r\n            .then(res => res.json());\r\n            console.log(\"SD\", searchData)\r\n\r\n            // console.log(\"RD\", returnedData)\r\n            for (let i in searchData) {\r\n                searchData[i] = Object.values(searchData[i]);\r\n                tRes.push(searchData[i][Title]);\r\n                idRes.push(searchData[i][ShowID]);\r\n            }\r\n            setTitles(tRes);\r\n            setShows(idRes);\r\n        }\r\n    }\r\n\r\n    return (   \r\n        <>\r\n        <div className=\"show\">\r\n            {/* {console.log(\"showSelected\", showSelected)} */}\r\n            {showSelected[0] !== 0 && showSelected[0] != null //!= 0//.length > 1 //\r\n                ? <>\r\n                    {showSelected[0] !== 0\r\n                        ? <h1 id=\"animeTitle\"> {showSelected[Title]} </h1>\r\n                        : <></>\r\n                    }\r\n                    <div className=\"animeSearchSide\">\r\n                        <input\r\n                            id=\"animeSearch\"\r\n                            className=\"search\"\r\n                            type=\"search\"\r\n                            placeholder=\"Search Anime\"\r\n                            autoComplete=\"off\"\r\n                            onChange={(e) => getSearchData(e.target.value)}\r\n                            value={keyword} />\r\n                        <div className=\"results\">\r\n                            {/* Display 10 filtered results. Change Show on click */}\r\n                            {titles.slice(0,10).map((title, index) => (\r\n                                <Link to={`/Anime/${shows[index]}/${title}`} className=\"resBox\">{title}</Link>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <ShowInfo Show={showSelected} user={user} myList={myList} flag={filterFlag}/>\r\n                </>\r\n                : <><h2 id=\"begin\">Search for an Anime to Begin!</h2>\r\n                <div className=\"animeSearchSide\">\r\n                        <input\r\n                            id=\"animeSearch\"\r\n                            className=\"search\"\r\n                            type=\"search\"\r\n                            placeholder=\"Search Anime\"\r\n                            autoComplete=\"off\"\r\n                            onChange={(e) => getSearchData(e.target.value)}\r\n                            value={keyword} />\r\n                        <div className=\"results\">\r\n                            {/* Display 10 filtered results. Change Show on click */}\r\n                            {titles.slice(0,10).map((title, index) => (\r\n                                <Link to={`/Anime/${shows[index]}/${title}`} className=\"resBox\">{title}</Link>\r\n                            ))}\r\n                        </div>\r\n                    </div></>\r\n            }\r\n            \r\n            {/* <ShowInfo list={myList} show={myList.shows[51535]} /> */}\r\n        </div> \r\n        </>    \r\n    )\r\n}","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Home.js",["84","85","86"],[],"import { useState, useEffect, useRef } from \"react\";\r\nimport HomeRoles from \"../components/HomeRoles\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nconst _ = require('lodash')\r\n\r\n// const ActorID   = 0;\r\nconst ActorName = 1;\r\n// const Favorites = 2;\r\nconst ImageURL  = 3;\r\n\r\n// export const myList = text;\r\n// const actors = myList.actors;\r\n//const topActors = [118, 185, 65, 672, 869, 34785, 212, 2, 270, 591, 99, 11817, 8, 87]\r\n// var actorsLeft = [];\r\nvar started = false;\r\nvar cache;\r\n\r\nconst Home = ({user, myList}) => {\r\n    \r\n    // var firstIndex;\r\n    // started ? firstIndex = Math.trunc(Math.random() * topActors.length)\r\n    //         : firstIndex = 0;\r\n\r\n    // const firstActor = actors[topActors[firstIndex]];\r\n    // const [prev, setPrev] = useState();\r\n    // var {active} = useParams()\r\n    const [index, setIndex] = useState(0);//firstIndex);\r\n    const [topActors, setTopActors] = useState([]);\r\n    const [actor, setActor] = useState([]);\r\n    const [actorID, setActorID] = useState(0)//topActors[firstIndex]);\r\n    const prevList = useRef(myList);\r\n    var filterFlag = user.length > 0;\r\n    // console.log(\"topActors\", topActors)\r\n\r\n    // let homeButton = document.getElementById(\"homeButton\")\r\n    // let location = useLocation();\r\n    // if (homeButton) {\r\n    //     homeButton.addEventListener(\"click\", () => {\r\n    //         if (location.pathname = '/Home') {\r\n    //             setTimeout(() => {\r\n    //                 window.location.reload();\r\n    //             }, 10)\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    useEffect(() => {\r\n        console.log(\"HA from []\")\r\n        getHomeActors();\r\n        started = false;\r\n        cache = {};\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // console.log(prevList.current)\r\n        if (!_.isEqual(prevList.current, myList)) {\r\n            setIndex(0);\r\n            // console.log('index', index)\r\n            started = false;\r\n            console.log(\"HA from [myList]\")\r\n            getHomeActors()\r\n            // resetIndex();\r\n            if (started) {\r\n                nextActor(0)\r\n            }\r\n        }\r\n        prevList.current = myList;\r\n    }, [myList])\r\n\r\n\r\n\r\n    // useEffect(() => {\r\n    //     getData()\r\n    // }, [topActors])\r\n\r\n    const getHomeActors = async() => {\r\n        const actorData = await fetch('/api/homeActor', {\r\n            method: 'POST',\r\n            headers: {\r\n              'content-type': 'application/json',\r\n              'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n            //   ActorID: actID\r\n                flag: filterFlag,\r\n                myList: myList\r\n            })\r\n          })\r\n          .then(res => res.json());\r\n          let temp = [];\r\n          for (let i in actorData) {\r\n            temp[i] = actorData[i][0]\r\n          }\r\n          setTopActors(temp)\r\n        //   console.log(temp)\r\n    }\r\n\r\n    const getData = async(actID) => {\r\n        // console.log('actID', actID)\r\n        const actorData = await fetch('/api/actor', {\r\n          method: 'POST',\r\n          headers: {\r\n            'content-type': 'application/json',\r\n            'Accept': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            ActorID: actID\r\n          })\r\n        })\r\n        .then(res => res.json());\r\n        // console.log(\"actorData\", actorData)\r\n        setActor(Object.values(actorData[0]));\r\n        // setActorID(actorData[0][ActorID])\r\n        // console.log(Object.values(actorData[0]));\r\n    }\r\n\r\n    function start() {\r\n        // active = true;\r\n        // window.location='/a';\r\n        // const params = new URLSearchParams(window.location.search);\r\n        // params.set('active', 'a');\r\n        // window.location.search = params;\r\n\r\n        // getHomeActors();\r\n        // nextActor(index);\r\n        setActorID(topActors[0]);\r\n        getData(topActors[0])\r\n    }\r\n\r\n    function nextActor() {\r\n        started = true;\r\n        let temp;\r\n        let pos = index + 1;\r\n        if (pos < topActors.length) {\r\n            setIndex(pos);\r\n            temp = topActors[pos];\r\n        }\r\n        else {\r\n            setIndex(0);\r\n            temp = topActors[0];\r\n        }\r\n        setActorID(temp);\r\n        getData(temp);\r\n    }\r\n    // function nextActor(pos) {\r\n    //     started = true;\r\n    //     let temp;\r\n    //     if (pos < topActors.length - 1) {\r\n    //         setIndex(pos + 1);\r\n    //         temp = topActors[pos];\r\n    //     }\r\n    //     else {\r\n    //         setIndex(0);\r\n    //         temp = topActors[0];\r\n    //     }\r\n    //     setActorID(temp);\r\n    //     getData(temp);\r\n    // }\r\n\r\n    function prevActor() {\r\n        started = true;\r\n        let temp;\r\n        let pos = index - 1;\r\n        if (pos >= 0) {\r\n            setIndex(pos);\r\n            temp = topActors[pos];\r\n        }\r\n        else {\r\n            setIndex(topActors.length - 1);\r\n            temp = topActors[topActors.length - 1];\r\n        }\r\n        setActorID(temp);\r\n        getData(temp);\r\n    }\r\n\r\n\r\n    return ( \r\n        <div className=\"home\">   \r\n            {actorID > 0\r\n                // started\r\n                ? <>\r\n                    <div className=\"viewer\">\r\n                        <div id=\"homeTopHalf\">\r\n                            <div className=\"homeInfo\">\r\n                                <h1 id=\"homeTitle\">Who Seiyu?</h1>\r\n                                <h6>All data obtained from <a href=\"http://MyAnimeList.net\" target=\"_blank\" rel=\"noreferrer\">MyAnimeList.net</a></h6>\r\n                            </div>\r\n                            {console.log(\"index\", index)}\r\n                            {/* {console.log(topActors)} */}\r\n                            <div className=\"homeActorInfo\">\r\n                                {/* Actor Name */}\r\n                                <Link id=\"roleActor\" to={`/Actor/${actorID}`}>{actor[ActorName]}</Link>\r\n                                {/* Actor Image and Nav*/}\r\n                                <div id=\"homeActorNav\">\r\n                                    <button className=\"homeActorButton\" onClick={() => prevActor()}>{\"←\"}</button>\r\n                                    <img className=\"homeActorImg\" src={actor[ImageURL]} alt={actor[ActorName]}></img>\r\n                                    <button className=\"homeActorButton\" onClick={() => nextActor()}>{\"→\"}</button>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{\"width\":\"558px\"}}></div>\r\n                        </div>\r\n                        \r\n                        <HomeRoles \r\n                            actorID={actorID} \r\n                            actorName={actor[ActorName]} \r\n                            actorImg={actor[ImageURL]}\r\n                            flag={filterFlag} user={user} \r\n                            myList={myList}\r\n                            cache={cache}/>\r\n                    </div>\r\n                </>\r\n                // not started\r\n                : <>\r\n                    <div className=\"homeInfo\">\r\n                        <h1 id=\"homeTitle\" style={{\"fontSize\":\"200px\"}}>Who Seiyu?</h1>\r\n                        <h2>A tool to display all the works of the voice actors you might know!</h2>\r\n                        <br></br>\r\n                        <h5>(Seiyu is a Japanese word for voice actor)</h5>\r\n                        <br></br>\r\n                        <h6>All data obtained from <a href=\"http://MyAnimeList.net\" target=\"_blank\" rel=\"noreferrer\">MyAnimeList.net</a></h6>\r\n                    </div>\r\n                    <button className=\"firstActor\" onClick={start}>Take a Look!</button>\r\n                </>\r\n            }\r\n            {/* <div className=\"homeInfo\">\r\n            <h1 id=\"homeTitle\">Who Seiyu?</h1>\r\n                <h2>A tool to display all the works of the voice actors you might know!</h2>\r\n                <br></br>\r\n                <h5>(Seiyu is a Japanese word for voice actor)</h5>\r\n                <br></br>\r\n                <h6>All data obtained from <a href=\"http://MyAnimeList.net\" target=\"_blank\" rel=\"noreferrer\">MyAnimeList.net</a></h6>\r\n               \r\n            </div> */}\r\n            \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Home;\r\n\r\n\r\n// {/* <div className=\"viewer\">\r\n//                 {/* {combineRoles()} */}\r\n//                 {actorID > 0 //started //actor[0] !== 0\r\n//                     ? <>\r\n//                         {console.log(\"index\", index)}\r\n//                         {/* {console.log(topActors)} */}\r\n//                         {/* Actor Name */}\r\n//                         <Link id=\"roleActor\" to={`/Actor/${actorID}`}>{actor[ActorName]}</Link>\r\n//                         {/* Actor Image and Nav*/}\r\n//                         <div id=\"homeActorNav\">\r\n//                             <button className=\"homeActorButton\" onClick={() => prevActor()}>{\"←\"}</button>\r\n//                             <img className=\"homeActorImg\" src={actor[ImageURL]} alt={actor[ActorName]}></img>\r\n//                             <button className=\"homeActorButton\" onClick={() => nextActor()}>{\"→\"}</button>\r\n//                         </div>\r\n//                         <HomeRoles \r\n//                             actorID={actorID} \r\n//                             actorName={actor[ActorName]} \r\n//                             actorImg={actor[ImageURL]}\r\n//                             flag={filterFlag} user={user} \r\n//                             myList={myList}\r\n//                             cache={cache}/> \r\n//                         {/* <ShowRoleToggle  \r\n//                                 id=\"topActor\" \r\n//                                 actorID={actorID} \r\n//                                 actorName={actor[ActorName]} \r\n//                                 flag={filterFlag} user={user} \r\n//                                 myList={myList}\r\n//                                 cache={cache}/> */}\r\n//                         </>\r\n//                     :<button className=\"firstActor\" onClick={start}>Take a Look!</button>\r\n//                 }\r\n//                 {console.log(\"img \", actor.img)}\r\n//             </div>","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\ShowInfo.js",["87","88","89","90","91","92","93","94"],[],"import { useEffect, useState, useRef } from \"react\";\r\nimport ShowRoleToggle from \"./ShowRoleToggle\";\r\nimport { useParams } from \"react-router-dom\";\r\nconst _ = require('lodash')\r\n\r\nconst   CharName    = 0,\r\n        Favorites   = 1,\r\n        ActorID     = 2,\r\n        ActorName   = 3,\r\n        ImageURL    = 4;\r\n\r\nvar toggles = [];\r\nvar set = false;\r\nvar cache = {};\r\n\r\nconst ShowInfo = ({ user, myList, flag }) => {\r\n\r\n    // console.log(Show)\r\n\r\n    const {id, Title} = useParams();\r\n    const [showSelected, setShowSelected] = useState([id || 0, Title || \"\"])\r\n    const [actors, setActors] = useState([]);\r\n    const [count, setCount] = useState([0]);\r\n    const [page, setPage] = useState(0);\r\n    const [perPage, setPerPage] = useState(48);\r\n    const [hasPrev, setHasPrev] = useState(false);\r\n    const [hasNext, setHasNext] = useState(true); ///////\r\n    const [keyword, setKeyword] = useState('');\r\n    const [dispActors, setDispActors] = useState([]);\r\n    const prevID = useRef(0);\r\n    \r\n\r\n    const getShowActors = async() => {\r\n        const showData = await fetch ('/api/show', {\r\n          method: 'POST',\r\n          headers: {\r\n            'content-type': 'application/json',\r\n            'Accept': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            ShowID: id\r\n          })\r\n        })\r\n        .then(res => res.json());\r\n        // console.log(showData)\r\n        for (let i in showData) {\r\n            showData[i] = Object.values(showData[i]);\r\n        }\r\n        setActors(showData)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCount(actors.length)\r\n        if (actors.length > perPage) {\r\n            setHasNext(true);\r\n        }\r\n        else {\r\n            setHasNext(false);\r\n        }\r\n        setDispActors(actors)\r\n    }, [actors])\r\n\r\n    useEffect(() => {\r\n        // console.log(id)\r\n        // if ID actually changed\r\n        if(!_.isEqual(prevID.current, id)) {\r\n            cache = {}\r\n            if (id > 0) {\r\n                setShowSelected([id, Title])\r\n                getShowActors();\r\n                // console.log(\"called show\")\r\n                setPage(0);\r\n                set = true;\r\n            }\r\n        }\r\n        prevID.current = id\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        setCount(dispActors.length)\r\n        if (dispActors.length > perPage) {\r\n            setHasNext(true);\r\n        }\r\n        else {\r\n            setHasNext(false);\r\n        }\r\n    }, [dispActors])\r\n\r\n\r\n    function bubbleSortActors(acts, n) {\r\n        var i, j, temp;\r\n        var swapped;\r\n        // console.log(n)\r\n        for (i = 0; i < n - 1; i++) \r\n        {\r\n            swapped = false;\r\n            for (j = 0; j < n - i - 1; j++) {\r\n                if (acts[j][Favorites] < acts[j + 1][Favorites]) {\r\n                        // Swap arr[j] and arr[j+1]\r\n                        temp = acts[j];\r\n                        acts[j] = acts[j + 1];\r\n                        acts[j + 1] = temp;\r\n                        swapped = true;\r\n                }\r\n            } \r\n            // IF no two elements were \r\n            // swapped by inner loop, then break\r\n            if (swapped === false)\r\n                break;\r\n        }\r\n    }\r\n \r\n    function removeDups() {\r\n        var actorIDs = [];\r\n        let i = 0;\r\n        while (true) {\r\n            if (i > actors.length - 1) break;\r\n            // console.log(i)\r\n            // console.log(actors[i][ActorID])\r\n            // console.log(actorIDs)\r\n            // console.log(actors)\r\n            if (actorIDs.includes(actors[i][ActorID])) {\r\n                actors.splice(i, 1);\r\n                i--;\r\n            }\r\n            else {\r\n                actorIDs.push(actors[i][ActorID])\r\n            }\r\n            i++;\r\n            // console.log(actors)\r\n        }\r\n        // count = actors.length;\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(count, page*perPage)\r\n        if (page == 0)\r\n            setHasPrev(false)\r\n        if ((page+1)*perPage > count)\r\n            setHasNext(false)\r\n    }, [page])\r\n\r\n    \r\n\r\n    function prevPage() {\r\n        setPage(page - 1)\r\n        setHasNext(true)\r\n        window.scroll(0, 0);\r\n    }\r\n\r\n    function nextPage() {\r\n        if (hasNext) {\r\n            setPage(page + 1)\r\n            setHasPrev(true)\r\n        }\r\n        window.scroll(0, 0);\r\n    }\r\n\r\n    function filterBy(arr, query) {\r\n        setKeyword(query);\r\n        console.log(arr)\r\n        setDispActors(arr.filter((el) => el[CharName].toLowerCase().includes(query.toLowerCase())\r\n        || el[ActorName].toLowerCase().includes(query.toLowerCase())));\r\n    }\r\n\r\n    function handlePerPage(num) {\r\n        // debugger\r\n        let pageTracker = page;\r\n        while(pageTracker*num > count) {\r\n            pageTracker--;\r\n        }\r\n        setPerPage(num);\r\n        setPage(pageTracker)\r\n    }\r\n    \r\n    function toTop() {\r\n        window.scroll({top: 0, left: 0, behavior: \"smooth\"})\r\n    }\r\n\r\n    return (  \r\n        <>\r\n            <input\r\n                id=\"filterInput\"\r\n                type=\"search\"\r\n                placeholder=\"Filter by Character/Actor\"\r\n                autoComplete=\"off\"\r\n                onChange={(e) => filterBy(actors, e.target.value)}\r\n                value={keyword} />\r\n            {/* {console.log(\"dispActors\", dispActors.length, \"actors\", actors.length, \"count\", count)} */}\r\n            {/* <h1 className=\"showTitle\">{Title}</h1> */}\r\n            {/* <h1>{page}</h1> */}\r\n            {/* {console.log(\"cache\", cache)} */}\r\n            <div className=\"showInfo\">\r\n                {removeDups()}\r\n                {bubbleSortActors(actors, actors.length)}\r\n                {dispActors.length > 0 && set\r\n                    ? dispActors.slice(perPage*page, perPage*page + perPage).map((actor, n) =>  \r\n                            <>\r\n                            <ShowRoleToggle key={n}\r\n                                                actorID={actor[ActorID]}\r\n                                                actorName={actor[ActorName]}\r\n                                                actorImg={actor[ImageURL]}\r\n                                                showID={id}\r\n                                                flag={flag}\r\n                                                user={user}\r\n                                                myList={myList}\r\n                                                cache={cache}/>\r\n                            {/* {console.log(toggles)}\r\n                                {!toggles.includes(actor[ActorID])\r\n\r\n                                    ?   <><ShowRoleToggle key={actor[ActorID]}\r\n                                                actorID={actor[ActorID]}\r\n                                                actorName={actor[ActorName]}\r\n                                                actorImg={actor[ImageURL]}\r\n                                                showID={id}\r\n                                                flag={flag}\r\n                                                user={user}\r\n                                                myList={myList}\r\n                                                cache={cache}/>\r\n                                            {console.log(\"toggle for \", actor[ActorID])}\r\n                                            {toggles.push(actor[ActorID])}\r\n                                        </>\r\n                                    :   <>{console.log(\"duplicate\", actor[ActorID])}</>\r\n\r\n                                } */}\r\n                                     \r\n                            </>\r\n                    )\r\n                    \r\n                    : <>{actors.length > 0\r\n                        ? <p>No characters to show</p>\r\n                        : <p>Failed to load from API :(</p> \r\n                    }</>\r\n                }\r\n                <div id=\"animeFoot\">\r\n                    <h2>Per Page:</h2>\r\n                    <select name=\"pageCount\" id=\"perPageSelector\" defaultValue={48} onChange={(e) => handlePerPage(e.target.value)}>\r\n                        <option value={16}>16</option>\r\n                        <option value={32}>32</option>\r\n                        <option value={48} >48</option>\r\n                        <option value={100}>100</option>\r\n                    </select>\r\n                    <h2>Page {page+1}/{Math.ceil(count/perPage)}</h2>\r\n                    <button id=\"prevPage\" className=\"pageButton\" disabled={!hasPrev} onClick={prevPage}>Prev Page</button>\r\n                    <button id=\"nextPage\" className=\"pageButton\" disabled={!hasNext} onClick={nextPage}>Next Page</button>\r\n                    <img id=\"toTop\" src={require(\"../toTop.png\")} onClick={toTop}></img>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n \r\nexport default ShowInfo;","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\ShowRoleToggle.js",["95","96","97","98","99","100","101","102"],[],"import { useEffect, useState, useRef } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport Show from \"../pages/Show\";\r\nimport { active } from \"requests\";\r\nconst _ = require('lodash')\r\n\r\nconst CharID    = 0;\r\nconst CharName  = 1;\r\nconst Favorites = 2;\r\nconst ImageURL  = 3;\r\n// const ActorID = 4;\r\nconst ShowID    = 5;\r\nconst Title     = 7;\r\nconst rank      = 8;\r\n\r\nvar started;\r\n\r\nconst ShowRoleToggle = ({actorID, actorName, actorImg, showID, flag, user, myList, cache}) => {\r\n\r\n    // console.log(\"actorID received \", actorID)\r\n    // console.log(cache)\r\n    \r\n    const [pos, setPos] = useState(0);\r\n    const [posDot, setPosDot] = useState(pos);\r\n    const [roleReturn, setRoleReturn] = useState([]);\r\n    const prevActor = useRef(0);\r\n    const prevUser = useRef(user);\r\n\r\n    // console.log(user, \"in Toggle\")\r\n    var filterFlag = user.length > 0;\r\n    // const [roles, setRoles] = useState([]);\r\n    var size;\r\n    var actors = [];\r\n    // var prevActor;\r\n\r\n    // const usePrevious = (value) => {\r\n    //     const ref = useRef()\r\n    //     useEffect(() => {\r\n    //         console.log(\"vallue\")\r\n    //         ref.current = value;\r\n    //     }, [value])\r\n    //     return ref.current;\r\n    // }\r\n\r\n    useEffect(() => {\r\n        // debugger\r\n        // console.log(cache)\r\n        if (!(cache && cache[actorID])) {\r\n            // console.log(\"roles []\")\r\n            getRoles(actorID);\r\n        }\r\n    }, [])\r\n    \r\n    useEffect(() => {\r\n        // console.log(1, prevUser, 2, user)\r\n        if (!_.isEqual(prevUser.current, user)) {\r\n            // console.log(\"roles [user]\")\r\n            cache = {};\r\n            actors = [];\r\n            getRoles(actorID);\r\n        }\r\n        prevUser.current = user\r\n        // if (!_.isEqual(prevUser, user)) {\r\n        //     console.log(\"changed\")\r\n        //     getRoles(actorID)\r\n        //     cache = {};\r\n        // }\r\n    }, [user])\r\n\r\n    useEffect(() => {\r\n        // console.log(1, prevUser, 2, user)\r\n        if (!_.isEqual(prevActor.current, actorID)) {\r\n            // console.log(\"roles [actorID]\")\r\n            getRoles(actorID);\r\n            restart();\r\n        }\r\n        prevActor.current = actorID;\r\n    }, [actorID]);\r\n\r\n\r\n    useEffect(() => {\r\n        restart();\r\n    }, [showID])\r\n\r\n\r\n    // useEffect(() => {\r\n    //     getRoles(actorID);\r\n    // }, []);\r\n    \r\n    const getRoles = async(actID) => {\r\n        // console.log(\"ID sent to roles \", actID)\r\n        // console.log(1, user, 2, prevUser)\r\n        if (!actors.includes(actID)) {\r\n            if (cache && cache[actID]) {\r\n                setRoleReturn(cache[actID])\r\n            }\r\n            else {\r\n                actors.push(actID)\r\n                const roleData = await fetch ('/api/roles', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'content-type': 'application/json',\r\n                        'Accept': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        ActorID: actID,\r\n                        myList: myList,\r\n                        flag: filterFlag\r\n                    })\r\n                }).then(res => res.json())\r\n                // console.log(roleData)\r\n                for (let i in roleData) {\r\n                    roleData[i] = Object.values(roleData[i])\r\n                }\r\n                setRoleReturn(Object.values(roleData));\r\n                // console.log(Object.values(roleData))\r\n                cache[actorID] = Object.values(roleData)\r\n            }\r\n        }\r\n        else {\r\n        }\r\n\r\n        // let attempt = 0; \r\n        // while (attempt < 20) {\r\n        //     try {\r\n        //         // console.log(roleData)\r\n        //         if (roleData[0].CharName) {\r\n        //             for (let i in roleData) {\r\n        //                 roleData[i] = Object.values(roleData[i])\r\n        //             }\r\n        //         }\r\n        //         setRoleReturn(Object.values(roleData));\r\n        //     }\r\n        //     catch (error) {\r\n        //         console.log(error)\r\n        //     }\r\n        //     attempt++;\r\n        //     sleep(5000)\r\n        // }\r\n\r\n        // console.log(\"rd\", Object.values(roleData))\r\n        // actors[actors.length] = roleData;\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     setNumRoles(countRoles(roles, roles.length));\r\n    //     console.log(\"numRoles\", numRoles)\r\n    // }, [pos, actor]);\r\n\r\n    // console.log(\"pos \", pos);\r\n\r\n    function restart() {\r\n        setPos(0);\r\n        setPosDot(0);\r\n    }\r\n\r\n    function prev() {\r\n        // console.log(\"buffer \", buffer, \"posDot \", posDot, \"pos \", pos, \"ext \", ext)\r\n\r\n        if (pos === 0) {\r\n            setPos(size - 1);\r\n            setPosDot(Math.min(9, size - 1));\r\n            \r\n        }\r\n        else if (pos > 7) {\r\n            if (posDot > 7) \r\n            setPosDot(posDot - 1);\r\n        setPos(pos - 1);\r\n    }\r\n    else {\r\n        setPos(pos - 1);\r\n        setPosDot(posDot - 1);\r\n    }\r\n}\r\nfunction next() {\r\n    // console.log(\"buffer \", buffer, \"posDot \", posDot, \"pos \", pos, \"ext \", ext)\r\n    // end of line\r\n    if (pos === size - 1) {\r\n        setPos(0);\r\n        setPosDot(0);\r\n    }\r\n    // pause at buffer\r\n    else if (posDot === 7 && size - pos > 3 ) {\r\n        setPos(pos + 1)\r\n    }\r\n    // press on\r\n    else {\r\n        setPos(pos + 1);\r\n        setPosDot(posDot + 1);\r\n        // console.log('posDot', posDot)\r\n        // console.log('pos', pos)\r\n        // console.log('size', size)\r\n        // console.log('rr', roleReturn)\r\n    }\r\n} \r\n\r\n    const arr = [];\r\n    \r\n    return ( \r\n        \r\n        <div className=\"roleGallery\">   \r\n            <div className=\"roleHeader\">\r\n                <Link id=\"roleActor\" to={`/Actor/${actorID}`}>{actorName}</Link>\r\n            </div>       \r\n            <div id=\"roleInner\">\r\n                {pos < roleReturn.length\r\n                    ? <>{handleRoles()}\r\n                    <img src={roleReturn[pos][ImageURL]} alt={roleReturn[pos][CharName]} />\r\n                    <div className=\"imgNav\">\r\n                        {size > 1\r\n                            ?<button className=\"roleTogglePrev\" onClick={prev}>←</button>\r\n                            :<div></div>\r\n                        }\r\n                        <div className=\"imgNavIndex\">\r\n                            <div className=\"selectionDots\">\r\n                                {arr}\r\n                            </div>\r\n                            <span className=\"index\"> {pos + 1} of {size} </span>\r\n                        </div>\r\n                        {size > 1\r\n                            ?<button className=\"roleToggleNext\" onClick={next}>→</button>\r\n                            :<div></div>\r\n                        }\r\n                    </div>\r\n                    <h4>{roleReturn[String(pos)][CharName]}</h4>\r\n                    <Link to={`/Anime/${roleReturn[pos][ShowID][0]}/${roleReturn[pos][Title][0]}`} id=\"topTitle\">{roleReturn[pos][Title][0]}</Link>\r\n                    <div style={{\"display\":\"flex\", \"flexDirection\":\"column\"}}>\r\n                    {roleReturn[pos][Title].length > 1\r\n                        ?<><div id=\"moreTitles\">•••</div>\r\n                        <div className=\"showsList\">\r\n                            {roleReturn[pos][Title] ?\r\n                            <>\r\n                            {roleReturn[pos][Title].map((title, n) => \r\n                                <Link to={`/Anime/${roleReturn[pos][ShowID][n]}/${title}`} key={n} className=\"altTitles\">{title}</Link>\r\n                                // <div className=\"altTitles\" key={n}>\r\n                                //     {n > 0\r\n                                //         ?<Link to={`/Anime/${roleReturn[pos][ShowID][n]}/${title}`}>{title}</Link>\r\n                                //         :<></>\r\n                                //     }\r\n                                // </div>\r\n                            )}</>\r\n                                : <></>\r\n                            }\r\n                        </div></>\r\n                        : <></>\r\n                    }\r\n                    </div>\r\n                    </>\r\n                    : <>\r\n                        {/* <img src={actorImg} alt={actorName}></img> */}\r\n                    </>\r\n                }\r\n                \r\n            </div>\r\n\r\n        </div>\r\n     );\r\n\r\n\r\n     function handleRoles() {\r\n        combineRoles();\r\n        bubbleSort(roleReturn, roleReturn.length);\r\n        findPrimary();\r\n     }\r\n\r\n     function combineRoles() {\r\n        var currRoleShowIDs = [];\r\n        var currRoleTitles = [];\r\n        var currRoleRanks = [];\r\n        // console.log(roleReturn)\r\n        for (let i = 0; i < roleReturn.length; i++) {\r\n            // If Title is currently a String, turn it into an array\r\n            if (typeof roleReturn[i][Title] == 'string') {\r\n                currRoleShowIDs = [roleReturn[i][ShowID]];\r\n                currRoleTitles  = [roleReturn[i][Title]];\r\n            }\r\n            else {\r\n                currRoleShowIDs = roleReturn[i][ShowID];\r\n                currRoleTitles  = roleReturn[i][Title];\r\n            }\r\n            if (typeof roleReturn[i][rank] == 'number') {\r\n                currRoleRanks = [roleReturn[i][rank]];\r\n            } else {\r\n                currRoleRanks = roleReturn[i][rank];                \r\n            }\r\n\r\n            // \r\n            for (let p = i + 1; p < roleReturn.length; p++) {\r\n                if(roleReturn[i][CharID] === roleReturn[p][CharID]) {\r\n                    // console.log(currRoleTitles, currRoleRanks)\r\n                    currRoleShowIDs.push(roleReturn[p][ShowID]);\r\n                    currRoleTitles.push(String(roleReturn[p][Title]));\r\n                    currRoleRanks.push(roleReturn[p][rank]);\r\n                    roleReturn.splice(p, 1);\r\n                    p--;\r\n                }\r\n                else {\r\n                    i = p - 1;\r\n                    break\r\n                }\r\n            }\r\n            // console.log(currRoleTitles, currRoleRanks)\r\n\r\n            var swapped;\r\n            for (let k = 0; k < currRoleShowIDs.length; k++) {\r\n                swapped = false\r\n                for (let m = 0; m < currRoleShowIDs.length; m++) {\r\n                    if (currRoleRanks[m] > currRoleRanks[m+1]) \r\n                    {\r\n                        swap(currRoleRanks, m, m+1)\r\n                        swap(currRoleShowIDs, m, m+1)\r\n                        swap(currRoleTitles, m, m+1)\r\n                        swapped = true;\r\n                    }\r\n                }\r\n                // IF no two elements were \r\n                // swapped by inner loop, then break\r\n                if (swapped === false)\r\n                break;\r\n            }\r\n\r\n            roleReturn[i][ShowID] = currRoleShowIDs;\r\n            roleReturn[i][Title] = currRoleTitles;\r\n            roleReturn[i][rank] = currRoleRanks;\r\n        }\r\n        size = roleReturn.length;\r\n        for (let i = 0; i < Math.min(size, 10); i++) {\r\n            if (i === posDot)\r\n                arr[i] = \"⦿\"\r\n            else\r\n                arr[i] = \"◦\";\r\n        }\r\n    }\r\n\r\n    function swap(arr, i1, i2) {\r\n        var temp = arr[i1];\r\n        arr[i1] = arr[i2];\r\n        arr[i2] = temp;\r\n    }\r\n\r\n    function bubbleSort(roles, n)\r\n    {\r\n        // roleOrder = [];\r\n        // for (var i in roles) {\r\n        //     roleOrder.push(i)\r\n        // }\r\n        var i, j;\r\n        var swapped;\r\n        for (i = 0; i < n - 1; i++) \r\n        {\r\n            swapped = false;\r\n            for (j = 0; j < n - i - 1; j++) \r\n            {\r\n                if (roles[j][Favorites] < roles[j + 1][Favorites]) \r\n                {\r\n                    // Swap arr[j] and arr[j+1]\r\n                    swap(roles, j, j+1)\r\n                    // temp = roles[j];\r\n                    // roles[j] = roles[j + 1];\r\n                    // roles[j + 1] = temp;\r\n                    swapped = true;\r\n                }\r\n            }\r\n            // IF no two elements were \r\n            // swapped by inner loop, then break\r\n            if (swapped === false)\r\n            break;\r\n        }\r\n    }\r\n\r\n    function findPrimary() {\r\n        // if multiple roles\r\n        if (roleReturn.length > 1) {\r\n            var num = 0;\r\n            // console.log(roleReturn)\r\n            for (var k in roleReturn) {\r\n                // console.log(roleReturn[k])\r\n                // console.log(roleReturn[k][ShowID])\r\n                if (roleReturn[k][ShowID].includes(parseInt(showID))) {\r\n                    \r\n                    var temp = roleReturn[k];\r\n                    roleReturn.splice(k, 1);\r\n                    roleReturn.splice(num, 0, temp);\r\n                    num++;\r\n                }\r\n            }\r\n        }\r\n    }   \r\n\r\n    //  function countRoles(roleReturn, n) {\r\n    //     let res = 0;\r\n    //     console.log(roleReturn)\r\n    //     for (let i = 0; i < n; i++) {\r\n    //         // skip ahead on duplicates\r\n    //         console.log(i)\r\n    //         while (i < n - 1 && roleReturn[i].CharID === roleReturn[i+1].CharID) {\r\n    //             console.log(roleReturn[i+1])\r\n    //             i++;\r\n    //         }\r\n    //         res++;\r\n    //     }\r\n    //     return res;\r\n    //  }\r\n}\r\n \r\nexport default ShowRoleToggle;","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\HomeRoles.js",["103","104","105","106","107","108","109","110","111","112","113","114"],[],"import { useEffect, useState, useRef } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport HomeChar from \"../components/HomeChar\";\r\n\r\n\r\nconst _ = require('lodash')\r\n\r\nconst CharID    = 0;\r\nconst CharName  = 1;\r\nconst Favorites = 2;\r\nconst ImageURL  = 3;\r\n// const ActorID = 4;\r\nconst ShowID    = 5;\r\nconst Title     = 7;\r\nconst rank      = 8;\r\n\r\nconst SPEED = 20;\r\n\r\nvar intID;\r\nvar started = false;\r\n\r\n\r\nconst HomeRoles = ({actorID, actorName, actorImg, showID, flag, user, myList, cache}) => {\r\n\r\n    // console.log(\"actorID received \", actorID)\r\n    \r\n    const [roleReturn, setRoleReturn] = useState([]);\r\n    const [direction, setDirection] = useState(1);\r\n    const [scrolling, setScrolling] = useState(false);\r\n    // const [scroller, setScroller] = useState();\r\n    const prevActor = useRef(0);\r\n    const prevUser = useRef(user);\r\n\r\n\r\n    // console.log(\"direction\", direction)\r\n    // console.log(actorID)\r\n    // console.log(user, \"in Toggle\")\r\n    var filterFlag = user.length > 0;\r\n    // const [roles, setRoles] = useState([]);\r\n    var size;\r\n    // var prevActor;\r\n\r\n    // const usePrevious = (value) => {\r\n    //     const ref = useRef()\r\n    //     useEffect(() => {\r\n    //         console.log(\"vallue\")\r\n    //         ref.current = value;\r\n    //     }, [value])\r\n    //     return ref.current;\r\n    // }\r\n\r\n\r\n    const rolesContainerWidth = 600;\r\n    const rolesContainer = document.getElementById(\"rolesContainer\");\r\n    \r\n    // useEffect(() => {\r\n    //     console.log(\"changed dir\");\r\n    // }, [direction])\r\n\r\n    // useEffect(() => {\r\n    //     // intID = window.self.setInterval(() => {\r\n    //     //     console.log(\"speed change\")\r\n    //     //     if (rolesContainer) {\r\n    //     //         console.log(speed)\r\n    //     //         // if (direction > 0 && rolesContainer.scrollLeft !== rolesContainer.scrollWidth) {\r\n    //     //             // console.log(rolesContainer.scrollLeft)\r\n    //     //             rolesContainer.scrollBy({\r\n    //     //                 top: 0,\r\n    //     //                 left: speed,\r\n    //     //                 behavior: \"smooth\"\r\n    //     //             })\r\n    //     //         // }\r\n    //     //     }\r\n    //     // }, 100);\r\n    // }, [speed]);\r\n\r\n    useEffect(() => {\r\n        console.log(\"[] getting \", actorID)\r\n        getRoles(actorID);\r\n    }, [])\r\n    \r\n    useEffect(() => {\r\n        // console.log(1, prevUser, 2, user)\r\n        if (!_.isEqual(prevUser.current, user)) {\r\n            console.log(\"roles [user]\")\r\n            cache = {};\r\n            getRoles(actorID);\r\n        }\r\n        prevUser.current = user\r\n        // if (!_.isEqual(prevUser, user)) {\r\n        //     console.log(\"changed\")\r\n        //     getRoles(actorID)\r\n        //     cache = {};\r\n        // }\r\n    }, [user])\r\n\r\n    useEffect(() => {\r\n        console.log(started)\r\n        let tempDir = direction;\r\n        setTimeout(() => {\r\n            resumeScroll(tempDir);\r\n        }, 1000) \r\n    }, [rolesContainer]);\r\n\r\n    useEffect(() => {\r\n        // debugger\r\n        if (!_.isEqual(prevActor.current, actorID)) {\r\n            console.log(\"roles [actorID]\")\r\n            stopScroll();\r\n            setDirection(1);\r\n            getRoles(actorID);\r\n            if (rolesContainer) {\r\n                rolesContainer.scrollTo({\r\n                    top: 0,\r\n                    left: 0,\r\n                    behavior: \"instant\"\r\n                })\r\n            }\r\n            setTimeout(() => {\r\n                resumeScroll(1);\r\n            }, 1300);\r\n        }\r\n        prevActor.current = actorID;\r\n    }, [actorID]);\r\n\r\n\r\n    // useEffect(() => {\r\n    //     getRoles(actorID);\r\n    // }, []);\r\n    \r\n    const getRoles = async(actID) => {\r\n        console.log(\"rioling\")\r\n        if (cache && cache[actID]) {\r\n            setRoleReturn(cache[actID])\r\n        }\r\n        else {\r\n            cache[actorID] = [];\r\n            const roleData = await fetch ('/api/roles', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    ActorID: actID,\r\n                    myList: myList,\r\n                    flag: filterFlag\r\n                })\r\n            }).then(res => res.json())\r\n            // console.log(roleData)\r\n            for (let i in roleData) {\r\n                roleData[i] = Object.values(roleData[i])\r\n            }\r\n            setRoleReturn(Object.values(roleData));\r\n            // console.log(Object.values(roleData))\r\n            cache[actorID] = Object.values(roleData)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const arr = [];\r\n   \r\n    \r\n    return ( \r\n        <>\r\n            <div className=\"homeRoleGallery\" \r\n                // onMouseOver={stopScroll}\r\n                // onMouseOut={resumeScroll}\r\n                >  \r\n                {handleRoles()}\r\n                {/* <- Cycling Roles -> */}\r\n                    <img className=\"homeScrollArrow\" \r\n                        src={require(\"../back.png\")} \r\n                        onClick={jumpBack} \r\n                        // onMouseEnter={() => resumeScroll(-1)}\r\n                        onMouseEnter={scrollBack}\r\n                    ></img>\r\n                    {/*onMouseDown={scrollBack} onMouseUp={stopScroll}>*/}\r\n                    <div\r\n                        id=\"rolesContainer\"\r\n                        className=\"homeRoleCarousel\"\r\n                        onMouseOver={stopScroll}\r\n                        \r\n                        // onMouseOut={resumeScroll}\r\n                        >\r\n                    {roleReturn.map((role, i) =>\r\n                        <HomeChar key={i} \r\n                            charName={role[CharName]} \r\n                            charImg={role[ImageURL]} \r\n                            topTitleID={role[ShowID][0]} \r\n                            topTitle={role[Title][0]}/>\r\n                    )}\r\n                    {/* <div className=\"homeRoleCarousel js-flickity flickity-enabled is-draggable\"\r\n                        data-flickity-options='{ \"cellAlign\": \"left\", \"contain\": true }'>\r\n                        <div className=\"flickity-viewport\">\r\n                            <div className=\"flickity-slider\">\r\n                                {roleReturn.map((role, i) =>\r\n                                    <HomeChar key={i} charName={role[CharName]} charImg={role[ImageURL]} topTitleID={role[ShowID][0]} topTitle={role[Title][0]}/>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div> */}\r\n                    </div>\r\n                    <img className=\"homeScrollArrow\" \r\n                        src={require(\"../next.png\")} \r\n                        onClick={jumpForward} \r\n                        // onMouseEnter={() => resumeScroll(1)}>\r\n                        onMouseEnter={scrollForward}\r\n                    ></img> \r\n                    {/*</>onMouseDown={scrollForward} onMouseUp={stopScroll}>*/}\r\n            </div>\r\n            <img src={scrolling ? require('../pause.png') : require('../play.png')} id=\"homePlayButton\" onClick={pausePlay}></img>\r\n        </>\r\n     );\r\n\r\n     function scrollBack() {\r\n        stopScroll();\r\n        setScrolling(true);\r\n        setDirection(-1);\r\n        intID = window.self.setInterval(() => {\r\n            if (rolesContainer) {\r\n                if (rolesContainer.scrollLeft > 0) {\r\n                    rolesContainer.scrollBy({\r\n                        top: 0,\r\n                        left: -SPEED,\r\n                        behavior: \"smooth\"\r\n                    })\r\n                }\r\n                else {\r\n                    setScrolling(false);\r\n                }\r\n            }\r\n        }, 100);\r\n     }\r\n\r\n     function scrollForward() {\r\n        stopScroll();\r\n        setScrolling(true);\r\n        setDirection(1);\r\n        intID = window.self.setInterval(() => {\r\n            if (rolesContainer) {\r\n                if(rolesContainer.scrollLeft < rolesContainer.scrollWidth - rolesContainer.clientWidth) {\r\n                    rolesContainer.scrollBy({\r\n                        top: 0,\r\n                        left: SPEED,\r\n                        behavior: \"smooth\"\r\n                    })\r\n                }\r\n                else {\r\n                    setScrolling(false)\r\n                }\r\n            }\r\n        }, 100);\r\n     }\r\n\r\n    function pausePlay() {\r\n        if (scrolling) {\r\n            stopScroll();\r\n        }\r\n        else {\r\n            resumeScroll(direction);\r\n        }\r\n    }\r\n\r\n    function jumpBack() {\r\n    stopScroll();\r\n    if (rolesContainer) {\r\n        let distance = rolesContainer.clientWidth;\r\n        let tempDir = -1;\r\n        setDirection(tempDir);\r\n        rolesContainer.scrollBy({\r\n            top: 0,\r\n            left: -distance,\r\n            behavior: \"smooth\"\r\n        })\r\n    }\r\n    }\r\n\r\n    function jumpForward() {\r\n    stopScroll();\r\n    if (rolesContainer) {            \r\n        let distance = rolesContainer.clientWidth;\r\n        let tempDir = 1;\r\n        setDirection(tempDir);\r\n        rolesContainer.scrollBy({\r\n            top: 0,\r\n            left: distance,\r\n            behavior: \"smooth\"\r\n        })\r\n    }\r\n    }\r\n\r\n    function stopScroll() {\r\n    // console.log(\"stop\")\r\n    clearInterval(intID);\r\n    setScrolling(false);\r\n    }\r\n\r\n    function resumeScroll(dir) {\r\n    // console.log(started)\r\n    setScrolling(true);\r\n    let tempDir = dir;\r\n    setDirection(dir);\r\n    clearInterval(intID);\r\n    intID = window.self.setInterval(() => {\r\n        if (rolesContainer && rolesContainer.scrollWidth > 0) {\r\n            // console.log(SPEED, tempDir, rolesContainer.scrollLeft, (rolesContainer.scrollWidth - rolesContainer.clientWidth))\r\n            // move right\r\n            if (tempDir > 0 && rolesContainer.scrollLeft < (rolesContainer.scrollWidth - rolesContainer.clientWidth)) {\r\n                rolesContainer.scrollBy({\r\n                    top: 0,\r\n                    left: SPEED,\r\n                    behavior: \"smooth\"\r\n                })\r\n            }\r\n            // move left\r\n            else if (tempDir < 0 && rolesContainer.scrollLeft > 0) {\r\n                rolesContainer.scrollBy({\r\n                    top: 0,\r\n                    left: -SPEED,\r\n                    behavior: \"smooth\"\r\n                })\r\n            }\r\n            // at an end\r\n            else {\r\n                // stopScroll();\r\n                tempDir = -tempDir;\r\n                setDirection(tempDir);\r\n            }\r\n        }\r\n    }, 100);\r\n\r\n    // console.log(\"start\")\r\n    // intID = window.self.setInterval(() => {\r\n    //     if (rolesContainer) {\r\n    //         if (direction > 0 && rolesContainer.scrollLeft !== rolesContainer.scrollWidth) {\r\n    //             console.log(SPEED, direction)\r\n    //             rolesContainer.scrollBy({\r\n    //                 top: 0,\r\n    //                 left: SPEED*direction,\r\n    //                 behavior: \"smooth\"\r\n    //             })\r\n    //         }\r\n    //     }\r\n    // }, 100);\r\n    }\r\n\r\n    function handleRoles() {\r\n    combineRoles();\r\n    bubbleSort(roleReturn, roleReturn.length);\r\n    findPrimary();\r\n    }\r\n\r\n     function combineRoles() {\r\n        var currRoleShowIDs = [];\r\n        var currRoleTitles = [];\r\n        var currRoleRanks = [];\r\n        // console.log(roleReturn)\r\n        for (let i = 0; i < roleReturn.length; i++) {\r\n            // If Title is currently a String, turn it into an array\r\n            if (typeof roleReturn[i][Title] == 'string') {\r\n                currRoleShowIDs = [roleReturn[i][ShowID]];\r\n                currRoleTitles  = [roleReturn[i][Title]];\r\n            }\r\n            else {\r\n                currRoleShowIDs = roleReturn[i][ShowID];\r\n                currRoleTitles  = roleReturn[i][Title];\r\n            }\r\n            if (typeof roleReturn[i][rank] == 'number') {\r\n                currRoleRanks = [roleReturn[i][rank]];\r\n            } else {\r\n                currRoleRanks = roleReturn[i][rank];                \r\n            }\r\n\r\n            // \r\n            for (let p = i + 1; p < roleReturn.length; p++) {\r\n                if(roleReturn[i][CharID] === roleReturn[p][CharID]) {\r\n                    // console.log(currRoleTitles, currRoleRanks)\r\n                    currRoleShowIDs.push(roleReturn[p][ShowID]);\r\n                    currRoleTitles.push(String(roleReturn[p][Title]));\r\n                    currRoleRanks.push(roleReturn[p][rank]);\r\n                    roleReturn.splice(p, 1);\r\n                    p--;\r\n                }\r\n                else {\r\n                    i = p - 1;\r\n                    break\r\n                }\r\n            }\r\n            // console.log(currRoleTitles, currRoleRanks)\r\n\r\n            var swapped;\r\n            for (let k = 0; k < currRoleShowIDs.length; k++) {\r\n                swapped = false\r\n                for (let m = 0; m < currRoleShowIDs.length; m++) {\r\n                    if (currRoleRanks[m] > currRoleRanks[m+1]) \r\n                    {\r\n                        swap(currRoleRanks, m, m+1)\r\n                        swap(currRoleShowIDs, m, m+1)\r\n                        swap(currRoleTitles, m, m+1)\r\n                        swapped = true;\r\n                    }\r\n                }\r\n                // IF no two elements were \r\n                // swapped by inner loop, then break\r\n                if (swapped === false)\r\n                break;\r\n            }\r\n\r\n            roleReturn[i][ShowID] = currRoleShowIDs;\r\n            roleReturn[i][Title] = currRoleTitles;\r\n            roleReturn[i][rank] = currRoleRanks;\r\n        }\r\n        size = roleReturn.length;\r\n    }\r\n\r\n    function swap(arr, i1, i2) {\r\n        var temp = arr[i1];\r\n        arr[i1] = arr[i2];\r\n        arr[i2] = temp;\r\n    }\r\n\r\n    function bubbleSort(roles, n)\r\n    {\r\n        // roleOrder = [];\r\n        // for (var i in roles) {\r\n        //     roleOrder.push(i)\r\n        // }\r\n        var i, j;\r\n        var swapped;\r\n        for (i = 0; i < n - 1; i++) \r\n        {\r\n            swapped = false;\r\n            for (j = 0; j < n - i - 1; j++) \r\n            {\r\n                if (roles[j][Favorites] < roles[j + 1][Favorites]) \r\n                {\r\n                    // Swap arr[j] and arr[j+1]\r\n                    swap(roles, j, j+1)\r\n                    // temp = roles[j];\r\n                    // roles[j] = roles[j + 1];\r\n                    // roles[j + 1] = temp;\r\n                    swapped = true;\r\n                }\r\n            }\r\n            // IF no two elements were \r\n            // swapped by inner loop, then break\r\n            if (swapped === false)\r\n            break;\r\n        }\r\n    }\r\n\r\n    function findPrimary() {\r\n        // if multiple roles\r\n        if (roleReturn.length > 1) {\r\n            var num = 0;\r\n            // console.log(roleReturn)\r\n            for (var k in roleReturn) {\r\n                // console.log(roleReturn[k])\r\n                // console.log(roleReturn[k][ShowID])\r\n                if (roleReturn[k][ShowID].includes(parseInt(showID))) {\r\n                    \r\n                    var temp = roleReturn[k];\r\n                    roleReturn.splice(k, 1);\r\n                    roleReturn.splice(num, 0, temp);\r\n                    num++;\r\n                }\r\n            }\r\n        }\r\n    }   \r\n\r\n    //  function countRoles(roleReturn, n) {\r\n    //     let res = 0;\r\n    //     console.log(roleReturn)\r\n    //     for (let i = 0; i < n; i++) {\r\n    //         // skip ahead on duplicates\r\n    //         console.log(i)\r\n    //         while (i < n - 1 && roleReturn[i].CharID === roleReturn[i+1].CharID) {\r\n    //             console.log(roleReturn[i+1])\r\n    //             i++;\r\n    //         }\r\n    //         res++;\r\n    //     }\r\n    //     return res;\r\n    //  }\r\n}\r\n \r\nexport default HomeRoles;",[],"C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\HomeChar.js",["115"],[],"import { useParams, Link } from \"react-router-dom\";\r\n\r\n\r\nconst HomeChar = ({charName, charImg, topTitleID, topTitle}) => {\r\n\r\n// console.log(\"name\", charName, \"img\", charImg, \"topTitleID\", topTitleID, \"topTitle\", topTitle)\r\n\r\n    return (  \r\n        <div className=\"homeChar\">\r\n            <div className=\"homeImgContainer\">\r\n                <img className=\"homeCharImg\" src={charImg} alt={charName}></img>\r\n            </div>\r\n            <h3 className=\"homeCharName\">{charName}</h3>\r\n            <Link to={`/Anime/${topTitleID}/${topTitle}`} id=\"topTitle\">{topTitle}</Link>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default HomeChar;",{"ruleId":"116","severity":1,"message":"117","line":1,"column":8,"nodeType":"118","messageId":"119","endLine":1,"endColumn":14},{"ruleId":"116","severity":1,"message":"120","line":8,"column":20,"nodeType":"118","messageId":"119","endLine":8,"endColumn":29},{"ruleId":"121","severity":1,"message":"122","line":30,"column":13,"nodeType":"123","messageId":"124","endLine":30,"endColumn":15},{"ruleId":"121","severity":1,"message":"125","line":44,"column":17,"nodeType":"123","messageId":"124","endLine":44,"endColumn":19},{"ruleId":"121","severity":1,"message":"122","line":119,"column":12,"nodeType":"123","messageId":"124","endLine":119,"endColumn":14},{"ruleId":"126","severity":1,"message":"127","line":155,"column":7,"nodeType":"128","messageId":"129","endLine":155,"endColumn":37},{"ruleId":"130","severity":1,"message":"131","line":31,"column":8,"nodeType":"132","endLine":31,"endColumn":10,"suggestions":"133"},{"ruleId":"130","severity":1,"message":"134","line":39,"column":8,"nodeType":"132","endLine":39,"endColumn":12,"suggestions":"135"},{"ruleId":"130","severity":1,"message":"136","line":47,"column":8,"nodeType":"132","endLine":47,"endColumn":16,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":159,"column":33,"nodeType":"140","endLine":159,"endColumn":58},{"ruleId":"138","severity":1,"message":"139","line":175,"column":29,"nodeType":"140","endLine":175,"endColumn":70},{"ruleId":"138","severity":1,"message":"139","line":180,"column":17,"nodeType":"140","endLine":180,"endColumn":79},{"ruleId":"116","severity":1,"message":"120","line":3,"column":19,"nodeType":"118","messageId":"119","endLine":3,"endColumn":28},{"ruleId":"116","severity":1,"message":"141","line":3,"column":30,"nodeType":"118","messageId":"119","endLine":3,"endColumn":40},{"ruleId":"116","severity":1,"message":"142","line":6,"column":9,"nodeType":"118","messageId":"119","endLine":6,"endColumn":13},{"ruleId":"116","severity":1,"message":"143","line":7,"column":12,"nodeType":"118","messageId":"119","endLine":7,"endColumn":16},{"ruleId":"116","severity":1,"message":"144","line":7,"column":18,"nodeType":"118","messageId":"119","endLine":7,"endColumn":25},{"ruleId":"116","severity":1,"message":"145","line":8,"column":12,"nodeType":"118","messageId":"119","endLine":8,"endColumn":18},{"ruleId":"116","severity":1,"message":"146","line":8,"column":20,"nodeType":"118","messageId":"119","endLine":8,"endColumn":29},{"ruleId":"116","severity":1,"message":"147","line":9,"column":9,"nodeType":"118","messageId":"119","endLine":9,"endColumn":17},{"ruleId":"130","severity":1,"message":"148","line":29,"column":8,"nodeType":"132","endLine":29,"endColumn":19,"suggestions":"149"},{"ruleId":"116","severity":1,"message":"150","line":3,"column":10,"nodeType":"118","messageId":"119","endLine":3,"endColumn":19},{"ruleId":"130","severity":1,"message":"151","line":52,"column":8,"nodeType":"132","endLine":52,"endColumn":10,"suggestions":"152"},{"ruleId":"130","severity":1,"message":"153","line":68,"column":8,"nodeType":"132","endLine":68,"endColumn":16,"suggestions":"154"},{"ruleId":"116","severity":1,"message":"155","line":12,"column":5,"nodeType":"118","messageId":"119","endLine":12,"endColumn":12},{"ruleId":"116","severity":1,"message":"156","line":21,"column":12,"nodeType":"118","messageId":"119","endLine":21,"endColumn":24},{"ruleId":"130","severity":1,"message":"157","line":61,"column":8,"nodeType":"132","endLine":61,"endColumn":16,"suggestions":"158"},{"ruleId":"130","severity":1,"message":"159","line":77,"column":8,"nodeType":"132","endLine":77,"endColumn":12,"suggestions":"160"},{"ruleId":"130","severity":1,"message":"157","line":87,"column":8,"nodeType":"132","endLine":87,"endColumn":20,"suggestions":"161"},{"ruleId":"121","severity":1,"message":"125","line":137,"column":18,"nodeType":"123","messageId":"124","endLine":137,"endColumn":20},{"ruleId":"130","severity":1,"message":"162","line":141,"column":8,"nodeType":"132","endLine":141,"endColumn":14,"suggestions":"163"},{"ruleId":"138","severity":1,"message":"139","line":246,"column":21,"nodeType":"140","endLine":246,"endColumn":83},{"ruleId":"116","severity":1,"message":"150","line":2,"column":10,"nodeType":"118","messageId":"119","endLine":2,"endColumn":19},{"ruleId":"116","severity":1,"message":"164","line":3,"column":8,"nodeType":"118","messageId":"119","endLine":3,"endColumn":12},{"ruleId":"116","severity":1,"message":"165","line":4,"column":10,"nodeType":"118","messageId":"119","endLine":4,"endColumn":16},{"ruleId":"116","severity":1,"message":"166","line":16,"column":5,"nodeType":"118","messageId":"119","endLine":16,"endColumn":12},{"ruleId":"130","severity":1,"message":"167","line":52,"column":8,"nodeType":"132","endLine":52,"endColumn":10,"suggestions":"168"},{"ruleId":"130","severity":1,"message":"169","line":58,"column":21,"nodeType":"170","endLine":58,"endColumn":23},{"ruleId":"130","severity":1,"message":"171","line":59,"column":22,"nodeType":"132","endLine":59,"endColumn":24},{"ruleId":"130","severity":1,"message":"172","line":78,"column":8,"nodeType":"132","endLine":78,"endColumn":17,"suggestions":"173"},{"ruleId":"116","severity":1,"message":"150","line":2,"column":10,"nodeType":"118","messageId":"119","endLine":2,"endColumn":19},{"ruleId":"116","severity":1,"message":"174","line":2,"column":21,"nodeType":"118","messageId":"119","endLine":2,"endColumn":25},{"ruleId":"116","severity":1,"message":"175","line":40,"column":9,"nodeType":"118","messageId":"119","endLine":40,"endColumn":13},{"ruleId":"116","severity":1,"message":"176","line":53,"column":11,"nodeType":"118","messageId":"119","endLine":53,"endColumn":30},{"ruleId":"130","severity":1,"message":"177","line":80,"column":8,"nodeType":"132","endLine":80,"endColumn":10,"suggestions":"178"},{"ruleId":"130","severity":1,"message":"169","line":86,"column":21,"nodeType":"170","endLine":86,"endColumn":23},{"ruleId":"130","severity":1,"message":"179","line":103,"column":8,"nodeType":"132","endLine":103,"endColumn":24,"suggestions":"180"},{"ruleId":"130","severity":1,"message":"181","line":124,"column":8,"nodeType":"132","endLine":124,"endColumn":17,"suggestions":"182"},{"ruleId":"116","severity":1,"message":"183","line":162,"column":11,"nodeType":"118","messageId":"119","endLine":162,"endColumn":14},{"ruleId":"138","severity":1,"message":"139","line":173,"column":21,"nodeType":"140","endLine":178,"endColumn":22},{"ruleId":"138","severity":1,"message":"139","line":205,"column":21,"nodeType":"140","endLine":210,"endColumn":22},{"ruleId":"138","severity":1,"message":"139","line":213,"column":13,"nodeType":"140","endLine":213,"endColumn":125},{"ruleId":"116","severity":1,"message":"150","line":1,"column":10,"nodeType":"118","messageId":"119","endLine":1,"endColumn":19},"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getData' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["184"],"React Hook useEffect has missing dependencies: 'getData' and 'getSearchData'. Either include them or remove the dependency array.",["185"],"React Hook useEffect has missing dependencies: 'getData', 'getSearchData', and 'id'. Either include them or remove the dependency array.",["186"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useContext' is defined but never used.","'list' is assigned a value but never used.","'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","'myList' is assigned a value but never used.","'setMyList' is assigned a value but never used.","'ImageURL' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSearchData'. Either include it or remove the dependency array.",["187"],"'useParams' is defined but never used.","React Hook useEffect has a missing dependency: 'getHomeActors'. Either include it or remove the dependency array.",["188"],"React Hook useEffect has missing dependencies: 'getHomeActors' and 'nextActor'. Either include them or remove the dependency array.",["189"],"'toggles' is assigned a value but never used.","'showSelected' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'perPage'. Either include it or remove the dependency array.",["190"],"React Hook useEffect has missing dependencies: 'Title' and 'getShowActors'. Either include them or remove the dependency array.",["191"],["192"],"React Hook useEffect has missing dependencies: 'count' and 'perPage'. Either include them or remove the dependency array.",["193"],"'Show' is defined but never used.","'active' is defined but never used.","'started' is defined but never used.","React Hook useEffect has missing dependencies: 'actorID', 'cache', and 'getRoles'. Either include them or remove the dependency array.",["194"],"Assignments to the 'cache' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ObjectExpression","Assignments to the 'actors' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useEffect has a missing dependency: 'getRoles'. Either include it or remove the dependency array.",["195"],"'Link' is defined but never used.","'size' is assigned a value but never used.","'rolesContainerWidth' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'actorID' and 'getRoles'. Either include them or remove the dependency array.",["196"],"React Hook useEffect has missing dependencies: 'direction' and 'resumeScroll'. Either include them or remove the dependency array.",["197"],"React Hook useEffect has missing dependencies: 'getRoles', 'resumeScroll', and 'rolesContainer'. Either include them or remove the dependency array.",["198"],"'arr' is assigned a value but never used.",{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"221","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},"Update the dependencies array to be: [getData, id]",{"range":"228","text":"229"},"Update the dependencies array to be: [getData, getSearchData, id]",{"range":"230","text":"231"},"Update the dependencies array to be: [getData, getSearchData, id, myList]",{"range":"232","text":"233"},"Update the dependencies array to be: [getSearchData, id, title]",{"range":"234","text":"235"},"Update the dependencies array to be: [getHomeActors]",{"range":"236","text":"237"},"Update the dependencies array to be: [getHomeActors, myList, nextActor]",{"range":"238","text":"239"},"Update the dependencies array to be: [actors, perPage]",{"range":"240","text":"241"},"Update the dependencies array to be: [Title, getShowActors, id]",{"range":"242","text":"243"},"Update the dependencies array to be: [dispActors, perPage]",{"range":"244","text":"245"},"Update the dependencies array to be: [count, page, perPage]",{"range":"246","text":"247"},"Update the dependencies array to be: [actorID, cache, getRoles]",{"range":"248","text":"249"},"Update the dependencies array to be: [actorID, getRoles]",{"range":"250","text":"251"},{"range":"252","text":"251"},"Update the dependencies array to be: [direction, resumeScroll, rolesContainer]",{"range":"253","text":"254"},"Update the dependencies array to be: [actorID, getRoles, resumeScroll, rolesContainer]",{"range":"255","text":"256"},[861,863],"[getData, id]",[1015,1019],"[getData, getSearchData, id]",[1171,1179],"[getData, getSearchData, id, myList]",[964,975],"[getSearchData, id, title]",[1700,1702],"[getHomeActors]",[2156,2164],"[getHomeActors, myList, nextActor]",[1775,1783],"[actors, perPage]",[2218,2222],"[Title, getShowActors, id]",[2440,2452],"[dispActors, perPage]",[4033,4039],"[count, page, perPage]",[1444,1446],"[actorID, cache, getRoles]",[2208,2217],"[actorID, getRoles]",[2364,2366],[2993,3009],"[direction, resumeScroll, rolesContainer]",[3605,3614],"[actorID, getRoles, resumeScroll, rolesContainer]"]