[{"C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\index.js":"1","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\App.js":"2","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Actor.js":"3","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\Navbar.js":"4","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Show.js":"5","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Home.js":"6","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\ShowInfo.js":"7","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\ShowRoleToggle.js":"8"},{"size":469,"mtime":1696279387266,"results":"9","hashOfConfig":"10"},{"size":3243,"mtime":1702833625654,"results":"11","hashOfConfig":"10"},{"size":7784,"mtime":1702935763051,"results":"12","hashOfConfig":"10"},{"size":4146,"mtime":1702329726149,"results":"13","hashOfConfig":"10"},{"size":3692,"mtime":1702931544115,"results":"14","hashOfConfig":"10"},{"size":5197,"mtime":1702832486887,"results":"15","hashOfConfig":"10"},{"size":5894,"mtime":1702690631351,"results":"16","hashOfConfig":"10"},{"size":11864,"mtime":1702664731164,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"5ww1no",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},"C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\index.js",[],[],[],"C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\App.js",["46","47","48","49"],[],"C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Actor.js",["50","51","52","53","54"],[],"C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\Navbar.js",["55","56","57","58","59"],[],"import * as React from 'react';\r\nimport { Link, useMatch, useResolvedPath } from \"react-router-dom\"\r\nimport {useState, useEffect, useContext} from \"react\";\r\n\r\nconst Navbar = ({ username }) => {\r\n    var list = \"All Anime\";\r\n    const [user, setUser] = useState(\"\");\r\n    const [myList, setMyList]   = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        // setDBList();\r\n    }, [myList])\r\n\r\n\r\n    const getMALData = async() => {\r\n        console.log(\"getting MAL data\")\r\n        const malData = await fetch ('/api/mal', {\r\n          method: 'POST',\r\n          headers: {\r\n            'content-type': 'application/json',\r\n            'Accept': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            Username: user\r\n          })\r\n        })\r\n        .then(res => res.json());\r\n        let temp = [];\r\n        for (let i in malData.data) {\r\n            temp[i] = malData.data[i].node.id;\r\n        }\r\n        setMyList(temp)\r\n    }\r\n\r\n    \r\n    // const setDBList = async() => {\r\n    //     const lister = await fetch('/api/list', {\r\n    //         method: 'POST',\r\n    //         headers: {\r\n    //           'content-type': 'application/json',\r\n    //           'Accept': 'application/json'\r\n    //         },\r\n    //         body: JSON.stringify({\r\n    //           ids: myList\r\n    //         })\r\n    //       })\r\n    // }\r\n\r\n\r\n    return (\r\n        <nav className=\"nav\">\r\n            <div id='navLeftPane'>\r\n                <Link to=\"/\" className=\"site-title\">\r\n                    Home\r\n                </Link>\r\n            </div>\r\n            <ul>\r\n                {/* <h6>{user}</h6>\r\n                <input type=\"text\"\r\n                    placeholder=\"MAL Username\" \r\n                    value={user} \r\n                    onChange={(e) => setUser(e.target.value)}></input>\r\n                <button onClick={() => getMALData({user})}>api test</button> */}\r\n                <CustomLink to=\"/Anime/\">Anime Search</CustomLink>\r\n                <CustomLink to=\"/Actor/\">Actor Search</CustomLink>\r\n                {/* <h3>Sign in to Filter List</h3> */}\r\n                {/* <input placeholder='Sign in to Filter'></input> */}\r\n            </ul>\r\n        </nav>\r\n    )\r\n    \r\n    module.exports = {\r\n        user,\r\n        myList\r\n    }\r\n}\r\n      \r\n    function CustomLink({ to, children, ...props }) {\r\n        const resolvedPath = useResolvedPath(to)\r\n        const isActive = useMatch({ path: resolvedPath.pathname, end: true })\r\n        \r\n        return (\r\n            <li className={isActive ? \"active\" : \"\"}>\r\n            <Link to={to} {...props}>\r\n                {children}\r\n            </Link>\r\n            </li>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    // return ( \r\n    //     <nav className=\"navbar\">\r\n    //         <h1>MyAnimeList Voice Actors</h1>\r\n    //         <ul className=\"links\">\r\n    //             <a href=\"/\">Home</a>\r\n    //             {/* <a onClick={openSearch}>Show Search</a> */}\r\n    //             <a href=\"/Show\">Show Search</a>\r\n    //             <a href=\"/Actor\">Actor Search</a>\r\n    //         </ul>\r\n    //     </nav>\r\n    //  );\r\n// }\r\n\r\n// const [open, setOpen] = useState(false);\r\n\r\n    // function openSearch() {\r\n    //     setOpen(!open);\r\n    // }\r\n\r\n    // const [keyword, setKeyword] = useState('');\r\n    // const [shows, setShows] = useState([]);\r\n    // const [titles, setTitles] = useState([]);\r\n    // const [showSelected, setShowSelected] = useState(myList.shows[1]);\r\n    \r\n    // const updateKeyword = (keyword) => {\r\n\r\n    //     setKeyword(keyword);\r\n    //     if(keyword === \"\") {\r\n    //         setTitles([])\r\n    //     }\r\n    //     else {\r\n    //         var results = [];\r\n    //         var tRes = [];\r\n    //         for (var id in myList.shows) {\r\n    //             var curr = myList.shows[id];\r\n    //             if (curr.title.toLowerCase().includes(keyword.toLowerCase())) {\r\n    //                 results.push(curr)\r\n    //                 tRes.push(curr.title)\r\n    //             }\r\n    //         }\r\n    //         setTitles(tRes);\r\n    //         setShows(results);\r\n    //     }\r\n    //     // console.log(titles)\r\n    // }\r\n \r\nexport default Navbar;\r\n\r\n","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Show.js",["60","61"],[],"C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Home.js",["62"],[],"C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\ShowInfo.js",["63","64","65","66","67","68","69"],[],"import { useEffect, useState } from \"react\";\r\nimport ShowRoleToggle from \"./ShowRoleToggle\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst   CharName    = 0,\r\n        Favorites   = 1,\r\n        ActorID     = 2,\r\n        ActorName   = 3,\r\n        ImageURL    = 4;\r\n\r\nvar toggles = [];\r\nvar set = false;\r\nvar cache = {};\r\n\r\nconst ShowInfo = ({ user, myList, flag }) => {\r\n\r\n    // console.log(Show)\r\n\r\n    const {id, Title} = useParams();\r\n    const [showSelected, setShowSelected] = useState([id || 0, Title || \"\"])\r\n    const [actors, setActors] = useState([]);\r\n    const [count, setCount] = useState([0]);\r\n    const [page, setPage] = useState(0);\r\n    const [perPage, setPerPage] = useState(16);\r\n    const [hasPrev, setHasPrev] = useState(false);\r\n    const [hasNext, setHasNext] = useState(false); ///////\r\n    const [keyword, setKeyword] = useState('');\r\n    const [dispActors, setDispActors] = useState([]);\r\n    \r\n\r\n    const getShowActors = async() => {\r\n        const showData = await fetch ('/api/show', {\r\n          method: 'POST',\r\n          headers: {\r\n            'content-type': 'application/json',\r\n            'Accept': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            ShowID: id\r\n          })\r\n        })\r\n        .then(res => res.json());\r\n        // console.log(showData)\r\n        for (let i in showData) {\r\n            showData[i] = Object.values(showData[i]);\r\n        }\r\n        setActors(showData)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCount(actors.length)\r\n        if (count > perPage) {\r\n            setHasNext(true);\r\n        }\r\n        setDispActors(actors)\r\n    }, [actors])\r\n\r\n    useEffect(() => {\r\n        // console.log(id)\r\n        cache = {}\r\n        if (id > 0) {\r\n            setShowSelected([id, Title])\r\n            getShowActors();\r\n            setPage(0);\r\n            set = true;\r\n        }\r\n    }, [id]);\r\n\r\n\r\n    function bubbleSortActors(acts, n) {\r\n        var i, j, temp;\r\n        var swapped;\r\n        // console.log(n)\r\n        for (i = 0; i < n - 1; i++) \r\n        {\r\n            swapped = false;\r\n            for (j = 0; j < n - i - 1; j++) {\r\n                if (acts[j][Favorites] < acts[j + 1][Favorites]) {\r\n                        // Swap arr[j] and arr[j+1]\r\n                        temp = acts[j];\r\n                        acts[j] = acts[j + 1];\r\n                        acts[j + 1] = temp;\r\n                        swapped = true;\r\n                }\r\n            } \r\n            // IF no two elements were \r\n            // swapped by inner loop, then break\r\n            if (swapped === false)\r\n                break;\r\n        }\r\n    }\r\n \r\n    function removeDups() {\r\n        var actorIDs = [];\r\n        let i = 0;\r\n        while (true) {\r\n            if (i > actors.length - 1) break;\r\n            // console.log(i)\r\n            // console.log(actors[i][ActorID])\r\n            // console.log(actorIDs)\r\n            // console.log(actors)\r\n            if (actorIDs.includes(actors[i][ActorID])) {\r\n                actors.splice(i, 1);\r\n                i--;\r\n            }\r\n            else {\r\n                actorIDs.push(actors[i][ActorID])\r\n            }\r\n            i++;\r\n            // console.log(actors)\r\n        }\r\n        // count = actors.length;\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(count, page*perPage)\r\n        if (page == 0)\r\n            setHasPrev(false)\r\n        if ((page+1)*perPage > count)\r\n            setHasNext(false)\r\n    }, [page])\r\n\r\n    function prevPage() {\r\n        setPage(page - 1)\r\n        setHasNext(true)\r\n        window.scroll(0, 0);\r\n    }\r\n\r\n    function nextPage() {\r\n        if (hasNext) {\r\n            setPage(page + 1)\r\n            setHasPrev(true)\r\n        }\r\n        window.scroll(0, 0);\r\n    }\r\n\r\n    function filterBy(arr, query) {\r\n        setKeyword(query);\r\n        console.log(arr)\r\n        setDispActors(arr.filter((el) => el[CharName].toLowerCase().includes(query.toLowerCase())\r\n        || el[ActorName].toLowerCase().includes(query.toLowerCase())));\r\n    }\r\n\r\n    return (  \r\n        <>\r\n            <input\r\n                id=\"filterInput\"\r\n                type=\"search\"\r\n                placeholder=\"Filter by Character/Actor\"\r\n                autoComplete=\"off\"\r\n                onChange={(e) => filterBy(actors, e.target.value)}\r\n                value={keyword} />\r\n            {/* {console.log(\"rendered\")} */}\r\n            {/* <h1 className=\"showTitle\">{Title}</h1> */}\r\n            {/* <h1>{page}</h1> */}\r\n            {console.log(\"cache\", cache)}\r\n            <div className=\"showInfo\">\r\n                {removeDups()}\r\n                {bubbleSortActors(actors, actors.length)}\r\n                {actors.length > 0 && set\r\n                    ? dispActors.slice(perPage*page, perPage*page + perPage).map((actor, n) => \r\n                        // <div >\r\n                            <ShowRoleToggle key={actor[ActorID]}\r\n                                            actorID={actor[ActorID]}\r\n                                            actorName={actor[ActorName]}\r\n                                            actorImg={actor[ImageURL]}\r\n                                            showID={id}\r\n                                            flag={flag}\r\n                                            user={user}\r\n                                            myList={myList}\r\n                                            cache={cache}/>\r\n                        // </div>\r\n                    )\r\n                    \r\n                    : <>\r\n                        <p>Failed to load from API :(</p>  \r\n                      </>\r\n                }\r\n                <button id=\"prevPage\" disabled={!hasPrev} onClick={prevPage}>Prev Page</button>\r\n                <button id=\"nextPage\" disabled={!hasNext} onClick={nextPage}>Next Page</button>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n \r\nexport default ShowInfo;","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\ShowRoleToggle.js",["70","71","72","73"],[],"import { useEffect, useState } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport Show from \"../pages/Show\";\r\n\r\nconst CharID    = 0;\r\nconst CharName  = 1;\r\nconst Favorites = 2;\r\nconst ImageURL  = 3;\r\n// const ActorID = 4;\r\nconst ShowID    = 5;\r\nconst Title     = 7;\r\nconst rank      = 8;\r\n\r\nconst ShowRoleToggle = ({actorID, actorName, actorImg, showID, flag, user, myList, cache}) => {\r\n\r\n    // console.log(\"actorID received \", actorID)\r\n    \r\n    const [pos, setPos] = useState(0);\r\n    const [posDot, setPosDot] = useState(pos);\r\n    const [roleReturn, setRoleReturn] = useState([]);\r\n    const [prevActor, setPrevActor] = useState(0);\r\n    // console.log(user, \"in Toggle\")\r\n    var filterFlag = user.length > 0;\r\n    // const [roles, setRoles] = useState([]);\r\n    var size;\r\n    // var prevActor;\r\n\r\n    // \r\n    useEffect(() => {\r\n        if (prevActor !== actorID) {\r\n            setPrevActor(actorID);\r\n            getRoles(actorID);\r\n            restart();\r\n        }\r\n    }, [actorID]);\r\n\r\n\r\n    useEffect(() => {\r\n        // console.log(\"getting roles 2\", actorID)\r\n        // getRoles(actorID);\r\n        cache = {};\r\n    }, [user])\r\n\r\n    useEffect(() => {\r\n        restart();\r\n    }, [showID])\r\n\r\n    // useEffect(() => {\r\n    //     getRoles(actorID);\r\n    // }, []);\r\n    \r\n    const getRoles = async(actID) => {\r\n        // console.log(\"ID sent to roles \", actID)\r\n        if (cache && cache[actID]) {\r\n            setRoleReturn(cache[actID])\r\n        }\r\n        else {\r\n            const roleData = await fetch ('/api/roles', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    ActorID: actID,\r\n                    myList: myList,\r\n                    flag: filterFlag\r\n                })\r\n            }).then(res => res.json())\r\n            // console.log(roleData)\r\n            for (let i in roleData) {\r\n                roleData[i] = Object.values(roleData[i])\r\n            }\r\n            setRoleReturn(Object.values(roleData));\r\n            // console.log(Object.values(roleData))\r\n            cache[actorID] = Object.values(roleData)\r\n        }\r\n\r\n        // let attempt = 0; \r\n        // while (attempt < 20) {\r\n        //     try {\r\n        //         // console.log(roleData)\r\n        //         if (roleData[0].CharName) {\r\n        //             for (let i in roleData) {\r\n        //                 roleData[i] = Object.values(roleData[i])\r\n        //             }\r\n        //         }\r\n        //         setRoleReturn(Object.values(roleData));\r\n        //     }\r\n        //     catch (error) {\r\n        //         console.log(error)\r\n        //     }\r\n        //     attempt++;\r\n        //     sleep(5000)\r\n        // }\r\n\r\n        // console.log(\"rd\", Object.values(roleData))\r\n        // actors[actors.length] = roleData;\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     setNumRoles(countRoles(roles, roles.length));\r\n    //     console.log(\"numRoles\", numRoles)\r\n    // }, [pos, actor]);\r\n\r\n    // console.log(\"pos \", pos);\r\n\r\n    function restart() {\r\n        setPos(0);\r\n        setPosDot(0);\r\n    }\r\n\r\n    function prev() {\r\n        // console.log(\"buffer \", buffer, \"posDot \", posDot, \"pos \", pos, \"ext \", ext)\r\n\r\n        if (pos === 0) {\r\n            setPos(size - 1);\r\n            setPosDot(Math.min(9, size - 1));\r\n            \r\n        }\r\n        else if (pos > 7) {\r\n            if (posDot > 7) \r\n            setPosDot(posDot - 1);\r\n        setPos(pos - 1);\r\n    }\r\n    else {\r\n        setPos(pos - 1);\r\n        setPosDot(posDot - 1);\r\n    }\r\n}\r\nfunction next() {\r\n    // console.log(\"buffer \", buffer, \"posDot \", posDot, \"pos \", pos, \"ext \", ext)\r\n    // end of line\r\n    if (pos === size - 1) {\r\n        setPos(0);\r\n        setPosDot(0);\r\n    }\r\n    // pause at buffer\r\n    else if (posDot === 7 && size - pos > 3 ) {\r\n        setPos(pos + 1)\r\n    }\r\n    // press on\r\n    else {\r\n        setPos(pos + 1);\r\n        setPosDot(posDot + 1);\r\n        // console.log('posDot', posDot)\r\n        // console.log('pos', pos)\r\n        // console.log('size', size)\r\n        // console.log('rr', roleReturn)\r\n    }\r\n} \r\n\r\n    const arr = [];\r\n    \r\n    return ( \r\n        \r\n        <div className=\"roleGallery\">          \r\n            <Link id=\"roleActor\" to={`/Actor/${actorID}`}>{actorName}</Link>\r\n            <div id=\"roleInner\">\r\n                {pos < roleReturn.length\r\n                    ? <>{handleRoles()}\r\n                    <img src={roleReturn[pos][ImageURL]} alt={roleReturn[pos][CharName]} />\r\n                    <div className=\"imgNav\">\r\n                        {size > 1\r\n                            ?<button className=\"roleTogglePrev\" onClick={prev}>←</button>\r\n                            :<></>\r\n                        }\r\n                        <div className=\"selectionDots\">\r\n                            {arr}\r\n                            <br></br>\r\n                            <span className=\"index\"> {pos + 1} of {size} </span>  \r\n                        </div>\r\n                        {size > 1\r\n                            ?<button className=\"roleToggleNext\" onClick={next}>→</button>\r\n                            :<></>\r\n                        }\r\n                    </div>\r\n                    <h4>{roleReturn[String(pos)][CharName]}</h4>\r\n                    <Link to={`/Anime/${roleReturn[pos][ShowID][0]}/${roleReturn[pos][Title][0]}`} id=\"topTitle\">{roleReturn[pos][Title][0]}</Link>\r\n                    <div>\r\n                    {roleReturn[pos][Title].length > 1\r\n                        ?<><div id=\"moreTitles\">•••</div>\r\n                        <div className=\"showsList\">\r\n                            {roleReturn[pos][Title] ?\r\n                            <>\r\n                            {roleReturn[pos][Title].map((title, n) => \r\n                                <Link to={`/Anime/${roleReturn[pos][ShowID][n]}/${title}`} key={n} className=\"altTitles\">{title}</Link>\r\n                                // <div className=\"altTitles\" key={n}>\r\n                                //     {n > 0\r\n                                //         ?<Link to={`/Anime/${roleReturn[pos][ShowID][n]}/${title}`}>{title}</Link>\r\n                                //         :<></>\r\n                                //     }\r\n                                // </div>\r\n                            )}</>\r\n                                : <></>\r\n                            }\r\n                        </div></>\r\n                        : <></>\r\n                    }\r\n                    </div>\r\n                    </>\r\n                    : <>\r\n                        {/* <img src={actorImg} alt={actorName}></img> */}\r\n                    </>\r\n                }\r\n                \r\n            </div>\r\n\r\n        </div>\r\n     );\r\n\r\n\r\n     function handleRoles() {\r\n        combineRoles();\r\n        bubbleSort(roleReturn, roleReturn.length);\r\n        findPrimary();\r\n     }\r\n\r\n     function combineRoles() {\r\n        var currRoleShowIDs = [];\r\n        var currRoleTitles = [];\r\n        var currRoleRanks = [];\r\n        // console.log(roleReturn)\r\n        for (let i = 0; i < roleReturn.length; i++) {\r\n            // If Title is currently a String, turn it into an array\r\n            if (typeof roleReturn[i][Title] == 'string') {\r\n                currRoleShowIDs = [roleReturn[i][ShowID]];\r\n                currRoleTitles  = [roleReturn[i][Title]];\r\n            }\r\n            else {\r\n                currRoleShowIDs = roleReturn[i][ShowID];\r\n                currRoleTitles  = roleReturn[i][Title];\r\n            }\r\n            if (typeof roleReturn[i][rank] == 'number') {\r\n                currRoleRanks = [roleReturn[i][rank]];\r\n            } else {\r\n                currRoleRanks = roleReturn[i][rank];                \r\n            }\r\n\r\n            // \r\n            for (let p = i + 1; p < roleReturn.length; p++) {\r\n                if(roleReturn[i][CharID] === roleReturn[p][CharID]) {\r\n                    // console.log(currRoleTitles, currRoleRanks)\r\n                    currRoleShowIDs.push(roleReturn[p][ShowID]);\r\n                    currRoleTitles.push(String(roleReturn[p][Title]));\r\n                    currRoleRanks.push(roleReturn[p][rank]);\r\n                    roleReturn.splice(p, 1);\r\n                    p--;\r\n                }\r\n                else {\r\n                    i = p - 1;\r\n                    break\r\n                }\r\n            }\r\n            // console.log(currRoleTitles, currRoleRanks)\r\n\r\n            var swapped;\r\n            for (let k = 0; k < currRoleShowIDs.length; k++) {\r\n                swapped = false\r\n                for (let m = 0; m < currRoleShowIDs.length; m++) {\r\n                    if (currRoleRanks[m] > currRoleRanks[m+1]) \r\n                    {\r\n                        swap(currRoleRanks, m, m+1)\r\n                        swap(currRoleShowIDs, m, m+1)\r\n                        swap(currRoleTitles, m, m+1)\r\n                        swapped = true;\r\n                    }\r\n                }\r\n                // IF no two elements were \r\n                // swapped by inner loop, then break\r\n                if (swapped === false)\r\n                break;\r\n            }\r\n\r\n            roleReturn[i][ShowID] = currRoleShowIDs;\r\n            roleReturn[i][Title] = currRoleTitles;\r\n            roleReturn[i][rank] = currRoleRanks;\r\n        }\r\n        size = roleReturn.length;\r\n        for (let i = 0; i < Math.min(size, 10); i++) {\r\n            if (i === posDot)\r\n                arr[i] = \"⦿\"\r\n            else\r\n                arr[i] = \"◦\";\r\n        }\r\n    }\r\n\r\n    function swap(arr, i1, i2) {\r\n        var temp = arr[i1];\r\n        arr[i1] = arr[i2];\r\n        arr[i2] = temp;\r\n    }\r\n\r\n    function bubbleSort(roles, n)\r\n    {\r\n        // roleOrder = [];\r\n        // for (var i in roles) {\r\n        //     roleOrder.push(i)\r\n        // }\r\n        var i, j;\r\n        var swapped;\r\n        for (i = 0; i < n - 1; i++) \r\n        {\r\n            swapped = false;\r\n            for (j = 0; j < n - i - 1; j++) \r\n            {\r\n                if (roles[j][Favorites] < roles[j + 1][Favorites]) \r\n                {\r\n                    // Swap arr[j] and arr[j+1]\r\n                    swap(roles, j, j+1)\r\n                    // temp = roles[j];\r\n                    // roles[j] = roles[j + 1];\r\n                    // roles[j + 1] = temp;\r\n                    swapped = true;\r\n                }\r\n            }\r\n            // IF no two elements were \r\n            // swapped by inner loop, then break\r\n            if (swapped === false)\r\n            break;\r\n        }\r\n    }\r\n\r\n    function findPrimary() {\r\n        // if multiple roles\r\n        if (roleReturn.length > 1) {\r\n            var num = 0;\r\n            // console.log(roleReturn)\r\n            for (var k in roleReturn) {\r\n                // console.log(roleReturn[k])\r\n                // console.log(roleReturn[k][ShowID])\r\n                if (roleReturn[k][ShowID].includes(parseInt(showID))) {\r\n                    \r\n                    var temp = roleReturn[k];\r\n                    roleReturn.splice(k, 1);\r\n                    roleReturn.splice(num, 0, temp);\r\n                    num++;\r\n                }\r\n            }\r\n        }\r\n    }   \r\n\r\n    //  function countRoles(roleReturn, n) {\r\n    //     let res = 0;\r\n    //     console.log(roleReturn)\r\n    //     for (let i = 0; i < n; i++) {\r\n    //         // skip ahead on duplicates\r\n    //         console.log(i)\r\n    //         while (i < n - 1 && roleReturn[i].CharID === roleReturn[i+1].CharID) {\r\n    //             console.log(roleReturn[i+1])\r\n    //             i++;\r\n    //         }\r\n    //         res++;\r\n    //     }\r\n    //     return res;\r\n    //  }\r\n}\r\n \r\nexport default ShowRoleToggle;",{"ruleId":"74","severity":1,"message":"75","line":23,"column":5,"nodeType":"76","endLine":23,"endColumn":7,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":27,"column":13,"nodeType":"80","messageId":"81","endLine":27,"endColumn":15},{"ruleId":"78","severity":1,"message":"82","line":41,"column":17,"nodeType":"80","messageId":"81","endLine":41,"endColumn":19},{"ruleId":"78","severity":1,"message":"79","line":97,"column":12,"nodeType":"80","messageId":"81","endLine":97,"endColumn":14},{"ruleId":"74","severity":1,"message":"83","line":31,"column":8,"nodeType":"76","endLine":31,"endColumn":10,"suggestions":"84"},{"ruleId":"74","severity":1,"message":"85","line":39,"column":8,"nodeType":"76","endLine":39,"endColumn":12,"suggestions":"86"},{"ruleId":"74","severity":1,"message":"87","line":47,"column":8,"nodeType":"76","endLine":47,"endColumn":16,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":137,"column":29,"nodeType":"91","endLine":137,"endColumn":54},{"ruleId":"89","severity":1,"message":"90","line":152,"column":25,"nodeType":"91","endLine":152,"endColumn":66},{"ruleId":"92","severity":1,"message":"93","line":3,"column":30,"nodeType":"94","messageId":"95","endLine":3,"endColumn":40},{"ruleId":"92","severity":1,"message":"96","line":6,"column":9,"nodeType":"94","messageId":"95","endLine":6,"endColumn":13},{"ruleId":"92","severity":1,"message":"97","line":7,"column":18,"nodeType":"94","messageId":"95","endLine":7,"endColumn":25},{"ruleId":"92","severity":1,"message":"98","line":16,"column":11,"nodeType":"94","messageId":"95","endLine":16,"endColumn":21},{"ruleId":"99","severity":1,"message":"100","line":73,"column":5,"nodeType":"101","messageId":"102","endLine":76,"endColumn":6},{"ruleId":"92","severity":1,"message":"103","line":9,"column":9,"nodeType":"94","messageId":"95","endLine":9,"endColumn":17},{"ruleId":"74","severity":1,"message":"104","line":29,"column":8,"nodeType":"76","endLine":29,"endColumn":19,"suggestions":"105"},{"ruleId":"74","severity":1,"message":"106","line":48,"column":8,"nodeType":"76","endLine":48,"endColumn":16,"suggestions":"107"},{"ruleId":"92","severity":1,"message":"108","line":11,"column":5,"nodeType":"94","messageId":"95","endLine":11,"endColumn":12},{"ruleId":"92","severity":1,"message":"109","line":20,"column":12,"nodeType":"94","messageId":"95","endLine":20,"endColumn":24},{"ruleId":"92","severity":1,"message":"110","line":24,"column":21,"nodeType":"94","messageId":"95","endLine":24,"endColumn":31},{"ruleId":"74","severity":1,"message":"111","line":56,"column":8,"nodeType":"76","endLine":56,"endColumn":16,"suggestions":"112"},{"ruleId":"74","severity":1,"message":"113","line":67,"column":8,"nodeType":"76","endLine":67,"endColumn":12,"suggestions":"114"},{"ruleId":"78","severity":1,"message":"82","line":117,"column":18,"nodeType":"80","messageId":"81","endLine":117,"endColumn":20},{"ruleId":"74","severity":1,"message":"111","line":121,"column":8,"nodeType":"76","endLine":121,"endColumn":14,"suggestions":"115"},{"ruleId":"92","severity":1,"message":"116","line":2,"column":10,"nodeType":"94","messageId":"95","endLine":2,"endColumn":19},{"ruleId":"92","severity":1,"message":"117","line":3,"column":8,"nodeType":"94","messageId":"95","endLine":3,"endColumn":12},{"ruleId":"74","severity":1,"message":"118","line":35,"column":8,"nodeType":"76","endLine":35,"endColumn":17,"suggestions":"119"},{"ruleId":"74","severity":1,"message":"120","line":41,"column":17,"nodeType":"121","endLine":41,"endColumn":19},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMALData'. Either include it or remove the dependency array.","ArrayExpression",["122"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","React Hook useEffect has missing dependencies: 'getData' and 'id'. Either include them or remove the dependency array.",["123"],"React Hook useEffect has missing dependencies: 'getData' and 'getSearchData'. Either include them or remove the dependency array.",["124"],"React Hook useEffect has missing dependencies: 'getData', 'getSearchData', and 'id'. Either include them or remove the dependency array.",["125"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'list' is assigned a value but never used.","'setUser' is assigned a value but never used.","'getMALData' is assigned a value but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'ImageURL' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSearchData'. Either include it or remove the dependency array.",["126"],"React Hook useEffect has missing dependencies: 'getHomeActors' and 'nextActor'. Either include them or remove the dependency array.",["127"],"'toggles' is assigned a value but never used.","'showSelected' is assigned a value but never used.","'setPerPage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'count' and 'perPage'. Either include them or remove the dependency array.",["128"],"React Hook useEffect has missing dependencies: 'Title' and 'getShowActors'. Either include them or remove the dependency array.",["129"],["130"],"'useParams' is defined but never used.","'Show' is defined but never used.","React Hook useEffect has missing dependencies: 'getRoles' and 'prevActor'. Either include them or remove the dependency array.",["131"],"Assignments to the 'cache' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ObjectExpression",{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},"Update the dependencies array to be: [getMALData]",{"range":"152","text":"153"},"Update the dependencies array to be: [getData, id]",{"range":"154","text":"155"},"Update the dependencies array to be: [getData, getSearchData, id]",{"range":"156","text":"157"},"Update the dependencies array to be: [getData, getSearchData, id, myList]",{"range":"158","text":"159"},"Update the dependencies array to be: [getSearchData, id, title]",{"range":"160","text":"161"},"Update the dependencies array to be: [getHomeActors, myList, nextActor]",{"range":"162","text":"163"},"Update the dependencies array to be: [actors, count, perPage]",{"range":"164","text":"165"},"Update the dependencies array to be: [Title, getShowActors, id]",{"range":"166","text":"167"},"Update the dependencies array to be: [count, page, perPage]",{"range":"168","text":"169"},"Update the dependencies array to be: [actorID, getRoles, prevActor]",{"range":"170","text":"171"},[635,637],"[getMALData]",[861,863],"[getData, id]",[1015,1019],"[getData, getSearchData, id]",[1171,1179],"[getData, getSearchData, id, myList]",[964,975],"[getSearchData, id, title]",[1391,1399],"[getHomeActors, myList, nextActor]",[1641,1649],"[actors, count, perPage]",[1888,1892],"[Title, getShowActors, id]",[3474,3480],"[count, page, perPage]",[1011,1020],"[actorID, getRoles, prevActor]"]