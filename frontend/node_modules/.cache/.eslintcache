[{"C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\index.js":"1","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\App.js":"2","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Actor.js":"3","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\Navbar.js":"4","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Show.js":"5","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Home.js":"6","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\ShowInfo.js":"7","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\ShowRoleToggle.js":"8"},{"size":469,"mtime":1696279387266,"results":"9","hashOfConfig":"10"},{"size":4444,"mtime":1702962252697,"results":"11","hashOfConfig":"10"},{"size":9545,"mtime":1702960223938,"results":"12","hashOfConfig":"10"},{"size":3072,"mtime":1702955849311,"results":"13","hashOfConfig":"10"},{"size":4674,"mtime":1702940310716,"results":"14","hashOfConfig":"10"},{"size":5434,"mtime":1702959433373,"results":"15","hashOfConfig":"10"},{"size":5893,"mtime":1702942229815,"results":"16","hashOfConfig":"10"},{"size":12542,"mtime":1702958349359,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"5ww1no",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},"C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\index.js",[],[],[],"C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\App.js",["50","51","52","53","54","55"],[],"import Navbar from \"./components/Navbar\";\r\nimport Show from \"./pages/Show\";\r\nimport Home from \"./pages/Home\";\r\nimport Actor from \"./pages/Actor\";\r\nimport { Link, useMatch, useResolvedPath } from \"react-router-dom\"\r\nimport { Route, Routes, useFetcher } from \"react-router-dom\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n\r\nfunction App() {\r\n\tconst [cookies, setCookies] = useCookies([\"acc\", \"list\"])\r\n\tconst [entry, setEntry]  \t= useState(cookies.acc || \"\");\r\n\tconst [myList, setMyList] \t= useState(cookies.list || []);\r\n  \tconst [user, setUser]     \t= useState(cookies.acc || \"\");\r\n\t\r\n\r\n\t// useEffect(() => {\r\n\t// \tsetDBList();\r\n\t// }, [myList])\r\n\r\n\t// useEffect(() => {\r\n\t// \tgetMALData()\r\n\t// }, [])\r\n\r\n\r\n\tconst getMALData = async() => {\r\n\t\tif (entry != \"\") {\r\n\t\t\tconsole.log(\"getting MAL data\")\r\n\t\t\ttry {\r\n\t\t\t\tconst malData = await fetch ('/api/mal', {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t\t\t'Accept': 'application/json'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\t\tUsername: entry\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t\t.then(res => res.json());\r\n\t\t\t\tif (malData == false) {\r\n\t\t\t\t\tconsole.log(\"private\")\r\n\t\t\t\t\talert(\"Your List is marked as private. Please make it public to use this feature.\")\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t// instead of array we're turning the list into a comma separated string\r\n\t\t\t\t\t// let temp = [];\r\n\t\t\t\t\t// for (let i in malData.data) {\r\n\t\t\t\t\t// \ttemp[i] = malData.data[i].node.id;\r\n\t\t\t\t\t// }\r\n\t\t\t\t\tlet str = \"(\"\r\n\t\t\t\t\tfor (let i in malData.data) {\r\n\t\t\t\t\t\tstr += malData.data[i].node.id + \",\"\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstr = str.slice(0, str.length - 1) + \")\"\r\n\t\t\t\t\t// console.log(str)\r\n\t\t\t\t\tsetMyList(str)\r\n\t\t\t\t\tif (str.length > 0) {\r\n\t\t\t\t\t\tsetUser(entry)\r\n\t\t\t\t\t\tsetCookies('acc', entry, {path: '/'})\r\n\t\t\t\t\t\tsetCookies('list', str, {path: '/'})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction userFilter() {\r\n\t\tgetMALData()\r\n\t}\r\n\r\n\t// const setDBList = async() => {\r\n\t// \tif (myList.length > 0) {\r\n\t// \t\tconst myListString = await fetch('/api/list', {\r\n\t// \t\t\tmethod: 'POST',\r\n\t// \t\t\theaders: {\r\n\t// \t\t\t'content-type': 'application/json',\r\n\t// \t\t\t'Accept': 'application/json'\r\n\t// \t\t\t},\r\n\t// \t\t\tbody: JSON.stringify({\r\n\t// \t\t\t\tids: myList\r\n\t// \t\t\t})\r\n\t// \t\t})\r\n\t// \t}\r\n\t// }\r\n\r\n\treturn (\r\n\t\t<div className=\"app\">\r\n\t\t\t{console.log(cookies)}\r\n\t\t\t\r\n\t\t\t{/* <Navbar username={user}>\r\n\t\t\t\t<h1>Hello</h1>\r\n\t\t\t\r\n\t\t\t</Navbar> */}\r\n\t\t\t<nav className=\"nav\">\r\n            <div id='navLeftPane'>\r\n                <Link to=\"/\" className=\"site-title\">Home</Link>\r\n            </div>\r\n\t\t\t<div id=\"userSearchArea\">\r\n\t\t\t\t\t<div id=\"userSearchInputs\">\r\n\t\t\t\t\t\t<input id=\"userSearch\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tplaceholder=\"MAL Username\" \r\n\t\t\t\t\t\t\tvalue={entry} \r\n\t\t\t\t\t\t\tonChange={(e) => setEntry(e.target.value)}\r\n\t\t\t\t\t\t\tonKeyDown={(e) => handleKeyDown(e)}></input>\r\n\t\t\t\t\t\t<button id=\"userSearchButton\" onClick={userFilter}>Filter by User</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t<div id='filterLabel'>\r\n\t\t\t\t\t<h6 id='filter'>Filtered by {user.length > 0 ? user : \"All Anime\"}</h6>\r\n\t\t\t\t\t{user != \"\"\r\n\t\t\t\t\t\t? <button id='unfilter' onClick={removeFilter}>Remove Filter</button>\r\n\t\t\t\t\t\t: <></>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n            <ul id=\"navPages\">\r\n                <CustomLink to=\"/Anime/\">Anime Search</CustomLink>\r\n                <CustomLink to=\"/Actor/\">Actor Search</CustomLink>\r\n            </ul>\r\n        \t</nav>\r\n\t\t\t<Routes>\r\n\t\t\t\t<Route path=\"/Anime/:id?/:title?\" element={<Show user={user} myList={myList}/>} />\r\n\t\t\t\t<Route path=\"/Actor/:id?\" element={<Actor user={user} myList={myList}/>} />\r\n\t\t\t\t<Route path=\"/\" element={<Home user={user} myList={myList}/>} />\r\n\t\t\t</Routes>\r\n\t\t\t{/* <button onClick={getData}>Click</button> */}\r\n\t\t</div>\r\n\t\r\n\t);\r\n\r\n\tfunction CustomLink({ to, children, ...props }) {\r\n        const resolvedPath = useResolvedPath(to)\r\n        const isActive = useMatch({ path: resolvedPath.pathname, end: true })\r\n        \r\n        return (\r\n            <li className={isActive ? \"active\" : \"\"}>\r\n            <Link to={to} {...props}>\r\n                {children}\r\n            </Link>\r\n            </li>\r\n        )\r\n    }\r\n\r\n\tfunction handleKeyDown(e) {\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\tuserFilter();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction removeFilter() {\r\n\t\tsetUser(\"\")\r\n\t\tsetMyList([])\r\n\t\tsetEntry(\"\")\r\n\t\tsetCookies('acc', \"\", {path: '/'})\r\n\t}\r\n}\r\nexport default App\r\n\r\n  \r\n  \r\n  \r\n\r\n\r\n\r\n\r\n\r\n// }\r\n\r\n// export default App;\r\n","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Actor.js",["56","57","58","59","60"],[],"import { useEffect, useState } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\n\r\nconst   actorName   = 0,\r\n        actorImg    = 1,\r\n        charID      = 2,\r\n        charName    = 3,\r\n        favorites   = 4,\r\n        charImg     = 5,\r\n        actorID     = 6,\r\n        showID      = 7,\r\n        title       = 8,\r\n        aFavs       = 9;\r\n\r\nexport default function Actor({user, myList}) {\r\n    \r\n    const {id, name} = useParams();\r\n    const [actor, setActor] = useState([id || 0, name || \"\", \"\", 0]);\r\n    const [roles, setRoles] = useState([]);\r\n    const [names, setNames] = useState([]);\r\n    const [ids, setIds]     = useState([]);\r\n    const [keyword, setKeyword] = useState('');\r\n    \r\n    var filterFlag = user.length > 0;\r\n    // console.log(actor)\r\n\r\n\r\n    useEffect(() => {\r\n        if (id > 0)\r\n            getData();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (id > 0) {\r\n            setKeyword(\"\")\r\n            getSearchData(\"\")\r\n            getData();\r\n        }\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        if (id > 0) {\r\n            setKeyword(\"\")\r\n            getSearchData(\"\")\r\n            getData();\r\n        }\r\n    }, [myList])\r\n\r\n    const getData = async() => {\r\n        // console.log(actor.actorID)\r\n        const actorData = await fetch ('/api/actorFull', {\r\n          method: 'POST',\r\n          headers: {\r\n            'content-type': 'application/json',\r\n            'Accept': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            ActorID: id,\r\n            myList: myList,\r\n            flag: filterFlag\r\n          })\r\n        })\r\n        .then(res => res.json());\r\n        for (let i in actorData) {\r\n            actorData[i] = Object.values(actorData[i])\r\n        }\r\n        // console.log(actorData[0][actorID], actorData[0][actorName], actorData[0][actorImg])\r\n        setActor([actorData[0][actorID], actorData[0][actorName], actorData[0][actorImg], actorData[0][aFavs]]);\r\n        setRoles(actorData)\r\n        console.log(actorData);\r\n    }\r\n\r\n    const getSearchData = async(keyword) => {\r\n        setKeyword(keyword);\r\n        setNames([])\r\n        if(keyword === \"\") {\r\n            setNames([])\r\n        }\r\n        else {\r\n            var idRes = [];\r\n            var nRes = [];\r\n\r\n            const searchData = await fetch ('/api/searchActor', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'content-type': 'application/json',\r\n                  'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                  name: keyword,\r\n                  myList: myList,\r\n                  flag: filterFlag\r\n                })\r\n            })\r\n            .then(res => res.json());\r\n            // console.log(\"SD\", searchData)\r\n\r\n            // console.log(\"RD\", returnedData)\r\n            for (let i in searchData) {\r\n                searchData[i] = Object.values(searchData[i]);\r\n                if (searchData[i][0] > 0) {\r\n                    nRes.push(searchData[i][1]);\r\n                    idRes.push(searchData[i][0]);\r\n                }\r\n            }\r\n            setNames(nRes);\r\n            setIds(idRes);\r\n            // console.log(nRes)\r\n            // console.log(idRes)\r\n        }\r\n    }\r\n\r\n    return (\r\n        // <><div className=\"actorSearchSide\">\r\n        //     <input\r\n        //         id=\"actorSearch\"\r\n        //         className=\"search\"\r\n        //         type=\"search\"\r\n        //         placeholder=\"Search Actor\"\r\n        //         autoComplete=\"off\"\r\n        //         onChange={(e) => getSearchData(e.target.value)}\r\n        //         value={keyword} />\r\n        //     <div className=\"results\">\r\n        //         {/* Display 10 filtered results. Change Show on click */}\r\n        //         {names.slice(0,10).map((name, index) => (\r\n        //             <Link to={`/Actor/${ids[index]}/`} className=\"resBox\" key={name}>{name}</Link>\r\n        //         ))}\r\n        //     </div>\r\n        // </div>\r\n        <div className=\"actorPage\">\r\n            {actor[0] > 0\r\n                ? <> \r\n                {combineRoles()}\r\n                {bubbleSort()} \r\n                <h2 id=\"begin\" style={{display: 'none'}}>Search for an Actor to Begin!</h2>\r\n                    <div className=\"actorSearchSide\">\r\n                    <input\r\n                        id=\"actorSearch\"\r\n                        className=\"search\"\r\n                        type=\"search\"\r\n                        placeholder=\"Search Actor\"\r\n                        autoComplete=\"off\"\r\n                        onChange={(e) => getSearchData(e.target.value)}\r\n                        value={keyword} />\r\n                    <div className=\"results\">\r\n                        {/* Display 10 filtered results. Change Show on click */}\r\n                        {names.slice(0,10).map((name, index) => (\r\n                            <Link to={`/Actor/${ids[index]}/`} className=\"resBox\" key={name}>{name}</Link>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <div className=\"actorRoles\">\r\n                    {roles.map((role, n) => \r\n                        <div className=\"actorRole\">\r\n                            <img src={role[charImg]}></img>\r\n                                <div className=\"info\">\r\n                                    <h3>{role[charName] + \" (\" + role[favorites] + \" Favorites)\"}</h3>\r\n                                    <Link to={`/Anime/${role[showID][n]}/${role[title][0]}`} className=\"actorInfoTitle\">{role[title][0]}</Link>\r\n                                    {/* IF MAPPING ALL ROLES ↓ */}\r\n                                    {/* {role[title].map((title, n) =>\r\n                                        <Link to={`/Anime/${role[showID][n]}/${title}`} key={n} className=\"actorInfoTitle\">{title}</Link>\r\n                                    )} */}\r\n                                </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div id=\"actorRightPane\">\r\n                    <div className=\"actorInfo\">\r\n                        <h1 className=\"actorInfoTitle\">{actor[1]}</h1>\r\n                        <img className=\"actorImg\" src={actor[2]}></img>\r\n                        <p>Favorites: {actor[3]}</p>\r\n                    </div>\r\n                </div>\r\n                </>\r\n                : <><h2 id=\"begin\">Search for an Actor to Begin!</h2>\r\n                    <div className=\"actorSearchSide\">\r\n                    <input\r\n                        id=\"actorSearch\"\r\n                        className=\"search\"\r\n                        type=\"search\"\r\n                        placeholder=\"Search Actor\"\r\n                        autoComplete=\"off\"\r\n                        onChange={(e) => getSearchData(e.target.value)}\r\n                        value={keyword} />\r\n                    <div className=\"results\">\r\n                        {/* Display 10 filtered results. Change Show on click */}\r\n                        {names.slice(0,10).map((name, index) => (\r\n                            <Link to={`/Actor/${ids[index]}/`} className=\"resBox\" key={name}>{name}</Link>\r\n                        ))}\r\n                    </div>\r\n                </div></>\r\n            }\r\n        </div>\r\n    )\r\n\r\n    function combineRoles() {\r\n        // console.log(roles, roles.length)\r\n        var currRoleShowIDs = [];\r\n        var currRoleTitles = [];\r\n        for (let i = 0; i < roles.length; i++) {\r\n            // console.log(roles[i][title])\r\n            if (typeof roles[i][title] == 'string') {\r\n                currRoleShowIDs = [roles[i][showID]];\r\n                currRoleTitles = [roles[i][title]];\r\n                // var currRoleShowIDs = [roles[i].ShowID];\r\n                // var currRoleTitles = [roles[i].Title];\r\n            }\r\n            else {\r\n                currRoleShowIDs = roles[i][showID];\r\n                currRoleTitles = roles[i][title];\r\n            }\r\n            for (let p = i + 1; p < roles.length; p++) {\r\n                if(roles[i][charID] === roles[p][charID]) {\r\n                    // console.log(currRoleShowIDs)\r\n                    currRoleShowIDs.push(roles[p][showID]);\r\n                    currRoleTitles.push(roles[p][title]);\r\n                    // console.log(currRoleTitles)\r\n                    roles.splice(p, 1);\r\n                    p--;\r\n                }\r\n                else {\r\n                    i = p - 1;\r\n                    break\r\n                }\r\n            }\r\n            roles[i][showID] = currRoleShowIDs;\r\n            roles[i][title] = currRoleTitles;\r\n        }\r\n        // console.log(roles)\r\n    }\r\n\r\n    function bubbleSort()\r\n    {\r\n        // roleOrder = [];\r\n        // for (var i in roles) {\r\n        //     roleOrder.push(i)\r\n        // }\r\n        var i, j, temp;\r\n        var n = roles.length;\r\n        var swapped;\r\n        for (i = 0; i < n - 1; i++) \r\n        {\r\n            swapped = false;\r\n            for (j = 0; j < n - i - 1; j++) \r\n            {\r\n                if (roles[j][favorites] < roles[j + 1][favorites]) \r\n                {\r\n                    // Swap arr[j] and arr[j+1]\r\n                    temp = roles[j];\r\n                    roles[j] = roles[j + 1];\r\n                    roles[j + 1] = temp;\r\n                    swapped = true;\r\n                }\r\n            }\r\n            // IF no two elements were \r\n            // swapped by inner loop, then break\r\n            if (swapped === false)\r\n            break;\r\n        }\r\n    }\r\n\r\n\r\n}","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\Navbar.js",["61","62","63","64","65","66"],[],"import * as React from 'react';\r\nimport { Link, useMatch, useResolvedPath } from \"react-router-dom\"\r\nimport {useState, useEffect, useContext} from \"react\";\r\n\r\nconst Navbar = ({ username }) => {\r\n    var list = \"All Anime\";\r\n    const [user, setUser] = useState(\"\");\r\n    const [myList, setMyList]   = useState([]);\r\n\r\n\r\n    \r\n    // const setDBList = async() => {\r\n    //     const lister = await fetch('/api/list', {\r\n    //         method: 'POST',\r\n    //         headers: {\r\n    //           'content-type': 'application/json',\r\n    //           'Accept': 'application/json'\r\n    //         },\r\n    //         body: JSON.stringify({\r\n    //           ids: myList\r\n    //         })\r\n    //       })\r\n    // }\r\n\r\n\r\n    return (\r\n        <nav className=\"nav\">\r\n            <div id='navLeftPane'>\r\n                <Link to=\"/\" className=\"site-title\">\r\n                    Home\r\n                </Link>\r\n            </div>\r\n            <ul>\r\n                <CustomLink to=\"/Anime/\">Anime Search</CustomLink>\r\n                <CustomLink to=\"/Actor/\">Actor Search</CustomLink>\r\n            </ul>\r\n        </nav>\r\n    )\r\n    \r\n    module.exports = {\r\n        user,\r\n        myList\r\n    }\r\n}\r\n      \r\n    function CustomLink({ to, children, ...props }) {\r\n        const resolvedPath = useResolvedPath(to)\r\n        const isActive = useMatch({ path: resolvedPath.pathname, end: true })\r\n        \r\n        return (\r\n            <li className={isActive ? \"active\" : \"\"}>\r\n            <Link to={to} {...props}>\r\n                {children}\r\n            </Link>\r\n            </li>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    // return ( \r\n    //     <nav className=\"navbar\">\r\n    //         <h1>MyAnimeList Voice Actors</h1>\r\n    //         <ul className=\"links\">\r\n    //             <a href=\"/\">Home</a>\r\n    //             {/* <a onClick={openSearch}>Show Search</a> */}\r\n    //             <a href=\"/Show\">Show Search</a>\r\n    //             <a href=\"/Actor\">Actor Search</a>\r\n    //         </ul>\r\n    //     </nav>\r\n    //  );\r\n// }\r\n\r\n// const [open, setOpen] = useState(false);\r\n\r\n    // function openSearch() {\r\n    //     setOpen(!open);\r\n    // }\r\n\r\n    // const [keyword, setKeyword] = useState('');\r\n    // const [shows, setShows] = useState([]);\r\n    // const [titles, setTitles] = useState([]);\r\n    // const [showSelected, setShowSelected] = useState(myList.shows[1]);\r\n    \r\n    // const updateKeyword = (keyword) => {\r\n\r\n    //     setKeyword(keyword);\r\n    //     if(keyword === \"\") {\r\n    //         setTitles([])\r\n    //     }\r\n    //     else {\r\n    //         var results = [];\r\n    //         var tRes = [];\r\n    //         for (var id in myList.shows) {\r\n    //             var curr = myList.shows[id];\r\n    //             if (curr.title.toLowerCase().includes(keyword.toLowerCase())) {\r\n    //                 results.push(curr)\r\n    //                 tRes.push(curr.title)\r\n    //             }\r\n    //         }\r\n    //         setTitles(tRes);\r\n    //         setShows(results);\r\n    //     }\r\n    //     // console.log(titles)\r\n    // }\r\n \r\nexport default Navbar;\r\n\r\n","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Show.js",["67","68"],[],"import ShowInfo from \"../components/ShowInfo\"\r\n// import {myList} from './Home'\r\n// import SearchBar from \"../components/SearchBar\"\r\nimport { useState, useEffect } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\n// import { unmountComponentAtNode } from \"react-dom\";\r\nconst   ShowID      = 0,\r\n        Title       = 1,\r\n        ImageURL    = 2;\r\n\r\n\r\nexport default function Show({user, myList}) {\r\n    \r\n    const { id, title } = useParams();\r\n    const [keyword, setKeyword] = useState('');\r\n    const [shows, setShows] = useState([]);\r\n    const [titles, setTitles] = useState([]);\r\n    const [showSelected, setShowSelected] = useState([id || 0, title || '']);\r\n    var filterFlag = user.length > 0;\r\n    // const [showActors, setShowActors] = useState([]);\r\n    \r\n    // useEffect(() => {\r\n    // }, [showSelected])\r\n\r\n    useEffect(() => {\r\n        setShowSelected([id, title]);\r\n        setKeyword(\"\");\r\n        getSearchData(\"\");\r\n    }, [id, title])\r\n    \r\n    const getSearchData = async(keyword) => {\r\n        setKeyword(keyword);\r\n        setTitles([])\r\n        if(keyword === \"\") {\r\n            setTitles([])\r\n        }\r\n        else {\r\n            var idRes = [];\r\n            var tRes = [];\r\n\r\n            const searchData = await fetch ('/api/search', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'content-type': 'application/json',\r\n                  'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                  Title: keyword,\r\n                  myList: myList,\r\n                  flag: filterFlag\r\n                })\r\n            })\r\n            .then(res => res.json());\r\n            console.log(\"SD\", searchData)\r\n\r\n            // console.log(\"RD\", returnedData)\r\n            for (let i in searchData) {\r\n                searchData[i] = Object.values(searchData[i]);\r\n                tRes.push(searchData[i][Title]);\r\n                idRes.push(searchData[i][ShowID]);\r\n            }\r\n            setTitles(tRes);\r\n            setShows(idRes);\r\n        }\r\n    }\r\n\r\n    return (   \r\n        <>\r\n        <div className=\"show\">\r\n            {/* {console.log(\"showSelected\", showSelected)} */}\r\n            {showSelected[0] !== 0 && showSelected[0] != null //!= 0//.length > 1 //\r\n                ? <>\r\n                    {showSelected[0] !== 0\r\n                        ? <h1 id=\"animeTitle\"> {showSelected[Title]} </h1>\r\n                        : <></>\r\n                    }\r\n                    <div className=\"animeSearchSide\">\r\n                        <input\r\n                            id=\"animeSearch\"\r\n                            className=\"search\"\r\n                            type=\"search\"\r\n                            placeholder=\"Search Anime\"\r\n                            autoComplete=\"off\"\r\n                            onChange={(e) => getSearchData(e.target.value)}\r\n                            value={keyword} />\r\n                        <div className=\"results\">\r\n                            {/* Display 10 filtered results. Change Show on click */}\r\n                            {titles.slice(0,10).map((title, index) => (\r\n                                <Link to={`/Anime/${shows[index]}/${title}`} className=\"resBox\">{title}</Link>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <ShowInfo Show={showSelected} user={user} myList={myList} flag={filterFlag}/>\r\n                </>\r\n                : <><h2 id=\"begin\">Search for an Anime to Begin!</h2>\r\n                <div className=\"animeSearchSide\">\r\n                        <input\r\n                            id=\"animeSearch\"\r\n                            className=\"search\"\r\n                            type=\"search\"\r\n                            placeholder=\"Search Anime\"\r\n                            autoComplete=\"off\"\r\n                            onChange={(e) => getSearchData(e.target.value)}\r\n                            value={keyword} />\r\n                        <div className=\"results\">\r\n                            {/* Display 10 filtered results. Change Show on click */}\r\n                            {titles.slice(0,10).map((title, index) => (\r\n                                <Link to={`/Anime/${shows[index]}/${title}`} className=\"resBox\">{title}</Link>\r\n                            ))}\r\n                        </div>\r\n                    </div></>\r\n            }\r\n            \r\n            {/* <ShowInfo list={myList} show={myList.shows[51535]} /> */}\r\n        </div> \r\n        </>    \r\n        // <ShowInfo show={myList.shows[160]} />\r\n        // <ShowInfo show={myList.shows[146]} />\r\n\r\n    )\r\n}","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\pages\\Home.js",["69"],[],"import { useState, useEffect } from \"react\";\r\nimport ShowRoleToggle from \"../components/ShowRoleToggle\";\r\nimport ls from 'local-storage';\r\n\r\n// const ActorID   = 0;\r\nconst ActorName = 1;\r\n// const Favorites = 2;\r\nconst ImageURL  = 3;\r\n\r\n// export const myList = text;\r\n// const actors = myList.actors;\r\n//const topActors = [118, 185, 65, 672, 869, 34785, 212, 2, 270, 591, 99, 11817, 8, 87]\r\n// var actorsLeft = [];\r\nvar started = false;\r\nvar cache;\r\n\r\nconst Home = ({user, myList}) => {\r\n    \r\n    // var firstIndex;\r\n    // started ? firstIndex = Math.trunc(Math.random() * topActors.length)\r\n    //         : firstIndex = 0;\r\n\r\n    // const firstActor = actors[topActors[firstIndex]];\r\n    // const [prev, setPrev] = useState();\r\n    const [index, setIndex] = useState(0);//firstIndex);\r\n    const [topActors, setTopActors] = useState([]);\r\n    const [actor, setActor] = useState([]);\r\n    const [actorID, setActorID] = useState(0)//topActors[firstIndex]);\r\n    var filterFlag = user.length > 0;\r\n    // console.log(\"topActors\", topActors)\r\n\r\n\r\n    useEffect(() => {\r\n        // getHomeActors();\r\n        started = false;\r\n        cache = {};\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setIndex(0);\r\n        // console.log('index', index)\r\n        started = false;\r\n        getHomeActors()\r\n        // resetIndex();\r\n        if (started) {\r\n            nextActor(0)\r\n        }\r\n    }, [myList])\r\n\r\n\r\n\r\n    // useEffect(() => {\r\n    //     getData()\r\n    // }, [topActors])\r\n\r\n    const getHomeActors = async() => {\r\n        const actorData = await fetch('/api/homeActor', {\r\n            method: 'POST',\r\n            headers: {\r\n              'content-type': 'application/json',\r\n              'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n            //   ActorID: actID\r\n                flag: filterFlag,\r\n                myList: myList\r\n            })\r\n          })\r\n          .then(res => res.json());\r\n          let temp = [];\r\n          for (let i in actorData) {\r\n            temp[i] = actorData[i][0]\r\n          }\r\n          setTopActors(temp)\r\n        //   console.log(temp)\r\n    }\r\n\r\n    const getData = async(actID) => {\r\n        // console.log('actID', actID)\r\n        const actorData = await fetch('/api/actor', {\r\n          method: 'POST',\r\n          headers: {\r\n            'content-type': 'application/json',\r\n            'Accept': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            ActorID: actID\r\n          })\r\n        })\r\n        .then(res => res.json());\r\n        // console.log(\"actorData\", actorData)\r\n        setActor(Object.values(actorData[0]));\r\n        // setActorID(actorData[0][ActorID])\r\n        // console.log(Object.values(actorData[0]));\r\n\r\n        ls.set('actor', actorData[0])\r\n    }\r\n\r\n    function start() {\r\n        getHomeActors();\r\n        nextActor(index);\r\n    }\r\n\r\n    function nextActor(pos) {\r\n        // setActor(loading)\r\n        started = true;\r\n        let temp;\r\n        // console.log(\"index\", index, 'pos', pos)\r\n        // setIndex(Math.trunc(Math.random() * actorsLeft.length - 1));\r\n        if (pos < topActors.length) {\r\n            setIndex(pos + 1);\r\n            temp = topActors[pos];\r\n        }\r\n        else {\r\n            setIndex(1);\r\n            temp = topActors[0];\r\n            // temp = actorsLeft.splice(index, 1)[0];\r\n            // resetLeft();\r\n            // setIndex(Math.trunc(Math.random() * actorsLeft.length - 1));\r\n        }\r\n        setActorID(temp);\r\n        // console.log(topActors)\r\n        // console.log('index', index, 'temp', temp)\r\n        getData(temp);\r\n        // getRoleData();\r\n    }\r\n\r\n\r\n    return ( \r\n        <div className=\"home\">            \r\n            <div className=\"homeInfo\">\r\n                <h2>A tool to display all the works of the voice actors you might know!</h2>\r\n                <br></br>\r\n                <h5>Seiyu is a Japanese word for voice actor</h5>\r\n                <br></br>\r\n                <h6>All data obtained from <a href=\"http://MyAnimeList.net\" target=\"_blank\" rel=\"noreferrer\">MyAnimeList.net</a></h6>\r\n                <div className=\"tips\">\r\n                    Tips: <br /> <pre>      To use the site to the fullest, enter your MyAnimeList username above and click \"Filter by User\" <br></br>      You may navigate the website</pre>\r\n                </div>\r\n               \r\n            </div>\r\n            <div className=\"viewer\">\r\n                {/* {combineRoles()} */}\r\n                {started //actor[0] !== 0\r\n                    ?<><ShowRoleToggle  \r\n                                id=\"topActor\" \r\n                                actorID={actorID} \r\n                                actorName={actor[ActorName]} \r\n                                flag={filterFlag} user={user} \r\n                                myList={myList}\r\n                                cache={cache}/>\r\n                        <div id=\"homeRightPane\">\r\n                            <img className=\"homeActorImg\" src={actor[ImageURL]} alt={actor[ActorName]}></img>\r\n                            <button className=\"nextActor\" onClick={() => nextActor(index)}>View Another!</button>\r\n                        </div></>\r\n                    :<button className=\"firstActor\" onClick={start}>Take a Look!</button>\r\n                }\r\n                {/* {console.log(\"img \", actor.img)} */}\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Home;","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\ShowInfo.js",["70","71","72","73","74","75","76"],[],"import { useEffect, useState } from \"react\";\r\nimport ShowRoleToggle from \"./ShowRoleToggle\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst   CharName    = 0,\r\n        Favorites   = 1,\r\n        ActorID     = 2,\r\n        ActorName   = 3,\r\n        ImageURL    = 4;\r\n\r\nvar toggles = [];\r\nvar set = false;\r\nvar cache = {};\r\n\r\nconst ShowInfo = ({ user, myList, flag }) => {\r\n\r\n    // console.log(Show)\r\n\r\n    const {id, Title} = useParams();\r\n    const [showSelected, setShowSelected] = useState([id || 0, Title || \"\"])\r\n    const [actors, setActors] = useState([]);\r\n    const [count, setCount] = useState([0]);\r\n    const [page, setPage] = useState(0);\r\n    const [perPage, setPerPage] = useState(16);\r\n    const [hasPrev, setHasPrev] = useState(false);\r\n    const [hasNext, setHasNext] = useState(true); ///////\r\n    const [keyword, setKeyword] = useState('');\r\n    const [dispActors, setDispActors] = useState([]);\r\n    \r\n\r\n    const getShowActors = async() => {\r\n        const showData = await fetch ('/api/show', {\r\n          method: 'POST',\r\n          headers: {\r\n            'content-type': 'application/json',\r\n            'Accept': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            ShowID: id\r\n          })\r\n        })\r\n        .then(res => res.json());\r\n        // console.log(showData)\r\n        for (let i in showData) {\r\n            showData[i] = Object.values(showData[i]);\r\n        }\r\n        setActors(showData)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCount(actors.length)\r\n        if (count > perPage) {\r\n            setHasNext(true);\r\n        }\r\n        setDispActors(actors)\r\n    }, [actors])\r\n\r\n    useEffect(() => {\r\n        // console.log(id)\r\n        cache = {}\r\n        if (id > 0) {\r\n            setShowSelected([id, Title])\r\n            getShowActors();\r\n            setPage(0);\r\n            set = true;\r\n        }\r\n    }, [id]);\r\n\r\n\r\n    function bubbleSortActors(acts, n) {\r\n        var i, j, temp;\r\n        var swapped;\r\n        // console.log(n)\r\n        for (i = 0; i < n - 1; i++) \r\n        {\r\n            swapped = false;\r\n            for (j = 0; j < n - i - 1; j++) {\r\n                if (acts[j][Favorites] < acts[j + 1][Favorites]) {\r\n                        // Swap arr[j] and arr[j+1]\r\n                        temp = acts[j];\r\n                        acts[j] = acts[j + 1];\r\n                        acts[j + 1] = temp;\r\n                        swapped = true;\r\n                }\r\n            } \r\n            // IF no two elements were \r\n            // swapped by inner loop, then break\r\n            if (swapped === false)\r\n                break;\r\n        }\r\n    }\r\n \r\n    function removeDups() {\r\n        var actorIDs = [];\r\n        let i = 0;\r\n        while (true) {\r\n            if (i > actors.length - 1) break;\r\n            // console.log(i)\r\n            // console.log(actors[i][ActorID])\r\n            // console.log(actorIDs)\r\n            // console.log(actors)\r\n            if (actorIDs.includes(actors[i][ActorID])) {\r\n                actors.splice(i, 1);\r\n                i--;\r\n            }\r\n            else {\r\n                actorIDs.push(actors[i][ActorID])\r\n            }\r\n            i++;\r\n            // console.log(actors)\r\n        }\r\n        // count = actors.length;\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(count, page*perPage)\r\n        if (page == 0)\r\n            setHasPrev(false)\r\n        if ((page+1)*perPage > count)\r\n            setHasNext(false)\r\n    }, [page])\r\n\r\n    function prevPage() {\r\n        setPage(page - 1)\r\n        setHasNext(true)\r\n        window.scroll(0, 0);\r\n    }\r\n\r\n    function nextPage() {\r\n        if (hasNext) {\r\n            setPage(page + 1)\r\n            setHasPrev(true)\r\n        }\r\n        window.scroll(0, 0);\r\n    }\r\n\r\n    function filterBy(arr, query) {\r\n        setKeyword(query);\r\n        console.log(arr)\r\n        setDispActors(arr.filter((el) => el[CharName].toLowerCase().includes(query.toLowerCase())\r\n        || el[ActorName].toLowerCase().includes(query.toLowerCase())));\r\n    }\r\n\r\n    return (  \r\n        <>\r\n            <input\r\n                id=\"filterInput\"\r\n                type=\"search\"\r\n                placeholder=\"Filter by Character/Actor\"\r\n                autoComplete=\"off\"\r\n                onChange={(e) => filterBy(actors, e.target.value)}\r\n                value={keyword} />\r\n            {/* {console.log(\"rendered\")} */}\r\n            {/* <h1 className=\"showTitle\">{Title}</h1> */}\r\n            {/* <h1>{page}</h1> */}\r\n            {console.log(\"cache\", cache)}\r\n            <div className=\"showInfo\">\r\n                {removeDups()}\r\n                {bubbleSortActors(actors, actors.length)}\r\n                {actors.length > 0 && set\r\n                    ? dispActors.slice(perPage*page, perPage*page + perPage).map((actor, n) => \r\n                        // <div >\r\n                            <ShowRoleToggle key={actor[ActorID]}\r\n                                            actorID={actor[ActorID]}\r\n                                            actorName={actor[ActorName]}\r\n                                            actorImg={actor[ImageURL]}\r\n                                            showID={id}\r\n                                            flag={flag}\r\n                                            user={user}\r\n                                            myList={myList}\r\n                                            cache={cache}/>\r\n                        // </div>\r\n                    )\r\n                    \r\n                    : <>\r\n                        <p>Failed to load from API :(</p>  \r\n                      </>\r\n                }\r\n                <button id=\"prevPage\" disabled={!hasPrev} onClick={prevPage}>Prev Page</button>\r\n                <button id=\"nextPage\" disabled={!hasNext} onClick={nextPage}>Next Page</button>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n \r\nexport default ShowInfo;","C:\\Users\\aphen\\OneDrive\\Documents\\GitHub\\react-voice-actors\\frontend\\src\\components\\ShowRoleToggle.js",["77","78","79","80","81"],[],"import { useEffect, useState, useRef } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport Show from \"../pages/Show\";\r\nconst _ = require('lodash')\r\n\r\nconst CharID    = 0;\r\nconst CharName  = 1;\r\nconst Favorites = 2;\r\nconst ImageURL  = 3;\r\n// const ActorID = 4;\r\nconst ShowID    = 5;\r\nconst Title     = 7;\r\nconst rank      = 8;\r\n\r\nconst ShowRoleToggle = ({actorID, actorName, actorImg, showID, flag, user, myList, cache}) => {\r\n\r\n    // console.log(\"actorID received \", actorID)\r\n    \r\n    const [pos, setPos] = useState(0);\r\n    const [posDot, setPosDot] = useState(pos);\r\n    const [roleReturn, setRoleReturn] = useState([]);\r\n    const [prevActor, setPrevActor] = useState(0);\r\n    const prevUser = useRef(\"\");\r\n\r\n    // console.log(user, \"in Toggle\")\r\n    var filterFlag = user.length > 0;\r\n    // const [roles, setRoles] = useState([]);\r\n    var size;\r\n    // var prevActor;\r\n\r\n    const usePrevious = (value) => {\r\n        const ref = useRef()\r\n        useEffect(() => {\r\n            console.log(\"vallue\")\r\n            ref.current = value;\r\n        }, [value])\r\n        return ref.current;\r\n    }\r\n\r\n    \r\n    useEffect(() => {\r\n        console.log(1, prevUser, 2, user)\r\n        if (!_.isEqual(prevUser, user)) {\r\n            console.log(\"changed\")\r\n            getRoles(actorID)\r\n            cache = {};\r\n        }\r\n        prevUser.current = user\r\n        // if (!_.isEqual(prevUser, user)) {\r\n        //     console.log(\"changed\")\r\n        //     getRoles(actorID)\r\n        //     cache = {};\r\n        // }\r\n    }, [user])\r\n\r\n    useEffect(() => {\r\n        if (prevActor !== actorID) {\r\n            setPrevActor(actorID);\r\n            getRoles(actorID);\r\n            restart();\r\n        }\r\n    }, [actorID]);\r\n\r\n\r\n    useEffect(() => {\r\n        restart();\r\n    }, [showID])\r\n\r\n\r\n    // useEffect(() => {\r\n    //     getRoles(actorID);\r\n    // }, []);\r\n    \r\n    const getRoles = async(actID) => {\r\n        // console.log(\"ID sent to roles \", actID)\r\n        // console.log(1, user, 2, prevUser)\r\n        if (cache && cache[actID]) {\r\n            setRoleReturn(cache[actID])\r\n        }\r\n        else {\r\n            const roleData = await fetch ('/api/roles', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    ActorID: actID,\r\n                    myList: myList,\r\n                    flag: filterFlag\r\n                })\r\n            }).then(res => res.json())\r\n            // console.log(roleData)\r\n            for (let i in roleData) {\r\n                roleData[i] = Object.values(roleData[i])\r\n            }\r\n            setRoleReturn(Object.values(roleData));\r\n            // console.log(Object.values(roleData))\r\n            cache[actorID] = Object.values(roleData)\r\n        }\r\n\r\n        // let attempt = 0; \r\n        // while (attempt < 20) {\r\n        //     try {\r\n        //         // console.log(roleData)\r\n        //         if (roleData[0].CharName) {\r\n        //             for (let i in roleData) {\r\n        //                 roleData[i] = Object.values(roleData[i])\r\n        //             }\r\n        //         }\r\n        //         setRoleReturn(Object.values(roleData));\r\n        //     }\r\n        //     catch (error) {\r\n        //         console.log(error)\r\n        //     }\r\n        //     attempt++;\r\n        //     sleep(5000)\r\n        // }\r\n\r\n        // console.log(\"rd\", Object.values(roleData))\r\n        // actors[actors.length] = roleData;\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     setNumRoles(countRoles(roles, roles.length));\r\n    //     console.log(\"numRoles\", numRoles)\r\n    // }, [pos, actor]);\r\n\r\n    // console.log(\"pos \", pos);\r\n\r\n    function restart() {\r\n        setPos(0);\r\n        setPosDot(0);\r\n    }\r\n\r\n    function prev() {\r\n        // console.log(\"buffer \", buffer, \"posDot \", posDot, \"pos \", pos, \"ext \", ext)\r\n\r\n        if (pos === 0) {\r\n            setPos(size - 1);\r\n            setPosDot(Math.min(9, size - 1));\r\n            \r\n        }\r\n        else if (pos > 7) {\r\n            if (posDot > 7) \r\n            setPosDot(posDot - 1);\r\n        setPos(pos - 1);\r\n    }\r\n    else {\r\n        setPos(pos - 1);\r\n        setPosDot(posDot - 1);\r\n    }\r\n}\r\nfunction next() {\r\n    // console.log(\"buffer \", buffer, \"posDot \", posDot, \"pos \", pos, \"ext \", ext)\r\n    // end of line\r\n    if (pos === size - 1) {\r\n        setPos(0);\r\n        setPosDot(0);\r\n    }\r\n    // pause at buffer\r\n    else if (posDot === 7 && size - pos > 3 ) {\r\n        setPos(pos + 1)\r\n    }\r\n    // press on\r\n    else {\r\n        setPos(pos + 1);\r\n        setPosDot(posDot + 1);\r\n        // console.log('posDot', posDot)\r\n        // console.log('pos', pos)\r\n        // console.log('size', size)\r\n        // console.log('rr', roleReturn)\r\n    }\r\n} \r\n\r\n    const arr = [];\r\n    \r\n    return ( \r\n        \r\n        <div className=\"roleGallery\">          \r\n            <Link id=\"roleActor\" to={`/Actor/${actorID}`}>{actorName}</Link>\r\n            <div id=\"roleInner\">\r\n                {pos < roleReturn.length\r\n                    ? <>{handleRoles()}\r\n                    <img src={roleReturn[pos][ImageURL]} alt={roleReturn[pos][CharName]} />\r\n                    <div className=\"imgNav\">\r\n                        {size > 1\r\n                            ?<button className=\"roleTogglePrev\" onClick={prev}>←</button>\r\n                            :<></>\r\n                        }\r\n                        <div className=\"imgNavIndex\">\r\n                            <div className=\"selectionDots\">\r\n                                {arr}\r\n                            </div>\r\n                            <span className=\"index\"> {pos + 1} of {size} </span>\r\n                        </div>\r\n                        {size > 1\r\n                            ?<button className=\"roleToggleNext\" onClick={next}>→</button>\r\n                            :<></>\r\n                        }\r\n                    </div>\r\n                    <h4>{roleReturn[String(pos)][CharName]}</h4>\r\n                    <Link to={`/Anime/${roleReturn[pos][ShowID][0]}/${roleReturn[pos][Title][0]}`} id=\"topTitle\">{roleReturn[pos][Title][0]}</Link>\r\n                    <div>\r\n                    {roleReturn[pos][Title].length > 1\r\n                        ?<><div id=\"moreTitles\">•••</div>\r\n                        <div className=\"showsList\">\r\n                            {roleReturn[pos][Title] ?\r\n                            <>\r\n                            {roleReturn[pos][Title].map((title, n) => \r\n                                <Link to={`/Anime/${roleReturn[pos][ShowID][n]}/${title}`} key={n} className=\"altTitles\">{title}</Link>\r\n                                // <div className=\"altTitles\" key={n}>\r\n                                //     {n > 0\r\n                                //         ?<Link to={`/Anime/${roleReturn[pos][ShowID][n]}/${title}`}>{title}</Link>\r\n                                //         :<></>\r\n                                //     }\r\n                                // </div>\r\n                            )}</>\r\n                                : <></>\r\n                            }\r\n                        </div></>\r\n                        : <></>\r\n                    }\r\n                    </div>\r\n                    </>\r\n                    : <>\r\n                        {/* <img src={actorImg} alt={actorName}></img> */}\r\n                    </>\r\n                }\r\n                \r\n            </div>\r\n\r\n        </div>\r\n     );\r\n\r\n\r\n     function handleRoles() {\r\n        combineRoles();\r\n        bubbleSort(roleReturn, roleReturn.length);\r\n        findPrimary();\r\n     }\r\n\r\n     function combineRoles() {\r\n        var currRoleShowIDs = [];\r\n        var currRoleTitles = [];\r\n        var currRoleRanks = [];\r\n        // console.log(roleReturn)\r\n        for (let i = 0; i < roleReturn.length; i++) {\r\n            // If Title is currently a String, turn it into an array\r\n            if (typeof roleReturn[i][Title] == 'string') {\r\n                currRoleShowIDs = [roleReturn[i][ShowID]];\r\n                currRoleTitles  = [roleReturn[i][Title]];\r\n            }\r\n            else {\r\n                currRoleShowIDs = roleReturn[i][ShowID];\r\n                currRoleTitles  = roleReturn[i][Title];\r\n            }\r\n            if (typeof roleReturn[i][rank] == 'number') {\r\n                currRoleRanks = [roleReturn[i][rank]];\r\n            } else {\r\n                currRoleRanks = roleReturn[i][rank];                \r\n            }\r\n\r\n            // \r\n            for (let p = i + 1; p < roleReturn.length; p++) {\r\n                if(roleReturn[i][CharID] === roleReturn[p][CharID]) {\r\n                    // console.log(currRoleTitles, currRoleRanks)\r\n                    currRoleShowIDs.push(roleReturn[p][ShowID]);\r\n                    currRoleTitles.push(String(roleReturn[p][Title]));\r\n                    currRoleRanks.push(roleReturn[p][rank]);\r\n                    roleReturn.splice(p, 1);\r\n                    p--;\r\n                }\r\n                else {\r\n                    i = p - 1;\r\n                    break\r\n                }\r\n            }\r\n            // console.log(currRoleTitles, currRoleRanks)\r\n\r\n            var swapped;\r\n            for (let k = 0; k < currRoleShowIDs.length; k++) {\r\n                swapped = false\r\n                for (let m = 0; m < currRoleShowIDs.length; m++) {\r\n                    if (currRoleRanks[m] > currRoleRanks[m+1]) \r\n                    {\r\n                        swap(currRoleRanks, m, m+1)\r\n                        swap(currRoleShowIDs, m, m+1)\r\n                        swap(currRoleTitles, m, m+1)\r\n                        swapped = true;\r\n                    }\r\n                }\r\n                // IF no two elements were \r\n                // swapped by inner loop, then break\r\n                if (swapped === false)\r\n                break;\r\n            }\r\n\r\n            roleReturn[i][ShowID] = currRoleShowIDs;\r\n            roleReturn[i][Title] = currRoleTitles;\r\n            roleReturn[i][rank] = currRoleRanks;\r\n        }\r\n        size = roleReturn.length;\r\n        for (let i = 0; i < Math.min(size, 10); i++) {\r\n            if (i === posDot)\r\n                arr[i] = \"⦿\"\r\n            else\r\n                arr[i] = \"◦\";\r\n        }\r\n    }\r\n\r\n    function swap(arr, i1, i2) {\r\n        var temp = arr[i1];\r\n        arr[i1] = arr[i2];\r\n        arr[i2] = temp;\r\n    }\r\n\r\n    function bubbleSort(roles, n)\r\n    {\r\n        // roleOrder = [];\r\n        // for (var i in roles) {\r\n        //     roleOrder.push(i)\r\n        // }\r\n        var i, j;\r\n        var swapped;\r\n        for (i = 0; i < n - 1; i++) \r\n        {\r\n            swapped = false;\r\n            for (j = 0; j < n - i - 1; j++) \r\n            {\r\n                if (roles[j][Favorites] < roles[j + 1][Favorites]) \r\n                {\r\n                    // Swap arr[j] and arr[j+1]\r\n                    swap(roles, j, j+1)\r\n                    // temp = roles[j];\r\n                    // roles[j] = roles[j + 1];\r\n                    // roles[j + 1] = temp;\r\n                    swapped = true;\r\n                }\r\n            }\r\n            // IF no two elements were \r\n            // swapped by inner loop, then break\r\n            if (swapped === false)\r\n            break;\r\n        }\r\n    }\r\n\r\n    function findPrimary() {\r\n        // if multiple roles\r\n        if (roleReturn.length > 1) {\r\n            var num = 0;\r\n            // console.log(roleReturn)\r\n            for (var k in roleReturn) {\r\n                // console.log(roleReturn[k])\r\n                // console.log(roleReturn[k][ShowID])\r\n                if (roleReturn[k][ShowID].includes(parseInt(showID))) {\r\n                    \r\n                    var temp = roleReturn[k];\r\n                    roleReturn.splice(k, 1);\r\n                    roleReturn.splice(num, 0, temp);\r\n                    num++;\r\n                }\r\n            }\r\n        }\r\n    }   \r\n\r\n    //  function countRoles(roleReturn, n) {\r\n    //     let res = 0;\r\n    //     console.log(roleReturn)\r\n    //     for (let i = 0; i < n; i++) {\r\n    //         // skip ahead on duplicates\r\n    //         console.log(i)\r\n    //         while (i < n - 1 && roleReturn[i].CharID === roleReturn[i+1].CharID) {\r\n    //             console.log(roleReturn[i+1])\r\n    //             i++;\r\n    //         }\r\n    //         res++;\r\n    //     }\r\n    //     return res;\r\n    //  }\r\n}\r\n \r\nexport default ShowRoleToggle;",{"ruleId":"82","severity":1,"message":"83","line":1,"column":8,"nodeType":"84","messageId":"85","endLine":1,"endColumn":14},{"ruleId":"82","severity":1,"message":"86","line":6,"column":25,"nodeType":"84","messageId":"85","endLine":6,"endColumn":35},{"ruleId":"82","severity":1,"message":"87","line":8,"column":20,"nodeType":"84","messageId":"85","endLine":8,"endColumn":29},{"ruleId":"88","severity":1,"message":"89","line":28,"column":13,"nodeType":"90","messageId":"91","endLine":28,"endColumn":15},{"ruleId":"88","severity":1,"message":"92","line":42,"column":17,"nodeType":"90","messageId":"91","endLine":42,"endColumn":19},{"ruleId":"88","severity":1,"message":"89","line":116,"column":12,"nodeType":"90","messageId":"91","endLine":116,"endColumn":14},{"ruleId":"93","severity":1,"message":"94","line":31,"column":8,"nodeType":"95","endLine":31,"endColumn":10,"suggestions":"96"},{"ruleId":"93","severity":1,"message":"97","line":39,"column":8,"nodeType":"95","endLine":39,"endColumn":12,"suggestions":"98"},{"ruleId":"93","severity":1,"message":"99","line":47,"column":8,"nodeType":"95","endLine":47,"endColumn":16,"suggestions":"100"},{"ruleId":"101","severity":1,"message":"102","line":155,"column":29,"nodeType":"103","endLine":155,"endColumn":54},{"ruleId":"101","severity":1,"message":"102","line":170,"column":25,"nodeType":"103","endLine":170,"endColumn":66},{"ruleId":"82","severity":1,"message":"87","line":3,"column":19,"nodeType":"84","messageId":"85","endLine":3,"endColumn":28},{"ruleId":"82","severity":1,"message":"104","line":3,"column":30,"nodeType":"84","messageId":"85","endLine":3,"endColumn":40},{"ruleId":"82","severity":1,"message":"105","line":6,"column":9,"nodeType":"84","messageId":"85","endLine":6,"endColumn":13},{"ruleId":"82","severity":1,"message":"106","line":7,"column":18,"nodeType":"84","messageId":"85","endLine":7,"endColumn":25},{"ruleId":"82","severity":1,"message":"107","line":8,"column":20,"nodeType":"84","messageId":"85","endLine":8,"endColumn":29},{"ruleId":"108","severity":1,"message":"109","line":40,"column":5,"nodeType":"110","messageId":"111","endLine":43,"endColumn":6},{"ruleId":"82","severity":1,"message":"112","line":9,"column":9,"nodeType":"84","messageId":"85","endLine":9,"endColumn":17},{"ruleId":"93","severity":1,"message":"113","line":29,"column":8,"nodeType":"95","endLine":29,"endColumn":19,"suggestions":"114"},{"ruleId":"93","severity":1,"message":"115","line":48,"column":8,"nodeType":"95","endLine":48,"endColumn":16,"suggestions":"116"},{"ruleId":"82","severity":1,"message":"117","line":11,"column":5,"nodeType":"84","messageId":"85","endLine":11,"endColumn":12},{"ruleId":"82","severity":1,"message":"118","line":20,"column":12,"nodeType":"84","messageId":"85","endLine":20,"endColumn":24},{"ruleId":"82","severity":1,"message":"119","line":24,"column":21,"nodeType":"84","messageId":"85","endLine":24,"endColumn":31},{"ruleId":"93","severity":1,"message":"120","line":56,"column":8,"nodeType":"95","endLine":56,"endColumn":16,"suggestions":"121"},{"ruleId":"93","severity":1,"message":"122","line":67,"column":8,"nodeType":"95","endLine":67,"endColumn":12,"suggestions":"123"},{"ruleId":"88","severity":1,"message":"92","line":117,"column":18,"nodeType":"90","messageId":"91","endLine":117,"endColumn":20},{"ruleId":"93","severity":1,"message":"120","line":121,"column":8,"nodeType":"95","endLine":121,"endColumn":14,"suggestions":"124"},{"ruleId":"82","severity":1,"message":"125","line":2,"column":10,"nodeType":"84","messageId":"85","endLine":2,"endColumn":19},{"ruleId":"82","severity":1,"message":"126","line":3,"column":8,"nodeType":"84","messageId":"85","endLine":3,"endColumn":12},{"ruleId":"82","severity":1,"message":"127","line":31,"column":11,"nodeType":"84","messageId":"85","endLine":31,"endColumn":22},{"ruleId":"93","severity":1,"message":"128","line":46,"column":21,"nodeType":"129","endLine":46,"endColumn":23},{"ruleId":"93","severity":1,"message":"130","line":62,"column":8,"nodeType":"95","endLine":62,"endColumn":17,"suggestions":"131"},"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'useFetcher' is defined but never used.","'useEffect' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getData' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["132"],"React Hook useEffect has missing dependencies: 'getData' and 'getSearchData'. Either include them or remove the dependency array.",["133"],"React Hook useEffect has missing dependencies: 'getData', 'getSearchData', and 'id'. Either include them or remove the dependency array.",["134"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useContext' is defined but never used.","'list' is assigned a value but never used.","'setUser' is assigned a value but never used.","'setMyList' is assigned a value but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'ImageURL' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSearchData'. Either include it or remove the dependency array.",["135"],"React Hook useEffect has missing dependencies: 'getHomeActors' and 'nextActor'. Either include them or remove the dependency array.",["136"],"'toggles' is assigned a value but never used.","'showSelected' is assigned a value but never used.","'setPerPage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'count' and 'perPage'. Either include them or remove the dependency array.",["137"],"React Hook useEffect has missing dependencies: 'Title' and 'getShowActors'. Either include them or remove the dependency array.",["138"],["139"],"'useParams' is defined but never used.","'Show' is defined but never used.","'usePrevious' is assigned a value but never used.","Assignments to the 'cache' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ObjectExpression","React Hook useEffect has missing dependencies: 'getRoles' and 'prevActor'. Either include them or remove the dependency array.",["140"],{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},"Update the dependencies array to be: [getData, id]",{"range":"159","text":"160"},"Update the dependencies array to be: [getData, getSearchData, id]",{"range":"161","text":"162"},"Update the dependencies array to be: [getData, getSearchData, id, myList]",{"range":"163","text":"164"},"Update the dependencies array to be: [getSearchData, id, title]",{"range":"165","text":"166"},"Update the dependencies array to be: [getHomeActors, myList, nextActor]",{"range":"167","text":"168"},"Update the dependencies array to be: [actors, count, perPage]",{"range":"169","text":"170"},"Update the dependencies array to be: [Title, getShowActors, id]",{"range":"171","text":"172"},"Update the dependencies array to be: [count, page, perPage]",{"range":"173","text":"174"},"Update the dependencies array to be: [actorID, getRoles, prevActor]",{"range":"175","text":"176"},[861,863],"[getData, id]",[1015,1019],"[getData, getSearchData, id]",[1171,1179],"[getData, getSearchData, id, myList]",[964,975],"[getSearchData, id, title]",[1391,1399],"[getHomeActors, myList, nextActor]",[1640,1648],"[actors, count, perPage]",[1887,1891],"[Title, getShowActors, id]",[3473,3479],"[count, page, perPage]",[1728,1737],"[actorID, getRoles, prevActor]"]